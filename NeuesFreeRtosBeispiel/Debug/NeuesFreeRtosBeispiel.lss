
NeuesFreeRtosBeispiel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000552c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000bc  20000000  0000552c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005388  200000bc  000055e8  000200bc  2**2
                  ALLOC
  3 .stack        00002004  20005444  0000a970  000200bc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0003b83c  00000000  00000000  0002013d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005786  00000000  00000000  0005b979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000d91f  00000000  00000000  000610ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b98  00000000  00000000  0006ea1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fd8  00000000  00000000  0006f5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e70f  00000000  00000000  0007058e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000131f4  00000000  00000000  0008ec9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009a676  00000000  00000000  000a1e91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000023a8  00000000  00000000  0013c508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 74 00 20 71 2e 00 00 6d 2e 00 00 6d 2e 00 00     Ht. q...m...m...
	...
      2c:	85 30 00 00 00 00 00 00 00 00 00 00 61 31 00 00     .0..........a1..
      3c:	a5 31 00 00 6d 2e 00 00 6d 2e 00 00 6d 2e 00 00     .1..m...m...m...
      4c:	6d 2e 00 00 6d 2e 00 00 6d 2e 00 00 6d 2e 00 00     m...m...m...m...
      5c:	6d 2e 00 00 6d 2e 00 00 8d 1e 00 00 9d 1e 00 00     m...m...........
      6c:	ad 1e 00 00 bd 1e 00 00 cd 1e 00 00 dd 1e 00 00     ................
      7c:	6d 2e 00 00 6d 2e 00 00 6d 2e 00 00 6d 2e 00 00     m...m...m...m...
      8c:	6d 2e 00 00 6d 2e 00 00 00 00 00 00 00 00 00 00     m...m...........
      9c:	6d 2e 00 00 6d 2e 00 00 6d 2e 00 00 6d 2e 00 00     m...m...m...m...
      ac:	6d 2e 00 00 00 00 00 00                             m.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000bc 	.word	0x200000bc
      d4:	00000000 	.word	0x00000000
      d8:	0000552c 	.word	0x0000552c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000c0 	.word	0x200000c0
     108:	0000552c 	.word	0x0000552c
     10c:	0000552c 	.word	0x0000552c
     110:	00000000 	.word	0x00000000

00000114 <debugTask>:




static void debugTask(void *params)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	46c6      	mov	lr, r8
     118:	b500      	push	{lr}
     11a:	b082      	sub	sp, #8

	
	while(1)
	{
		if(SEND_iterator != MSG_iterator)
     11c:	4d13      	ldr	r5, [pc, #76]	; (16c <debugTask+0x58>)
     11e:	4c14      	ldr	r4, [pc, #80]	; (170 <debugTask+0x5c>)
			if(SEND_iterator >= MSG_BUFFER_LENGTH) SEND_iterator = 0;
			taskEXIT_CRITICAL();
		}
		else
		{
			vTaskDelay(50); // kleine Pause um nicht die ganze zeit aktiv zu warten //TODO führt zu Hardfault Handler!
     120:	4b14      	ldr	r3, [pc, #80]	; (174 <debugTask+0x60>)
     122:	4698      	mov	r8, r3
     124:	e004      	b.n	130 <debugTask+0x1c>
			if(SEND_iterator >= MSG_BUFFER_LENGTH) SEND_iterator = 0;
     126:	2200      	movs	r2, #0
     128:	4b11      	ldr	r3, [pc, #68]	; (170 <debugTask+0x5c>)
     12a:	801a      	strh	r2, [r3, #0]
			taskEXIT_CRITICAL();
     12c:	4b12      	ldr	r3, [pc, #72]	; (178 <debugTask+0x64>)
     12e:	4798      	blx	r3
		if(SEND_iterator != MSG_iterator)
     130:	882b      	ldrh	r3, [r5, #0]
     132:	b29b      	uxth	r3, r3
     134:	8822      	ldrh	r2, [r4, #0]
     136:	429a      	cmp	r2, r3
     138:	d015      	beq.n	166 <debugTask+0x52>
			taskENTER_CRITICAL();
     13a:	4b10      	ldr	r3, [pc, #64]	; (17c <debugTask+0x68>)
     13c:	4798      	blx	r3
			uint16_t dat = MSG_Buffer[SEND_iterator];
     13e:	4e0c      	ldr	r6, [pc, #48]	; (170 <debugTask+0x5c>)
     140:	8833      	ldrh	r3, [r6, #0]
     142:	4f0f      	ldr	r7, [pc, #60]	; (180 <debugTask+0x6c>)
     144:	5cf9      	ldrb	r1, [r7, r3]
			code = usart_write_wait(&usart_instance,dat);
     146:	480f      	ldr	r0, [pc, #60]	; (184 <debugTask+0x70>)
     148:	4b0f      	ldr	r3, [pc, #60]	; (188 <debugTask+0x74>)
     14a:	4798      	blx	r3
     14c:	466b      	mov	r3, sp
     14e:	71d8      	strb	r0, [r3, #7]
			MSG_Buffer[SEND_iterator] = 0;
     150:	8833      	ldrh	r3, [r6, #0]
     152:	2200      	movs	r2, #0
     154:	54fa      	strb	r2, [r7, r3]
			SEND_iterator++;	
     156:	3301      	adds	r3, #1
     158:	b29b      	uxth	r3, r3
			if(SEND_iterator >= MSG_BUFFER_LENGTH) SEND_iterator = 0;
     15a:	4a0c      	ldr	r2, [pc, #48]	; (18c <debugTask+0x78>)
     15c:	4293      	cmp	r3, r2
     15e:	d8e2      	bhi.n	126 <debugTask+0x12>
			SEND_iterator++;	
     160:	4a03      	ldr	r2, [pc, #12]	; (170 <debugTask+0x5c>)
     162:	8013      	strh	r3, [r2, #0]
     164:	e7e2      	b.n	12c <debugTask+0x18>
			vTaskDelay(50); // kleine Pause um nicht die ganze zeit aktiv zu warten //TODO führt zu Hardfault Handler!
     166:	2032      	movs	r0, #50	; 0x32
     168:	47c0      	blx	r8
     16a:	e7e1      	b.n	130 <debugTask+0x1c>
     16c:	200041e0 	.word	0x200041e0
     170:	200041e2 	.word	0x200041e2
     174:	00003eb1 	.word	0x00003eb1
     178:	0000312d 	.word	0x0000312d
     17c:	00003115 	.word	0x00003115
     180:	200041e4 	.word	0x200041e4
     184:	2000412c 	.word	0x2000412c
     188:	00002715 	.word	0x00002715
     18c:	000001ff 	.word	0x000001ff

00000190 <addMSG>:
{
     190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     192:	46ce      	mov	lr, r9
     194:	4647      	mov	r7, r8
     196:	b580      	push	{r7, lr}
     198:	0004      	movs	r4, r0
	taskENTER_CRITICAL();
     19a:	4b22      	ldr	r3, [pc, #136]	; (224 <addMSG+0x94>)
     19c:	4798      	blx	r3
	uint8_t i = 0;
     19e:	2300      	movs	r3, #0
		MSG_Buffer[MSG_iterator] = string[i];
     1a0:	4921      	ldr	r1, [pc, #132]	; (228 <addMSG+0x98>)
     1a2:	4a22      	ldr	r2, [pc, #136]	; (22c <addMSG+0x9c>)
     1a4:	4690      	mov	r8, r2
		string[i] = 0;
     1a6:	2000      	movs	r0, #0
		if(MSG_iterator >= MSG_BUFFER_LENGTH) MSG_iterator = 0;
     1a8:	4a21      	ldr	r2, [pc, #132]	; (230 <addMSG+0xa0>)
     1aa:	4691      	mov	r9, r2
     1ac:	468c      	mov	ip, r1
	while(string[i] != 0)
     1ae:	e002      	b.n	1b6 <addMSG+0x26>
		if (i >= NEW_MSG_LENGTH) break; // kein \n gefunden!
     1b0:	b25a      	sxtb	r2, r3
     1b2:	2a00      	cmp	r2, #0
     1b4:	db15      	blt.n	1e2 <addMSG+0x52>
	while(string[i] != 0)
     1b6:	18e6      	adds	r6, r4, r3
     1b8:	7837      	ldrb	r7, [r6, #0]
     1ba:	2f00      	cmp	r7, #0
     1bc:	d011      	beq.n	1e2 <addMSG+0x52>
		MSG_Buffer[MSG_iterator] = string[i];
     1be:	880a      	ldrh	r2, [r1, #0]
     1c0:	b292      	uxth	r2, r2
     1c2:	4645      	mov	r5, r8
     1c4:	54af      	strb	r7, [r5, r2]
		string[i] = 0;
     1c6:	7030      	strb	r0, [r6, #0]
		MSG_iterator++;
     1c8:	880a      	ldrh	r2, [r1, #0]
     1ca:	3201      	adds	r2, #1
     1cc:	b292      	uxth	r2, r2
     1ce:	800a      	strh	r2, [r1, #0]
		i++;
     1d0:	3301      	adds	r3, #1
     1d2:	b2db      	uxtb	r3, r3
		if(MSG_iterator >= MSG_BUFFER_LENGTH) MSG_iterator = 0;
     1d4:	880a      	ldrh	r2, [r1, #0]
     1d6:	b292      	uxth	r2, r2
     1d8:	454a      	cmp	r2, r9
     1da:	d9e9      	bls.n	1b0 <addMSG+0x20>
     1dc:	4662      	mov	r2, ip
     1de:	8010      	strh	r0, [r2, #0]
     1e0:	e7e6      	b.n	1b0 <addMSG+0x20>
	MSG_Buffer[MSG_iterator] =0x0A; // next line
     1e2:	4b11      	ldr	r3, [pc, #68]	; (228 <addMSG+0x98>)
     1e4:	881a      	ldrh	r2, [r3, #0]
     1e6:	b292      	uxth	r2, r2
     1e8:	4910      	ldr	r1, [pc, #64]	; (22c <addMSG+0x9c>)
     1ea:	200a      	movs	r0, #10
     1ec:	5488      	strb	r0, [r1, r2]
	MSG_iterator++;
     1ee:	881a      	ldrh	r2, [r3, #0]
     1f0:	3201      	adds	r2, #1
     1f2:	b292      	uxth	r2, r2
     1f4:	801a      	strh	r2, [r3, #0]
	MSG_Buffer[MSG_iterator] =0x0D; // Cursor to first Row
     1f6:	881a      	ldrh	r2, [r3, #0]
     1f8:	b292      	uxth	r2, r2
     1fa:	3003      	adds	r0, #3
     1fc:	5488      	strb	r0, [r1, r2]
	MSG_iterator++;
     1fe:	881a      	ldrh	r2, [r3, #0]
     200:	3201      	adds	r2, #1
     202:	b292      	uxth	r2, r2
     204:	801a      	strh	r2, [r3, #0]
	if(MSG_iterator >= MSG_BUFFER_LENGTH) MSG_iterator = 0;
     206:	881b      	ldrh	r3, [r3, #0]
     208:	b29b      	uxth	r3, r3
     20a:	4a09      	ldr	r2, [pc, #36]	; (230 <addMSG+0xa0>)
     20c:	4293      	cmp	r3, r2
     20e:	d902      	bls.n	216 <addMSG+0x86>
     210:	2200      	movs	r2, #0
     212:	4b05      	ldr	r3, [pc, #20]	; (228 <addMSG+0x98>)
     214:	801a      	strh	r2, [r3, #0]
	taskEXIT_CRITICAL();
     216:	4b07      	ldr	r3, [pc, #28]	; (234 <addMSG+0xa4>)
     218:	4798      	blx	r3
}
     21a:	bc0c      	pop	{r2, r3}
     21c:	4690      	mov	r8, r2
     21e:	4699      	mov	r9, r3
     220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	00003115 	.word	0x00003115
     228:	200041e0 	.word	0x200041e0
     22c:	200041e4 	.word	0x200041e4
     230:	000001ff 	.word	0x000001ff
     234:	0000312d 	.word	0x0000312d

00000238 <infoMSG>:
{
     238:	b40f      	push	{r0, r1, r2, r3}
     23a:	b530      	push	{r4, r5, lr}
     23c:	b083      	sub	sp, #12
     23e:	ab06      	add	r3, sp, #24
     240:	cb20      	ldmia	r3!, {r5}
	va_start(argptr, format);
     242:	9301      	str	r3, [sp, #4]
	strcpy(new_msg,INFO_PRAEFIX);
     244:	4c09      	ldr	r4, [pc, #36]	; (26c <infoMSG+0x34>)
     246:	221b      	movs	r2, #27
     248:	4909      	ldr	r1, [pc, #36]	; (270 <infoMSG+0x38>)
     24a:	0020      	movs	r0, r4
     24c:	4b09      	ldr	r3, [pc, #36]	; (274 <infoMSG+0x3c>)
     24e:	4798      	blx	r3
	vsprintf((new_msg + sizeof(INFO_PRAEFIX) - 1),format,argptr);
     250:	0020      	movs	r0, r4
     252:	301a      	adds	r0, #26
     254:	9a01      	ldr	r2, [sp, #4]
     256:	0029      	movs	r1, r5
     258:	4b07      	ldr	r3, [pc, #28]	; (278 <infoMSG+0x40>)
     25a:	4798      	blx	r3
	addMSG(new_msg);
     25c:	0020      	movs	r0, r4
     25e:	4b07      	ldr	r3, [pc, #28]	; (27c <infoMSG+0x44>)
     260:	4798      	blx	r3
}
     262:	b003      	add	sp, #12
     264:	bc30      	pop	{r4, r5}
     266:	bc08      	pop	{r3}
     268:	b004      	add	sp, #16
     26a:	4718      	bx	r3
     26c:	20004160 	.word	0x20004160
     270:	00005018 	.word	0x00005018
     274:	0000471d 	.word	0x0000471d
     278:	00004939 	.word	0x00004939
     27c:	00000191 	.word	0x00000191

00000280 <debugMSG>:
{
     280:	b40f      	push	{r0, r1, r2, r3}
     282:	b530      	push	{r4, r5, lr}
     284:	b083      	sub	sp, #12
     286:	ab06      	add	r3, sp, #24
     288:	cb20      	ldmia	r3!, {r5}
	va_start(argptr, format);
     28a:	9301      	str	r3, [sp, #4]
	strcpy(new_msg,DEBUG_PRAEFIX);
     28c:	4c09      	ldr	r4, [pc, #36]	; (2b4 <debugMSG+0x34>)
     28e:	221b      	movs	r2, #27
     290:	4909      	ldr	r1, [pc, #36]	; (2b8 <debugMSG+0x38>)
     292:	0020      	movs	r0, r4
     294:	4b09      	ldr	r3, [pc, #36]	; (2bc <debugMSG+0x3c>)
     296:	4798      	blx	r3
	vsprintf((new_msg + sizeof(DEBUG_PRAEFIX) - 1),format,argptr);
     298:	0020      	movs	r0, r4
     29a:	301a      	adds	r0, #26
     29c:	9a01      	ldr	r2, [sp, #4]
     29e:	0029      	movs	r1, r5
     2a0:	4b07      	ldr	r3, [pc, #28]	; (2c0 <debugMSG+0x40>)
     2a2:	4798      	blx	r3
	addMSG(new_msg);
     2a4:	0020      	movs	r0, r4
     2a6:	4b07      	ldr	r3, [pc, #28]	; (2c4 <debugMSG+0x44>)
     2a8:	4798      	blx	r3
}
     2aa:	b003      	add	sp, #12
     2ac:	bc30      	pop	{r4, r5}
     2ae:	bc08      	pop	{r3}
     2b0:	b004      	add	sp, #16
     2b2:	4718      	bx	r3
     2b4:	20004160 	.word	0x20004160
     2b8:	00004fe0 	.word	0x00004fe0
     2bc:	0000471d 	.word	0x0000471d
     2c0:	00004939 	.word	0x00004939
     2c4:	00000191 	.word	0x00000191

000002c8 <warningMSG>:
{
     2c8:	b40f      	push	{r0, r1, r2, r3}
     2ca:	b530      	push	{r4, r5, lr}
     2cc:	b083      	sub	sp, #12
     2ce:	ab06      	add	r3, sp, #24
     2d0:	cb20      	ldmia	r3!, {r5}
	va_start(argptr, format);
     2d2:	9301      	str	r3, [sp, #4]
	strcpy(new_msg,WARNING_PRAEFIX);
     2d4:	4c09      	ldr	r4, [pc, #36]	; (2fc <warningMSG+0x34>)
     2d6:	221b      	movs	r2, #27
     2d8:	4909      	ldr	r1, [pc, #36]	; (300 <warningMSG+0x38>)
     2da:	0020      	movs	r0, r4
     2dc:	4b09      	ldr	r3, [pc, #36]	; (304 <warningMSG+0x3c>)
     2de:	4798      	blx	r3
	vsprintf((new_msg + sizeof(WARNING_PRAEFIX) - 1),format,argptr);
     2e0:	0020      	movs	r0, r4
     2e2:	301a      	adds	r0, #26
     2e4:	9a01      	ldr	r2, [sp, #4]
     2e6:	0029      	movs	r1, r5
     2e8:	4b07      	ldr	r3, [pc, #28]	; (308 <warningMSG+0x40>)
     2ea:	4798      	blx	r3
	addMSG(new_msg);
     2ec:	0020      	movs	r0, r4
     2ee:	4b07      	ldr	r3, [pc, #28]	; (30c <warningMSG+0x44>)
     2f0:	4798      	blx	r3
}
     2f2:	b003      	add	sp, #12
     2f4:	bc30      	pop	{r4, r5}
     2f6:	bc08      	pop	{r3}
     2f8:	b004      	add	sp, #16
     2fa:	4718      	bx	r3
     2fc:	20004160 	.word	0x20004160
     300:	00005034 	.word	0x00005034
     304:	0000471d 	.word	0x0000471d
     308:	00004939 	.word	0x00004939
     30c:	00000191 	.word	0x00000191

00000310 <errorMSG>:
{
     310:	b40f      	push	{r0, r1, r2, r3}
     312:	b530      	push	{r4, r5, lr}
     314:	b083      	sub	sp, #12
     316:	ab06      	add	r3, sp, #24
     318:	cb20      	ldmia	r3!, {r5}
	va_start(argptr, format);
     31a:	9301      	str	r3, [sp, #4]
	strcpy(new_msg,ERROR_PRAEFIX);
     31c:	4c09      	ldr	r4, [pc, #36]	; (344 <errorMSG+0x34>)
     31e:	221b      	movs	r2, #27
     320:	4909      	ldr	r1, [pc, #36]	; (348 <errorMSG+0x38>)
     322:	0020      	movs	r0, r4
     324:	4b09      	ldr	r3, [pc, #36]	; (34c <errorMSG+0x3c>)
     326:	4798      	blx	r3
	vsprintf((new_msg + sizeof(ERROR_PRAEFIX) - 1),format,argptr);
     328:	0020      	movs	r0, r4
     32a:	301a      	adds	r0, #26
     32c:	9a01      	ldr	r2, [sp, #4]
     32e:	0029      	movs	r1, r5
     330:	4b07      	ldr	r3, [pc, #28]	; (350 <errorMSG+0x40>)
     332:	4798      	blx	r3
	addMSG(new_msg);
     334:	0020      	movs	r0, r4
     336:	4b07      	ldr	r3, [pc, #28]	; (354 <errorMSG+0x44>)
     338:	4798      	blx	r3
}
     33a:	b003      	add	sp, #12
     33c:	bc30      	pop	{r4, r5}
     33e:	bc08      	pop	{r3}
     340:	b004      	add	sp, #16
     342:	4718      	bx	r3
     344:	20004160 	.word	0x20004160
     348:	00004ffc 	.word	0x00004ffc
     34c:	0000471d 	.word	0x0000471d
     350:	00004939 	.word	0x00004939
     354:	00000191 	.word	0x00000191

00000358 <debugInit>:
{
     358:	b570      	push	{r4, r5, r6, lr}
     35a:	b092      	sub	sp, #72	; 0x48
	MSG_iterator = 0;
     35c:	2500      	movs	r5, #0
     35e:	2400      	movs	r4, #0
     360:	4b30      	ldr	r3, [pc, #192]	; (424 <debugInit+0xcc>)
     362:	801d      	strh	r5, [r3, #0]
	SEND_iterator = 0;
     364:	4b30      	ldr	r3, [pc, #192]	; (428 <debugInit+0xd0>)
     366:	801d      	strh	r5, [r3, #0]
	strcpy(new_msg,ESC CLR_SEQ ESC CURSOR_RESET_SEQ);
     368:	4e30      	ldr	r6, [pc, #192]	; (42c <debugInit+0xd4>)
     36a:	220b      	movs	r2, #11
     36c:	4930      	ldr	r1, [pc, #192]	; (430 <debugInit+0xd8>)
     36e:	0030      	movs	r0, r6
     370:	4b30      	ldr	r3, [pc, #192]	; (434 <debugInit+0xdc>)
     372:	4798      	blx	r3
	addMSG(new_msg);
     374:	0030      	movs	r0, r6
     376:	4b30      	ldr	r3, [pc, #192]	; (438 <debugInit+0xe0>)
     378:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     37a:	ab02      	add	r3, sp, #8
     37c:	2280      	movs	r2, #128	; 0x80
     37e:	05d2      	lsls	r2, r2, #23
     380:	9202      	str	r2, [sp, #8]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     382:	605d      	str	r5, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     384:	22ff      	movs	r2, #255	; 0xff
     386:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     388:	729c      	strb	r4, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     38a:	72dc      	strb	r4, [r3, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     38c:	3afe      	subs	r2, #254	; 0xfe
     38e:	2124      	movs	r1, #36	; 0x24
     390:	545a      	strb	r2, [r3, r1]
	config->transmitter_enable = true;
     392:	3101      	adds	r1, #1
     394:	545a      	strb	r2, [r3, r1]
	config->clock_polarity_inverted = false;
     396:	3225      	adds	r2, #37	; 0x25
     398:	549c      	strb	r4, [r3, r2]
	config->use_external_clock = false;
     39a:	3201      	adds	r2, #1
     39c:	549c      	strb	r4, [r3, r2]
	config->ext_clock_freq   = 0;
     39e:	629d      	str	r5, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     3a0:	3205      	adds	r2, #5
     3a2:	549c      	strb	r4, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     3a4:	3201      	adds	r2, #1
     3a6:	549c      	strb	r4, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     3a8:	615d      	str	r5, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     3aa:	821d      	strh	r5, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     3ac:	76dc      	strb	r4, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     3ae:	761c      	strb	r4, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     3b0:	771c      	strb	r4, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     3b2:	765c      	strb	r4, [r3, #25]
	config->receive_pulse_length                    = 19;
     3b4:	3a1a      	subs	r2, #26
     3b6:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     3b8:	775c      	strb	r4, [r3, #29]
	config_usart.baudrate    = 115200;
     3ba:	22e1      	movs	r2, #225	; 0xe1
     3bc:	0252      	lsls	r2, r2, #9
     3be:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	0352      	lsls	r2, r2, #13
     3c4:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
     3c6:	4a1d      	ldr	r2, [pc, #116]	; (43c <debugInit+0xe4>)
     3c8:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = PINMUX_PB09D_SERCOM4_PAD1;
     3ca:	4a1d      	ldr	r2, [pc, #116]	; (440 <debugInit+0xe8>)
     3cc:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
     3ce:	2201      	movs	r2, #1
     3d0:	4252      	negs	r2, r2
     3d2:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
     3d4:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance, SERCOM4, &config_usart) != STATUS_OK){};
     3d6:	4d1b      	ldr	r5, [pc, #108]	; (444 <debugInit+0xec>)
     3d8:	4c1b      	ldr	r4, [pc, #108]	; (448 <debugInit+0xf0>)
     3da:	aa02      	add	r2, sp, #8
     3dc:	491b      	ldr	r1, [pc, #108]	; (44c <debugInit+0xf4>)
     3de:	0028      	movs	r0, r5
     3e0:	47a0      	blx	r4
     3e2:	2800      	cmp	r0, #0
     3e4:	d1f9      	bne.n	3da <debugInit+0x82>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     3e6:	4d17      	ldr	r5, [pc, #92]	; (444 <debugInit+0xec>)
     3e8:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     3ea:	0020      	movs	r0, r4
     3ec:	4b18      	ldr	r3, [pc, #96]	; (450 <debugInit+0xf8>)
     3ee:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     3f0:	231f      	movs	r3, #31
     3f2:	4018      	ands	r0, r3
     3f4:	3b1e      	subs	r3, #30
     3f6:	4083      	lsls	r3, r0
     3f8:	4a16      	ldr	r2, [pc, #88]	; (454 <debugInit+0xfc>)
     3fa:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     3fc:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     3fe:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     400:	2b00      	cmp	r3, #0
     402:	d1fc      	bne.n	3fe <debugInit+0xa6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     404:	6823      	ldr	r3, [r4, #0]
     406:	2202      	movs	r2, #2
     408:	4313      	orrs	r3, r2
     40a:	6023      	str	r3, [r4, #0]
	xTaskCreate(debugTask,
     40c:	4b12      	ldr	r3, [pc, #72]	; (458 <debugInit+0x100>)
     40e:	9301      	str	r3, [sp, #4]
     410:	9200      	str	r2, [sp, #0]
     412:	2300      	movs	r3, #0
     414:	22fd      	movs	r2, #253	; 0xfd
     416:	00d2      	lsls	r2, r2, #3
     418:	4910      	ldr	r1, [pc, #64]	; (45c <debugInit+0x104>)
     41a:	4811      	ldr	r0, [pc, #68]	; (460 <debugInit+0x108>)
     41c:	4c11      	ldr	r4, [pc, #68]	; (464 <debugInit+0x10c>)
     41e:	47a0      	blx	r4
}
     420:	b012      	add	sp, #72	; 0x48
     422:	bd70      	pop	{r4, r5, r6, pc}
     424:	200041e0 	.word	0x200041e0
     428:	200041e2 	.word	0x200041e2
     42c:	20004160 	.word	0x20004160
     430:	00004fc8 	.word	0x00004fc8
     434:	0000471d 	.word	0x0000471d
     438:	00000191 	.word	0x00000191
     43c:	00280003 	.word	0x00280003
     440:	00290003 	.word	0x00290003
     444:	2000412c 	.word	0x2000412c
     448:	000023d9 	.word	0x000023d9
     44c:	42001800 	.word	0x42001800
     450:	00001e5d 	.word	0x00001e5d
     454:	e000e100 	.word	0xe000e100
     458:	200000d8 	.word	0x200000d8
     45c:	00004fd4 	.word	0x00004fd4
     460:	00000115 	.word	0x00000115
     464:	00003a2d 	.word	0x00003a2d

00000468 <close>:
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
     468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     46a:	0007      	movs	r7, r0
	CHECK_SOCKNUM();
     46c:	2808      	cmp	r0, #8
     46e:	d830      	bhi.n	4d2 <close+0x6a>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
     470:	0144      	lsls	r4, r0, #5
     472:	3408      	adds	r4, #8
     474:	1c65      	adds	r5, r4, #1
     476:	35ff      	adds	r5, #255	; 0xff
     478:	2110      	movs	r1, #16
     47a:	0028      	movs	r0, r5
     47c:	4b16      	ldr	r3, [pc, #88]	; (4d8 <close+0x70>)
     47e:	4798      	blx	r3
   /* wait to process the command... */
	while( getSn_CR(sn) );
     480:	4e16      	ldr	r6, [pc, #88]	; (4dc <close+0x74>)
     482:	0028      	movs	r0, r5
     484:	47b0      	blx	r6
     486:	2800      	cmp	r0, #0
     488:	d1fb      	bne.n	482 <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
     48a:	2380      	movs	r3, #128	; 0x80
     48c:	009b      	lsls	r3, r3, #2
     48e:	18e0      	adds	r0, r4, r3
     490:	211f      	movs	r1, #31
     492:	4b11      	ldr	r3, [pc, #68]	; (4d8 <close+0x70>)
     494:	4798      	blx	r3
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
     496:	2301      	movs	r3, #1
     498:	40bb      	lsls	r3, r7
     49a:	43db      	mvns	r3, r3
     49c:	b21b      	sxth	r3, r3
     49e:	4910      	ldr	r1, [pc, #64]	; (4e0 <close+0x78>)
     4a0:	880a      	ldrh	r2, [r1, #0]
     4a2:	401a      	ands	r2, r3
     4a4:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
     4a6:	490f      	ldr	r1, [pc, #60]	; (4e4 <close+0x7c>)
     4a8:	880a      	ldrh	r2, [r1, #0]
     4aa:	4013      	ands	r3, r2
     4ac:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
     4ae:	007a      	lsls	r2, r7, #1
     4b0:	2100      	movs	r1, #0
     4b2:	4b0d      	ldr	r3, [pc, #52]	; (4e8 <close+0x80>)
     4b4:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
     4b6:	4b0d      	ldr	r3, [pc, #52]	; (4ec <close+0x84>)
     4b8:	2200      	movs	r2, #0
     4ba:	55da      	strb	r2, [r3, r7]
	while(getSn_SR(sn) != SOCK_CLOSED);
     4bc:	23c0      	movs	r3, #192	; 0xc0
     4be:	009b      	lsls	r3, r3, #2
     4c0:	469c      	mov	ip, r3
     4c2:	4464      	add	r4, ip
     4c4:	4d05      	ldr	r5, [pc, #20]	; (4dc <close+0x74>)
     4c6:	0020      	movs	r0, r4
     4c8:	47a8      	blx	r5
     4ca:	2800      	cmp	r0, #0
     4cc:	d1fb      	bne.n	4c6 <close+0x5e>
	return SOCK_OK;
     4ce:	3001      	adds	r0, #1
}
     4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
     4d2:	2001      	movs	r0, #1
     4d4:	4240      	negs	r0, r0
     4d6:	e7fb      	b.n	4d0 <close+0x68>
     4d8:	00000a85 	.word	0x00000a85
     4dc:	00000a21 	.word	0x00000a21
     4e0:	200000dc 	.word	0x200000dc
     4e4:	200000de 	.word	0x200000de
     4e8:	200000e8 	.word	0x200000e8
     4ec:	200000e0 	.word	0x200000e0

000004f0 <socket>:
{
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f2:	46c6      	mov	lr, r8
     4f4:	b500      	push	{lr}
     4f6:	b084      	sub	sp, #16
     4f8:	0005      	movs	r5, r0
     4fa:	000f      	movs	r7, r1
     4fc:	0016      	movs	r6, r2
     4fe:	4698      	mov	r8, r3
	CHECK_SOCKNUM();
     500:	2808      	cmp	r0, #8
     502:	d900      	bls.n	506 <socket+0x16>
     504:	e099      	b.n	63a <socket+0x14a>
	switch(protocol)
     506:	2901      	cmp	r1, #1
     508:	d063      	beq.n	5d2 <socket+0xe2>
     50a:	2900      	cmp	r1, #0
     50c:	d100      	bne.n	510 <socket+0x20>
     50e:	e097      	b.n	640 <socket+0x150>
     510:	2904      	cmp	r1, #4
     512:	d900      	bls.n	516 <socket+0x26>
     514:	e094      	b.n	640 <socket+0x150>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
     516:	4643      	mov	r3, r8
     518:	075b      	lsls	r3, r3, #29
     51a:	d500      	bpl.n	51e <socket+0x2e>
     51c:	e093      	b.n	646 <socket+0x156>
	if(flag != 0)
     51e:	4643      	mov	r3, r8
     520:	2b00      	cmp	r3, #0
     522:	d003      	beq.n	52c <socket+0x3c>
   	switch(protocol)
     524:	2f01      	cmp	r7, #1
     526:	d060      	beq.n	5ea <socket+0xfa>
     528:	2f02      	cmp	r7, #2
     52a:	d065      	beq.n	5f8 <socket+0x108>
	close(sn);
     52c:	0028      	movs	r0, r5
     52e:	4b47      	ldr	r3, [pc, #284]	; (64c <socket+0x15c>)
     530:	4798      	blx	r3
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
     532:	016c      	lsls	r4, r5, #5
     534:	3408      	adds	r4, #8
     536:	230f      	movs	r3, #15
     538:	4641      	mov	r1, r8
     53a:	4399      	bics	r1, r3
     53c:	4339      	orrs	r1, r7
     53e:	0020      	movs	r0, r4
     540:	4b43      	ldr	r3, [pc, #268]	; (650 <socket+0x160>)
     542:	4798      	blx	r3
	if(!port)
     544:	2e00      	cmp	r6, #0
     546:	d109      	bne.n	55c <socket+0x6c>
	   port = sock_any_port++;
     548:	4b42      	ldr	r3, [pc, #264]	; (654 <socket+0x164>)
     54a:	881e      	ldrh	r6, [r3, #0]
     54c:	1c73      	adds	r3, r6, #1
     54e:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
     550:	4a41      	ldr	r2, [pc, #260]	; (658 <socket+0x168>)
     552:	4293      	cmp	r3, r2
     554:	d100      	bne.n	558 <socket+0x68>
     556:	e06c      	b.n	632 <socket+0x142>
	   port = sock_any_port++;
     558:	4a3e      	ldr	r2, [pc, #248]	; (654 <socket+0x164>)
     55a:	8013      	strh	r3, [r2, #0]
   setSn_PORT(sn,port);	
     55c:	0a31      	lsrs	r1, r6, #8
     55e:	2380      	movs	r3, #128	; 0x80
     560:	00db      	lsls	r3, r3, #3
     562:	18e0      	adds	r0, r4, r3
     564:	4f3a      	ldr	r7, [pc, #232]	; (650 <socket+0x160>)
     566:	47b8      	blx	r7
     568:	b2f1      	uxtb	r1, r6
     56a:	23a0      	movs	r3, #160	; 0xa0
     56c:	00db      	lsls	r3, r3, #3
     56e:	18e0      	adds	r0, r4, r3
     570:	47b8      	blx	r7
   setSn_CR(sn,Sn_CR_OPEN);
     572:	1c66      	adds	r6, r4, #1
     574:	36ff      	adds	r6, #255	; 0xff
     576:	2101      	movs	r1, #1
     578:	0030      	movs	r0, r6
     57a:	47b8      	blx	r7
   while(getSn_CR(sn));
     57c:	4f37      	ldr	r7, [pc, #220]	; (65c <socket+0x16c>)
     57e:	0030      	movs	r0, r6
     580:	47b8      	blx	r7
     582:	2800      	cmp	r0, #0
     584:	d1fb      	bne.n	57e <socket+0x8e>
   sock_io_mode &= ~(1 <<sn);
     586:	2201      	movs	r2, #1
     588:	40aa      	lsls	r2, r5
     58a:	43d2      	mvns	r2, r2
     58c:	b212      	sxth	r2, r2
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
     58e:	4834      	ldr	r0, [pc, #208]	; (660 <socket+0x170>)
   sock_io_mode &= ~(1 <<sn);
     590:	8803      	ldrh	r3, [r0, #0]
     592:	4013      	ands	r3, r2
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
     594:	2101      	movs	r1, #1
     596:	4646      	mov	r6, r8
     598:	4031      	ands	r1, r6
     59a:	40a9      	lsls	r1, r5
     59c:	430b      	orrs	r3, r1
     59e:	8003      	strh	r3, [r0, #0]
   sock_is_sending &= ~(1<<sn);
     5a0:	4930      	ldr	r1, [pc, #192]	; (664 <socket+0x174>)
     5a2:	880b      	ldrh	r3, [r1, #0]
     5a4:	401a      	ands	r2, r3
     5a6:	800a      	strh	r2, [r1, #0]
   sock_remained_size[sn] = 0;
     5a8:	006b      	lsls	r3, r5, #1
     5aa:	2100      	movs	r1, #0
     5ac:	4a2e      	ldr	r2, [pc, #184]	; (668 <socket+0x178>)
     5ae:	5299      	strh	r1, [r3, r2]
   sock_pack_info[sn] = PACK_COMPLETED;
     5b0:	4b2e      	ldr	r3, [pc, #184]	; (66c <socket+0x17c>)
     5b2:	2200      	movs	r2, #0
     5b4:	555a      	strb	r2, [r3, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
     5b6:	23c0      	movs	r3, #192	; 0xc0
     5b8:	009b      	lsls	r3, r3, #2
     5ba:	469c      	mov	ip, r3
     5bc:	4464      	add	r4, ip
     5be:	4e27      	ldr	r6, [pc, #156]	; (65c <socket+0x16c>)
     5c0:	0020      	movs	r0, r4
     5c2:	47b0      	blx	r6
     5c4:	2800      	cmp	r0, #0
     5c6:	d0fb      	beq.n	5c0 <socket+0xd0>
   return (int8_t)sn;
     5c8:	b268      	sxtb	r0, r5
}	   
     5ca:	b004      	add	sp, #16
     5cc:	bc04      	pop	{r2}
     5ce:	4690      	mov	r8, r2
     5d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            getSIPR((uint8_t*)&taddr);
     5d2:	2204      	movs	r2, #4
     5d4:	a903      	add	r1, sp, #12
     5d6:	20f0      	movs	r0, #240	; 0xf0
     5d8:	0100      	lsls	r0, r0, #4
     5da:	4b25      	ldr	r3, [pc, #148]	; (670 <socket+0x180>)
     5dc:	4798      	blx	r3
            if(taddr == 0) return SOCKERR_SOCKINIT;
     5de:	9b03      	ldr	r3, [sp, #12]
     5e0:	2003      	movs	r0, #3
     5e2:	4240      	negs	r0, r0
     5e4:	2b00      	cmp	r3, #0
     5e6:	d196      	bne.n	516 <socket+0x26>
     5e8:	e7ef      	b.n	5ca <socket+0xda>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
     5ea:	2321      	movs	r3, #33	; 0x21
     5ec:	4642      	mov	r2, r8
     5ee:	4213      	tst	r3, r2
     5f0:	d19c      	bne.n	52c <socket+0x3c>
     5f2:	2006      	movs	r0, #6
     5f4:	4240      	negs	r0, r0
     5f6:	e7e8      	b.n	5ca <socket+0xda>
   	      if(flag & SF_IGMP_VER2)
     5f8:	4643      	mov	r3, r8
     5fa:	069b      	lsls	r3, r3, #26
     5fc:	d50a      	bpl.n	614 <socket+0x124>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
     5fe:	4643      	mov	r3, r8
     600:	466a      	mov	r2, sp
     602:	71d3      	strb	r3, [r2, #7]
     604:	79d3      	ldrb	r3, [r2, #7]
     606:	b25b      	sxtb	r3, r3
     608:	2b00      	cmp	r3, #0
     60a:	da00      	bge.n	60e <socket+0x11e>
     60c:	e78e      	b.n	52c <socket+0x3c>
     60e:	2006      	movs	r0, #6
     610:	4240      	negs	r0, r0
     612:	e7da      	b.n	5ca <socket+0xda>
      	      if(flag & SF_UNI_BLOCK)
     614:	4643      	mov	r3, r8
     616:	06db      	lsls	r3, r3, #27
     618:	d400      	bmi.n	61c <socket+0x12c>
     61a:	e787      	b.n	52c <socket+0x3c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
     61c:	4643      	mov	r3, r8
     61e:	466a      	mov	r2, sp
     620:	71d3      	strb	r3, [r2, #7]
     622:	79d3      	ldrb	r3, [r2, #7]
     624:	b25b      	sxtb	r3, r3
     626:	2b00      	cmp	r3, #0
     628:	da00      	bge.n	62c <socket+0x13c>
     62a:	e77f      	b.n	52c <socket+0x3c>
     62c:	2006      	movs	r0, #6
     62e:	4240      	negs	r0, r0
     630:	e7cb      	b.n	5ca <socket+0xda>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
     632:	4a10      	ldr	r2, [pc, #64]	; (674 <socket+0x184>)
     634:	4b07      	ldr	r3, [pc, #28]	; (654 <socket+0x164>)
     636:	801a      	strh	r2, [r3, #0]
     638:	e790      	b.n	55c <socket+0x6c>
	CHECK_SOCKNUM();
     63a:	2001      	movs	r0, #1
     63c:	4240      	negs	r0, r0
     63e:	e7c4      	b.n	5ca <socket+0xda>
         return SOCKERR_SOCKMODE;
     640:	2005      	movs	r0, #5
     642:	4240      	negs	r0, r0
     644:	e7c1      	b.n	5ca <socket+0xda>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
     646:	2006      	movs	r0, #6
     648:	4240      	negs	r0, r0
     64a:	e7be      	b.n	5ca <socket+0xda>
     64c:	00000469 	.word	0x00000469
     650:	00000a85 	.word	0x00000a85
     654:	20000000 	.word	0x20000000
     658:	0000fff0 	.word	0x0000fff0
     65c:	00000a21 	.word	0x00000a21
     660:	200000dc 	.word	0x200000dc
     664:	200000de 	.word	0x200000de
     668:	200000e8 	.word	0x200000e8
     66c:	200000e0 	.word	0x200000e0
     670:	00000ae5 	.word	0x00000ae5
     674:	ffffc000 	.word	0xffffc000

00000678 <listen>:

int8_t listen(uint8_t sn)
{
     678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     67a:	0007      	movs	r7, r0
	CHECK_SOCKNUM();
     67c:	2808      	cmp	r0, #8
     67e:	d828      	bhi.n	6d2 <listen+0x5a>
   CHECK_SOCKMODE(Sn_MR_TCP);
     680:	0144      	lsls	r4, r0, #5
     682:	3408      	adds	r4, #8
     684:	0020      	movs	r0, r4
     686:	4b17      	ldr	r3, [pc, #92]	; (6e4 <listen+0x6c>)
     688:	4798      	blx	r3
     68a:	230f      	movs	r3, #15
     68c:	4018      	ands	r0, r3
     68e:	2801      	cmp	r0, #1
     690:	d122      	bne.n	6d8 <listen+0x60>
	CHECK_SOCKINIT();
     692:	23c0      	movs	r3, #192	; 0xc0
     694:	009b      	lsls	r3, r3, #2
     696:	18e6      	adds	r6, r4, r3
     698:	0030      	movs	r0, r6
     69a:	4b12      	ldr	r3, [pc, #72]	; (6e4 <listen+0x6c>)
     69c:	4798      	blx	r3
     69e:	2813      	cmp	r0, #19
     6a0:	d11d      	bne.n	6de <listen+0x66>
	setSn_CR(sn,Sn_CR_LISTEN);
     6a2:	3401      	adds	r4, #1
     6a4:	34ff      	adds	r4, #255	; 0xff
     6a6:	2102      	movs	r1, #2
     6a8:	0020      	movs	r0, r4
     6aa:	4b0f      	ldr	r3, [pc, #60]	; (6e8 <listen+0x70>)
     6ac:	4798      	blx	r3
	while(getSn_CR(sn));
     6ae:	4d0d      	ldr	r5, [pc, #52]	; (6e4 <listen+0x6c>)
     6b0:	0020      	movs	r0, r4
     6b2:	47a8      	blx	r5
     6b4:	2800      	cmp	r0, #0
     6b6:	d1fb      	bne.n	6b0 <listen+0x38>
   while(getSn_SR(sn) != SOCK_LISTEN)
     6b8:	0030      	movs	r0, r6
     6ba:	4b0a      	ldr	r3, [pc, #40]	; (6e4 <listen+0x6c>)
     6bc:	4798      	blx	r3
     6be:	2814      	cmp	r0, #20
     6c0:	d101      	bne.n	6c6 <listen+0x4e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
     6c2:	3813      	subs	r0, #19
}
     6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         close(sn);
     6c6:	0038      	movs	r0, r7
     6c8:	4b08      	ldr	r3, [pc, #32]	; (6ec <listen+0x74>)
     6ca:	4798      	blx	r3
         return SOCKERR_SOCKCLOSED;
     6cc:	2004      	movs	r0, #4
     6ce:	4240      	negs	r0, r0
     6d0:	e7f8      	b.n	6c4 <listen+0x4c>
	CHECK_SOCKNUM();
     6d2:	2001      	movs	r0, #1
     6d4:	4240      	negs	r0, r0
     6d6:	e7f5      	b.n	6c4 <listen+0x4c>
   CHECK_SOCKMODE(Sn_MR_TCP);
     6d8:	2005      	movs	r0, #5
     6da:	4240      	negs	r0, r0
     6dc:	e7f2      	b.n	6c4 <listen+0x4c>
	CHECK_SOCKINIT();
     6de:	2003      	movs	r0, #3
     6e0:	4240      	negs	r0, r0
     6e2:	e7ef      	b.n	6c4 <listen+0x4c>
     6e4:	00000a21 	.word	0x00000a21
     6e8:	00000a85 	.word	0x00000a85
     6ec:	00000469 	.word	0x00000469

000006f0 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
     6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     6f2:	b083      	sub	sp, #12
     6f4:	0006      	movs	r6, r0
   CHECK_SOCKNUM();
     6f6:	2808      	cmp	r0, #8
     6f8:	d83b      	bhi.n	772 <disconnect+0x82>
   CHECK_SOCKMODE(Sn_MR_TCP);
     6fa:	0144      	lsls	r4, r0, #5
     6fc:	3408      	adds	r4, #8
     6fe:	0020      	movs	r0, r4
     700:	4b1f      	ldr	r3, [pc, #124]	; (780 <disconnect+0x90>)
     702:	4798      	blx	r3
     704:	230f      	movs	r3, #15
     706:	4018      	ands	r0, r3
     708:	2801      	cmp	r0, #1
     70a:	d135      	bne.n	778 <disconnect+0x88>
	setSn_CR(sn,Sn_CR_DISCON);
     70c:	1c65      	adds	r5, r4, #1
     70e:	35ff      	adds	r5, #255	; 0xff
     710:	2108      	movs	r1, #8
     712:	0028      	movs	r0, r5
     714:	4b1b      	ldr	r3, [pc, #108]	; (784 <disconnect+0x94>)
     716:	4798      	blx	r3
	/* wait to process the command... */
	while(getSn_CR(sn));
     718:	4f19      	ldr	r7, [pc, #100]	; (780 <disconnect+0x90>)
     71a:	0028      	movs	r0, r5
     71c:	47b8      	blx	r7
     71e:	2800      	cmp	r0, #0
     720:	d1fb      	bne.n	71a <disconnect+0x2a>
	sock_is_sending &= ~(1<<sn);
     722:	4919      	ldr	r1, [pc, #100]	; (788 <disconnect+0x98>)
     724:	2201      	movs	r2, #1
     726:	0010      	movs	r0, r2
     728:	40b0      	lsls	r0, r6
     72a:	880b      	ldrh	r3, [r1, #0]
     72c:	4383      	bics	r3, r0
     72e:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
     730:	4b16      	ldr	r3, [pc, #88]	; (78c <disconnect+0x9c>)
     732:	881b      	ldrh	r3, [r3, #0]
     734:	4133      	asrs	r3, r6
     736:	2000      	movs	r0, #0
     738:	421a      	tst	r2, r3
     73a:	d118      	bne.n	76e <disconnect+0x7e>
	while(getSn_SR(sn) != SOCK_CLOSED)
     73c:	23c0      	movs	r3, #192	; 0xc0
     73e:	009b      	lsls	r3, r3, #2
     740:	469c      	mov	ip, r3
     742:	44a4      	add	ip, r4
     744:	4663      	mov	r3, ip
     746:	9301      	str	r3, [sp, #4]
     748:	4f0d      	ldr	r7, [pc, #52]	; (780 <disconnect+0x90>)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     74a:	003d      	movs	r5, r7
	while(getSn_SR(sn) != SOCK_CLOSED)
     74c:	9801      	ldr	r0, [sp, #4]
     74e:	47b8      	blx	r7
     750:	2800      	cmp	r0, #0
     752:	d00b      	beq.n	76c <disconnect+0x7c>
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
     754:	2380      	movs	r3, #128	; 0x80
     756:	009b      	lsls	r3, r3, #2
     758:	18e0      	adds	r0, r4, r3
     75a:	47a8      	blx	r5
     75c:	0703      	lsls	r3, r0, #28
     75e:	d5f5      	bpl.n	74c <disconnect+0x5c>
	   {
	      close(sn);
     760:	0030      	movs	r0, r6
     762:	4b0b      	ldr	r3, [pc, #44]	; (790 <disconnect+0xa0>)
     764:	4798      	blx	r3
	      return SOCKERR_TIMEOUT;
     766:	200d      	movs	r0, #13
     768:	4240      	negs	r0, r0
     76a:	e000      	b.n	76e <disconnect+0x7e>
	   }
	}
	return SOCK_OK;
     76c:	3001      	adds	r0, #1
}
     76e:	b003      	add	sp, #12
     770:	bdf0      	pop	{r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
     772:	2001      	movs	r0, #1
     774:	4240      	negs	r0, r0
     776:	e7fa      	b.n	76e <disconnect+0x7e>
   CHECK_SOCKMODE(Sn_MR_TCP);
     778:	2005      	movs	r0, #5
     77a:	4240      	negs	r0, r0
     77c:	e7f7      	b.n	76e <disconnect+0x7e>
     77e:	46c0      	nop			; (mov r8, r8)
     780:	00000a21 	.word	0x00000a21
     784:	00000a85 	.word	0x00000a85
     788:	200000de 	.word	0x200000de
     78c:	200000dc 	.word	0x200000dc
     790:	00000469 	.word	0x00000469

00000794 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
     794:	b5f0      	push	{r4, r5, r6, r7, lr}
     796:	46de      	mov	lr, fp
     798:	4657      	mov	r7, sl
     79a:	464e      	mov	r6, r9
     79c:	4645      	mov	r5, r8
     79e:	b5e0      	push	{r5, r6, r7, lr}
     7a0:	b083      	sub	sp, #12
     7a2:	0005      	movs	r5, r0
     7a4:	9101      	str	r1, [sp, #4]
     7a6:	0014      	movs	r4, r2
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
     7a8:	2808      	cmp	r0, #8
     7aa:	d900      	bls.n	7ae <send+0x1a>
     7ac:	e085      	b.n	8ba <send+0x126>
   CHECK_SOCKMODE(Sn_MR_TCP);
     7ae:	0143      	lsls	r3, r0, #5
     7b0:	2208      	movs	r2, #8
     7b2:	4690      	mov	r8, r2
     7b4:	4498      	add	r8, r3
     7b6:	4640      	mov	r0, r8
     7b8:	4b47      	ldr	r3, [pc, #284]	; (8d8 <send+0x144>)
     7ba:	4798      	blx	r3
     7bc:	230f      	movs	r3, #15
     7be:	4018      	ands	r0, r3
     7c0:	2801      	cmp	r0, #1
     7c2:	d000      	beq.n	7c6 <send+0x32>
     7c4:	e07c      	b.n	8c0 <send+0x12c>
   CHECK_SOCKDATA();
     7c6:	2c00      	cmp	r4, #0
     7c8:	d100      	bne.n	7cc <send+0x38>
     7ca:	e07c      	b.n	8c6 <send+0x132>
   tmp = getSn_SR(sn);
     7cc:	23c0      	movs	r3, #192	; 0xc0
     7ce:	009b      	lsls	r3, r3, #2
     7d0:	4443      	add	r3, r8
     7d2:	9300      	str	r3, [sp, #0]
     7d4:	0018      	movs	r0, r3
     7d6:	4b40      	ldr	r3, [pc, #256]	; (8d8 <send+0x144>)
     7d8:	4798      	blx	r3
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     7da:	2817      	cmp	r0, #23
     7dc:	d002      	beq.n	7e4 <send+0x50>
     7de:	281c      	cmp	r0, #28
     7e0:	d000      	beq.n	7e4 <send+0x50>
     7e2:	e073      	b.n	8cc <send+0x138>
   if( sock_is_sending & (1<<sn) )
     7e4:	4b3d      	ldr	r3, [pc, #244]	; (8dc <send+0x148>)
     7e6:	881b      	ldrh	r3, [r3, #0]
     7e8:	412b      	asrs	r3, r5
     7ea:	07db      	lsls	r3, r3, #31
     7ec:	d51c      	bpl.n	828 <send+0x94>
   {
      tmp = getSn_IR(sn);
     7ee:	2680      	movs	r6, #128	; 0x80
     7f0:	00b6      	lsls	r6, r6, #2
     7f2:	4446      	add	r6, r8
     7f4:	0030      	movs	r0, r6
     7f6:	4b38      	ldr	r3, [pc, #224]	; (8d8 <send+0x144>)
     7f8:	4798      	blx	r3
     7fa:	0003      	movs	r3, r0
      if(tmp & Sn_IR_SENDOK)
     7fc:	06c2      	lsls	r2, r0, #27
     7fe:	d409      	bmi.n	814 <send+0x80>
      else if(tmp & Sn_IR_TIMEOUT)
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
     800:	2000      	movs	r0, #0
      else if(tmp & Sn_IR_TIMEOUT)
     802:	071b      	lsls	r3, r3, #28
     804:	d425      	bmi.n	852 <send+0xbe>
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
     806:	b003      	add	sp, #12
     808:	bc3c      	pop	{r2, r3, r4, r5}
     80a:	4690      	mov	r8, r2
     80c:	4699      	mov	r9, r3
     80e:	46a2      	mov	sl, r4
     810:	46ab      	mov	fp, r5
     812:	bdf0      	pop	{r4, r5, r6, r7, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
     814:	2110      	movs	r1, #16
     816:	0030      	movs	r0, r6
     818:	4b31      	ldr	r3, [pc, #196]	; (8e0 <send+0x14c>)
     81a:	4798      	blx	r3
         sock_is_sending &= ~(1<<sn);         
     81c:	492f      	ldr	r1, [pc, #188]	; (8dc <send+0x148>)
     81e:	2201      	movs	r2, #1
     820:	40aa      	lsls	r2, r5
     822:	880b      	ldrh	r3, [r1, #0]
     824:	4393      	bics	r3, r2
     826:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
     828:	20f8      	movs	r0, #248	; 0xf8
     82a:	0140      	lsls	r0, r0, #5
     82c:	4440      	add	r0, r8
     82e:	4b2a      	ldr	r3, [pc, #168]	; (8d8 <send+0x144>)
     830:	4798      	blx	r3
     832:	0280      	lsls	r0, r0, #10
     834:	1c06      	adds	r6, r0, #0
     836:	b280      	uxth	r0, r0
     838:	42a0      	cmp	r0, r4
     83a:	d900      	bls.n	83e <send+0xaa>
     83c:	1c26      	adds	r6, r4, #0
     83e:	b2b6      	uxth	r6, r6
     840:	2701      	movs	r7, #1
     842:	40af      	lsls	r7, r5
      freesize = getSn_TX_FSR(sn);
     844:	4b27      	ldr	r3, [pc, #156]	; (8e4 <send+0x150>)
     846:	469a      	mov	sl, r3
      tmp = getSn_SR(sn);
     848:	4b23      	ldr	r3, [pc, #140]	; (8d8 <send+0x144>)
     84a:	4699      	mov	r9, r3
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     84c:	4b26      	ldr	r3, [pc, #152]	; (8e8 <send+0x154>)
     84e:	469b      	mov	fp, r3
     850:	e00d      	b.n	86e <send+0xda>
         close(sn);
     852:	0028      	movs	r0, r5
     854:	4b25      	ldr	r3, [pc, #148]	; (8ec <send+0x158>)
     856:	4798      	blx	r3
         return SOCKERR_TIMEOUT;
     858:	200d      	movs	r0, #13
     85a:	4240      	negs	r0, r0
     85c:	e7d3      	b.n	806 <send+0x72>
         close(sn);
     85e:	0028      	movs	r0, r5
     860:	4b22      	ldr	r3, [pc, #136]	; (8ec <send+0x158>)
     862:	4798      	blx	r3
         return SOCKERR_SOCKSTATUS;
     864:	2007      	movs	r0, #7
     866:	4240      	negs	r0, r0
     868:	e7cd      	b.n	806 <send+0x72>
      if(len <= freesize) break;
     86a:	42a6      	cmp	r6, r4
     86c:	d90e      	bls.n	88c <send+0xf8>
      freesize = getSn_TX_FSR(sn);
     86e:	0028      	movs	r0, r5
     870:	47d0      	blx	sl
     872:	0004      	movs	r4, r0
      tmp = getSn_SR(sn);
     874:	9800      	ldr	r0, [sp, #0]
     876:	47c8      	blx	r9
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
     878:	2817      	cmp	r0, #23
     87a:	d001      	beq.n	880 <send+0xec>
     87c:	281c      	cmp	r0, #28
     87e:	d1ee      	bne.n	85e <send+0xca>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     880:	465b      	mov	r3, fp
     882:	881b      	ldrh	r3, [r3, #0]
     884:	421f      	tst	r7, r3
     886:	d0f0      	beq.n	86a <send+0xd6>
     888:	42a6      	cmp	r6, r4
     88a:	d822      	bhi.n	8d2 <send+0x13e>
   wiz_send_data(sn, buf, len);
     88c:	0032      	movs	r2, r6
     88e:	9901      	ldr	r1, [sp, #4]
     890:	0028      	movs	r0, r5
     892:	4b17      	ldr	r3, [pc, #92]	; (8f0 <send+0x15c>)
     894:	4798      	blx	r3
   setSn_CR(sn,Sn_CR_SEND);
     896:	4644      	mov	r4, r8
     898:	3401      	adds	r4, #1
     89a:	34ff      	adds	r4, #255	; 0xff
     89c:	2120      	movs	r1, #32
     89e:	0020      	movs	r0, r4
     8a0:	4b0f      	ldr	r3, [pc, #60]	; (8e0 <send+0x14c>)
     8a2:	4798      	blx	r3
   while(getSn_CR(sn));
     8a4:	4d0c      	ldr	r5, [pc, #48]	; (8d8 <send+0x144>)
     8a6:	0020      	movs	r0, r4
     8a8:	47a8      	blx	r5
     8aa:	2800      	cmp	r0, #0
     8ac:	d1fb      	bne.n	8a6 <send+0x112>
   sock_is_sending |= (1 << sn);
     8ae:	4a0b      	ldr	r2, [pc, #44]	; (8dc <send+0x148>)
     8b0:	8813      	ldrh	r3, [r2, #0]
     8b2:	431f      	orrs	r7, r3
     8b4:	8017      	strh	r7, [r2, #0]
   return (int32_t)len;
     8b6:	0030      	movs	r0, r6
     8b8:	e7a5      	b.n	806 <send+0x72>
   CHECK_SOCKNUM();
     8ba:	2001      	movs	r0, #1
     8bc:	4240      	negs	r0, r0
     8be:	e7a2      	b.n	806 <send+0x72>
   CHECK_SOCKMODE(Sn_MR_TCP);
     8c0:	2005      	movs	r0, #5
     8c2:	4240      	negs	r0, r0
     8c4:	e79f      	b.n	806 <send+0x72>
   CHECK_SOCKDATA();
     8c6:	200e      	movs	r0, #14
     8c8:	4240      	negs	r0, r0
     8ca:	e79c      	b.n	806 <send+0x72>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
     8cc:	2007      	movs	r0, #7
     8ce:	4240      	negs	r0, r0
     8d0:	e799      	b.n	806 <send+0x72>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
     8d2:	2000      	movs	r0, #0
     8d4:	e797      	b.n	806 <send+0x72>
     8d6:	46c0      	nop			; (mov r8, r8)
     8d8:	00000a21 	.word	0x00000a21
     8dc:	200000de 	.word	0x200000de
     8e0:	00000a85 	.word	0x00000a85
     8e4:	00000be9 	.word	0x00000be9
     8e8:	200000dc 	.word	0x200000dc
     8ec:	00000469 	.word	0x00000469
     8f0:	00000ca1 	.word	0x00000ca1

000008f4 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
     8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8f6:	46de      	mov	lr, fp
     8f8:	4657      	mov	r7, sl
     8fa:	464e      	mov	r6, r9
     8fc:	b5c0      	push	{r6, r7, lr}
     8fe:	b084      	sub	sp, #16
     900:	9001      	str	r0, [sp, #4]
     902:	9102      	str	r1, [sp, #8]
     904:	4693      	mov	fp, r2
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
     906:	0004      	movs	r4, r0
     908:	2808      	cmp	r0, #8
     90a:	d900      	bls.n	90e <recv+0x1a>
     90c:	e070      	b.n	9f0 <recv+0xfc>
   CHECK_SOCKMODE(Sn_MR_TCP);
     90e:	0145      	lsls	r5, r0, #5
     910:	3508      	adds	r5, #8
     912:	0028      	movs	r0, r5
     914:	4b3b      	ldr	r3, [pc, #236]	; (a04 <recv+0x110>)
     916:	4798      	blx	r3
     918:	230f      	movs	r3, #15
     91a:	4018      	ands	r0, r3
     91c:	2801      	cmp	r0, #1
     91e:	d16a      	bne.n	9f6 <recv+0x102>
   CHECK_SOCKDATA();
     920:	465b      	mov	r3, fp
     922:	2b00      	cmp	r3, #0
     924:	d06a      	beq.n	9fc <recv+0x108>
   
   recvsize = getSn_RxMAX(sn);
     926:	23f0      	movs	r3, #240	; 0xf0
     928:	015b      	lsls	r3, r3, #5
     92a:	18e8      	adds	r0, r5, r3
     92c:	4b35      	ldr	r3, [pc, #212]	; (a04 <recv+0x110>)
     92e:	4798      	blx	r3
     930:	9003      	str	r0, [sp, #12]
     932:	2701      	movs	r7, #1
     934:	40a7      	lsls	r7, r4
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
     936:	4b34      	ldr	r3, [pc, #208]	; (a08 <recv+0x114>)
     938:	4699      	mov	r9, r3
         tmp = getSn_SR(sn);
     93a:	4e32      	ldr	r6, [pc, #200]	; (a04 <recv+0x110>)
         if (tmp != SOCK_ESTABLISHED)
         {
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     93c:	4b33      	ldr	r3, [pc, #204]	; (a0c <recv+0x118>)
     93e:	469a      	mov	sl, r3
         recvsize = getSn_RX_RSR(sn);
     940:	9801      	ldr	r0, [sp, #4]
     942:	47c8      	blx	r9
     944:	0004      	movs	r4, r0
         tmp = getSn_SR(sn);
     946:	23c0      	movs	r3, #192	; 0xc0
     948:	009b      	lsls	r3, r3, #2
     94a:	18e8      	adds	r0, r5, r3
     94c:	47b0      	blx	r6
         if (tmp != SOCK_ESTABLISHED)
     94e:	2817      	cmp	r0, #23
     950:	d020      	beq.n	994 <recv+0xa0>
            if(tmp == SOCK_CLOSE_WAIT)
     952:	281c      	cmp	r0, #28
     954:	d118      	bne.n	988 <recv+0x94>
               if(recvsize != 0) break;
     956:	2c00      	cmp	r4, #0
     958:	d123      	bne.n	9a2 <recv+0xae>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
     95a:	9801      	ldr	r0, [sp, #4]
     95c:	47d0      	blx	sl
     95e:	0004      	movs	r4, r0
     960:	23f8      	movs	r3, #248	; 0xf8
     962:	015b      	lsls	r3, r3, #5
     964:	18e8      	adds	r0, r5, r3
     966:	4b27      	ldr	r3, [pc, #156]	; (a04 <recv+0x110>)
     968:	4798      	blx	r3
     96a:	0280      	lsls	r0, r0, #10
     96c:	4284      	cmp	r4, r0
     96e:	d005      	beq.n	97c <recv+0x88>
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     970:	4b27      	ldr	r3, [pc, #156]	; (a10 <recv+0x11c>)
     972:	881b      	ldrh	r3, [r3, #0]
     974:	421f      	tst	r7, r3
     976:	d0e3      	beq.n	940 <recv+0x4c>
     978:	2000      	movs	r0, #0
     97a:	e030      	b.n	9de <recv+0xea>
                  close(sn);
     97c:	9801      	ldr	r0, [sp, #4]
     97e:	4b25      	ldr	r3, [pc, #148]	; (a14 <recv+0x120>)
     980:	4798      	blx	r3
                  return SOCKERR_SOCKSTATUS;
     982:	2007      	movs	r0, #7
     984:	4240      	negs	r0, r0
     986:	e02a      	b.n	9de <recv+0xea>
               close(sn);
     988:	9801      	ldr	r0, [sp, #4]
     98a:	4b22      	ldr	r3, [pc, #136]	; (a14 <recv+0x120>)
     98c:	4798      	blx	r3
               return SOCKERR_SOCKSTATUS;
     98e:	2007      	movs	r0, #7
     990:	4240      	negs	r0, r0
     992:	e024      	b.n	9de <recv+0xea>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
     994:	4b1e      	ldr	r3, [pc, #120]	; (a10 <recv+0x11c>)
     996:	881b      	ldrh	r3, [r3, #0]
     998:	421f      	tst	r7, r3
     99a:	d026      	beq.n	9ea <recv+0xf6>
     99c:	2000      	movs	r0, #0
     99e:	2c00      	cmp	r4, #0
     9a0:	d01d      	beq.n	9de <recv+0xea>
   recvsize = getSn_RxMAX(sn);
     9a2:	9b03      	ldr	r3, [sp, #12]
     9a4:	029b      	lsls	r3, r3, #10
     9a6:	1c1a      	adds	r2, r3, #0
     9a8:	b29b      	uxth	r3, r3
     9aa:	455b      	cmp	r3, fp
     9ac:	d900      	bls.n	9b0 <recv+0xbc>
     9ae:	465a      	mov	r2, fp
     9b0:	1c10      	adds	r0, r2, #0
     9b2:	b292      	uxth	r2, r2
     9b4:	42a2      	cmp	r2, r4
     9b6:	d900      	bls.n	9ba <recv+0xc6>
     9b8:	1c20      	adds	r0, r4, #0
     9ba:	b284      	uxth	r4, r0
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
   wiz_recv_data(sn, buf, len);
     9bc:	0022      	movs	r2, r4
     9be:	9902      	ldr	r1, [sp, #8]
     9c0:	9801      	ldr	r0, [sp, #4]
     9c2:	4b15      	ldr	r3, [pc, #84]	; (a18 <recv+0x124>)
     9c4:	4798      	blx	r3
   setSn_CR(sn,Sn_CR_RECV);
     9c6:	3501      	adds	r5, #1
     9c8:	35ff      	adds	r5, #255	; 0xff
     9ca:	2140      	movs	r1, #64	; 0x40
     9cc:	0028      	movs	r0, r5
     9ce:	4b13      	ldr	r3, [pc, #76]	; (a1c <recv+0x128>)
     9d0:	4798      	blx	r3
   while(getSn_CR(sn));
     9d2:	4e0c      	ldr	r6, [pc, #48]	; (a04 <recv+0x110>)
     9d4:	0028      	movs	r0, r5
     9d6:	47b0      	blx	r6
     9d8:	2800      	cmp	r0, #0
     9da:	d1fb      	bne.n	9d4 <recv+0xe0>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
     9dc:	0020      	movs	r0, r4
}
     9de:	b004      	add	sp, #16
     9e0:	bc1c      	pop	{r2, r3, r4}
     9e2:	4691      	mov	r9, r2
     9e4:	469a      	mov	sl, r3
     9e6:	46a3      	mov	fp, r4
     9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
         if(recvsize != 0) break;
     9ea:	2c00      	cmp	r4, #0
     9ec:	d0a8      	beq.n	940 <recv+0x4c>
     9ee:	e7d8      	b.n	9a2 <recv+0xae>
   CHECK_SOCKNUM();
     9f0:	2001      	movs	r0, #1
     9f2:	4240      	negs	r0, r0
     9f4:	e7f3      	b.n	9de <recv+0xea>
   CHECK_SOCKMODE(Sn_MR_TCP);
     9f6:	2005      	movs	r0, #5
     9f8:	4240      	negs	r0, r0
     9fa:	e7f0      	b.n	9de <recv+0xea>
   CHECK_SOCKDATA();
     9fc:	200e      	movs	r0, #14
     9fe:	4240      	negs	r0, r0
     a00:	e7ed      	b.n	9de <recv+0xea>
     a02:	46c0      	nop			; (mov r8, r8)
     a04:	00000a21 	.word	0x00000a21
     a08:	00000c45 	.word	0x00000c45
     a0c:	00000be9 	.word	0x00000be9
     a10:	200000dc 	.word	0x200000dc
     a14:	00000469 	.word	0x00000469
     a18:	00000d15 	.word	0x00000d15
     a1c:	00000a85 	.word	0x00000a85

00000a20 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
     a20:	b530      	push	{r4, r5, lr}
     a22:	b083      	sub	sp, #12
     a24:	0004      	movs	r4, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
     a26:	4d16      	ldr	r5, [pc, #88]	; (a80 <WIZCHIP_READ+0x60>)
     a28:	68eb      	ldr	r3, [r5, #12]
     a2a:	4798      	blx	r3
   WIZCHIP.CS._select();
     a2c:	696b      	ldr	r3, [r5, #20]
     a2e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
     a30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     a32:	2b00      	cmp	r3, #0
     a34:	d016      	beq.n	a64 <WIZCHIP_READ+0x44>
     a36:	4b12      	ldr	r3, [pc, #72]	; (a80 <WIZCHIP_READ+0x60>)
     a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     a3a:	2b00      	cmp	r3, #0
     a3c:	d012      	beq.n	a64 <WIZCHIP_READ+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     a3e:	a801      	add	r0, sp, #4
     a40:	0c22      	lsrs	r2, r4, #16
     a42:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     a44:	0a22      	lsrs	r2, r4, #8
     a46:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     a48:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     a4a:	2103      	movs	r1, #3
     a4c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
     a4e:	4c0c      	ldr	r4, [pc, #48]	; (a80 <WIZCHIP_READ+0x60>)
     a50:	69e3      	ldr	r3, [r4, #28]
     a52:	4798      	blx	r3
     a54:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
     a56:	69a3      	ldr	r3, [r4, #24]
     a58:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
     a5a:	6923      	ldr	r3, [r4, #16]
     a5c:	4798      	blx	r3
   return ret;
}
     a5e:	0028      	movs	r0, r5
     a60:	b003      	add	sp, #12
     a62:	bd30      	pop	{r4, r5, pc}
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     a64:	0c20      	lsrs	r0, r4, #16
     a66:	b2c0      	uxtb	r0, r0
     a68:	4d05      	ldr	r5, [pc, #20]	; (a80 <WIZCHIP_READ+0x60>)
     a6a:	6a2b      	ldr	r3, [r5, #32]
     a6c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     a6e:	0a20      	lsrs	r0, r4, #8
     a70:	b2c0      	uxtb	r0, r0
     a72:	6a2b      	ldr	r3, [r5, #32]
     a74:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     a76:	b2e0      	uxtb	r0, r4
     a78:	6a2b      	ldr	r3, [r5, #32]
     a7a:	4798      	blx	r3
     a7c:	e7e7      	b.n	a4e <WIZCHIP_READ+0x2e>
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	20000004 	.word	0x20000004

00000a84 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
     a84:	b570      	push	{r4, r5, r6, lr}
     a86:	b082      	sub	sp, #8
     a88:	0004      	movs	r4, r0
     a8a:	000e      	movs	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
     a8c:	4d14      	ldr	r5, [pc, #80]	; (ae0 <WIZCHIP_WRITE+0x5c>)
     a8e:	68eb      	ldr	r3, [r5, #12]
     a90:	4798      	blx	r3
   WIZCHIP.CS._select();
     a92:	696b      	ldr	r3, [r5, #20]
     a94:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
     a96:	2004      	movs	r0, #4
     a98:	4304      	orrs	r4, r0

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
     a9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
     a9c:	2b00      	cmp	r3, #0
     a9e:	d00f      	beq.n	ac0 <WIZCHIP_WRITE+0x3c>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     aa0:	a801      	add	r0, sp, #4
     aa2:	0c22      	lsrs	r2, r4, #16
     aa4:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     aa6:	0a22      	lsrs	r2, r4, #8
     aa8:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     aaa:	7084      	strb	r4, [r0, #2]
		spi_data[3] = wb;
     aac:	70c6      	strb	r6, [r0, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
     aae:	2104      	movs	r1, #4
     ab0:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
     ab2:	4c0b      	ldr	r4, [pc, #44]	; (ae0 <WIZCHIP_WRITE+0x5c>)
     ab4:	69a3      	ldr	r3, [r4, #24]
     ab6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
     ab8:	6923      	ldr	r3, [r4, #16]
     aba:	4798      	blx	r3
}
     abc:	b002      	add	sp, #8
     abe:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     ac0:	0c20      	lsrs	r0, r4, #16
     ac2:	b2c0      	uxtb	r0, r0
     ac4:	4d06      	ldr	r5, [pc, #24]	; (ae0 <WIZCHIP_WRITE+0x5c>)
     ac6:	6a2b      	ldr	r3, [r5, #32]
     ac8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     aca:	0a20      	lsrs	r0, r4, #8
     acc:	b2c0      	uxtb	r0, r0
     ace:	6a2b      	ldr	r3, [r5, #32]
     ad0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     ad2:	b2e0      	uxtb	r0, r4
     ad4:	6a2b      	ldr	r3, [r5, #32]
     ad6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
     ad8:	6a2b      	ldr	r3, [r5, #32]
     ada:	0030      	movs	r0, r6
     adc:	4798      	blx	r3
     ade:	e7e8      	b.n	ab2 <WIZCHIP_WRITE+0x2e>
     ae0:	20000004 	.word	0x20000004

00000ae4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ae6:	b083      	sub	sp, #12
     ae8:	0004      	movs	r4, r0
     aea:	000f      	movs	r7, r1
     aec:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
     aee:	4d1d      	ldr	r5, [pc, #116]	; (b64 <WIZCHIP_READ_BUF+0x80>)
     af0:	68eb      	ldr	r3, [r5, #12]
     af2:	4798      	blx	r3
   WIZCHIP.CS._select();
     af4:	696b      	ldr	r3, [r5, #20]
     af6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
     af8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     afa:	2b00      	cmp	r3, #0
     afc:	d017      	beq.n	b2e <WIZCHIP_READ_BUF+0x4a>
     afe:	4b19      	ldr	r3, [pc, #100]	; (b64 <WIZCHIP_READ_BUF+0x80>)
     b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b02:	2b00      	cmp	r3, #0
     b04:	d013      	beq.n	b2e <WIZCHIP_READ_BUF+0x4a>
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     b06:	a801      	add	r0, sp, #4
     b08:	0c22      	lsrs	r2, r4, #16
     b0a:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     b0c:	0a22      	lsrs	r2, r4, #8
     b0e:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     b10:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     b12:	2103      	movs	r1, #3
     b14:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
     b16:	4b13      	ldr	r3, [pc, #76]	; (b64 <WIZCHIP_READ_BUF+0x80>)
     b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     b1a:	0031      	movs	r1, r6
     b1c:	0038      	movs	r0, r7
     b1e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
     b20:	4c10      	ldr	r4, [pc, #64]	; (b64 <WIZCHIP_READ_BUF+0x80>)
     b22:	69a3      	ldr	r3, [r4, #24]
     b24:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
     b26:	6923      	ldr	r3, [r4, #16]
     b28:	4798      	blx	r3
}
     b2a:	b003      	add	sp, #12
     b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     b2e:	0c20      	lsrs	r0, r4, #16
     b30:	b2c0      	uxtb	r0, r0
     b32:	4d0c      	ldr	r5, [pc, #48]	; (b64 <WIZCHIP_READ_BUF+0x80>)
     b34:	6a2b      	ldr	r3, [r5, #32]
     b36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     b38:	0a20      	lsrs	r0, r4, #8
     b3a:	b2c0      	uxtb	r0, r0
     b3c:	6a2b      	ldr	r3, [r5, #32]
     b3e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     b40:	b2e0      	uxtb	r0, r4
     b42:	6a2b      	ldr	r3, [r5, #32]
     b44:	4798      	blx	r3
		for(i = 0; i < len; i++)
     b46:	2e00      	cmp	r6, #0
     b48:	d0ea      	beq.n	b20 <WIZCHIP_READ_BUF+0x3c>
     b4a:	003c      	movs	r4, r7
     b4c:	3e01      	subs	r6, #1
     b4e:	b2b5      	uxth	r5, r6
     b50:	3501      	adds	r5, #1
     b52:	197d      	adds	r5, r7, r5
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
     b54:	4e03      	ldr	r6, [pc, #12]	; (b64 <WIZCHIP_READ_BUF+0x80>)
     b56:	69f3      	ldr	r3, [r6, #28]
     b58:	4798      	blx	r3
     b5a:	7020      	strb	r0, [r4, #0]
     b5c:	3401      	adds	r4, #1
		for(i = 0; i < len; i++)
     b5e:	42ac      	cmp	r4, r5
     b60:	d1f9      	bne.n	b56 <WIZCHIP_READ_BUF+0x72>
     b62:	e7dd      	b.n	b20 <WIZCHIP_READ_BUF+0x3c>
     b64:	20000004 	.word	0x20000004

00000b68 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
     b68:	b5f0      	push	{r4, r5, r6, r7, lr}
     b6a:	b083      	sub	sp, #12
     b6c:	0004      	movs	r4, r0
     b6e:	000e      	movs	r6, r1
     b70:	0015      	movs	r5, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
     b72:	4f1c      	ldr	r7, [pc, #112]	; (be4 <WIZCHIP_WRITE_BUF+0x7c>)
     b74:	68fb      	ldr	r3, [r7, #12]
     b76:	4798      	blx	r3
   WIZCHIP.CS._select();
     b78:	697b      	ldr	r3, [r7, #20]
     b7a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
     b7c:	2004      	movs	r0, #4
     b7e:	4304      	orrs	r4, r0

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
     b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
     b82:	2b00      	cmp	r3, #0
     b84:	d013      	beq.n	bae <WIZCHIP_WRITE_BUF+0x46>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
     b86:	a801      	add	r0, sp, #4
     b88:	0c22      	lsrs	r2, r4, #16
     b8a:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
     b8c:	0a22      	lsrs	r2, r4, #8
     b8e:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
     b90:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
     b92:	2103      	movs	r1, #3
     b94:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
     b96:	4b13      	ldr	r3, [pc, #76]	; (be4 <WIZCHIP_WRITE_BUF+0x7c>)
     b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     b9a:	0029      	movs	r1, r5
     b9c:	0030      	movs	r0, r6
     b9e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
     ba0:	4c10      	ldr	r4, [pc, #64]	; (be4 <WIZCHIP_WRITE_BUF+0x7c>)
     ba2:	69a3      	ldr	r3, [r4, #24]
     ba4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
     ba6:	6923      	ldr	r3, [r4, #16]
     ba8:	4798      	blx	r3
}
     baa:	b003      	add	sp, #12
     bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
     bae:	0c20      	lsrs	r0, r4, #16
     bb0:	b2c0      	uxtb	r0, r0
     bb2:	4f0c      	ldr	r7, [pc, #48]	; (be4 <WIZCHIP_WRITE_BUF+0x7c>)
     bb4:	6a3b      	ldr	r3, [r7, #32]
     bb6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
     bb8:	0a20      	lsrs	r0, r4, #8
     bba:	b2c0      	uxtb	r0, r0
     bbc:	6a3b      	ldr	r3, [r7, #32]
     bbe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
     bc0:	b2e0      	uxtb	r0, r4
     bc2:	6a3b      	ldr	r3, [r7, #32]
     bc4:	4798      	blx	r3
		for(i = 0; i < len; i++)
     bc6:	2d00      	cmp	r5, #0
     bc8:	d0ea      	beq.n	ba0 <WIZCHIP_WRITE_BUF+0x38>
     bca:	0034      	movs	r4, r6
     bcc:	3d01      	subs	r5, #1
     bce:	b2ad      	uxth	r5, r5
     bd0:	3501      	adds	r5, #1
     bd2:	1976      	adds	r6, r6, r5
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
     bd4:	4d03      	ldr	r5, [pc, #12]	; (be4 <WIZCHIP_WRITE_BUF+0x7c>)
     bd6:	7820      	ldrb	r0, [r4, #0]
     bd8:	6a2b      	ldr	r3, [r5, #32]
     bda:	4798      	blx	r3
     bdc:	3401      	adds	r4, #1
		for(i = 0; i < len; i++)
     bde:	42b4      	cmp	r4, r6
     be0:	d1f9      	bne.n	bd6 <WIZCHIP_WRITE_BUF+0x6e>
     be2:	e7dd      	b.n	ba0 <WIZCHIP_WRITE_BUF+0x38>
     be4:	20000004 	.word	0x20000004

00000be8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
     be8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bea:	b083      	sub	sp, #12
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
     bec:	0140      	lsls	r0, r0, #5
     bee:	3008      	adds	r0, #8
     bf0:	2380      	movs	r3, #128	; 0x80
     bf2:	019b      	lsls	r3, r3, #6
     bf4:	469c      	mov	ip, r3
     bf6:	4484      	add	ip, r0
     bf8:	4663      	mov	r3, ip
     bfa:	9300      	str	r3, [sp, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
     bfc:	0003      	movs	r3, r0
     bfe:	2284      	movs	r2, #132	; 0x84
     c00:	0192      	lsls	r2, r2, #6
     c02:	4694      	mov	ip, r2
     c04:	4463      	add	r3, ip
     c06:	9301      	str	r3, [sp, #4]
   uint16_t val=0,val1=0;
     c08:	2700      	movs	r7, #0
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
     c0a:	4d0d      	ldr	r5, [pc, #52]	; (c40 <getSn_TX_FSR+0x58>)
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
     c0c:	002e      	movs	r6, r5
     c0e:	e001      	b.n	c14 <getSn_TX_FSR+0x2c>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
     c10:	42a7      	cmp	r7, r4
     c12:	d012      	beq.n	c3a <getSn_TX_FSR+0x52>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
     c14:	9800      	ldr	r0, [sp, #0]
     c16:	47a8      	blx	r5
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
     c18:	0200      	lsls	r0, r0, #8
     c1a:	b284      	uxth	r4, r0
     c1c:	9801      	ldr	r0, [sp, #4]
     c1e:	47a8      	blx	r5
     c20:	1824      	adds	r4, r4, r0
     c22:	b2a4      	uxth	r4, r4
      if (val1 != 0)
     c24:	2c00      	cmp	r4, #0
     c26:	d0f3      	beq.n	c10 <getSn_TX_FSR+0x28>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
     c28:	9800      	ldr	r0, [sp, #0]
     c2a:	47b0      	blx	r6
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
     c2c:	0200      	lsls	r0, r0, #8
     c2e:	b287      	uxth	r7, r0
     c30:	9801      	ldr	r0, [sp, #4]
     c32:	47b0      	blx	r6
     c34:	183f      	adds	r7, r7, r0
     c36:	b2bf      	uxth	r7, r7
     c38:	e7ea      	b.n	c10 <getSn_TX_FSR+0x28>
   return val;
}
     c3a:	0038      	movs	r0, r7
     c3c:	b003      	add	sp, #12
     c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c40:	00000a21 	.word	0x00000a21

00000c44 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
     c44:	b5f0      	push	{r4, r5, r6, r7, lr}
     c46:	b083      	sub	sp, #12
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
     c48:	0140      	lsls	r0, r0, #5
     c4a:	3008      	adds	r0, #8
     c4c:	2398      	movs	r3, #152	; 0x98
     c4e:	019b      	lsls	r3, r3, #6
     c50:	469c      	mov	ip, r3
     c52:	4484      	add	ip, r0
     c54:	4663      	mov	r3, ip
     c56:	9300      	str	r3, [sp, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
     c58:	0003      	movs	r3, r0
     c5a:	229c      	movs	r2, #156	; 0x9c
     c5c:	0192      	lsls	r2, r2, #6
     c5e:	4694      	mov	ip, r2
     c60:	4463      	add	r3, ip
     c62:	9301      	str	r3, [sp, #4]
   uint16_t val=0,val1=0;
     c64:	2700      	movs	r7, #0
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
     c66:	4d0d      	ldr	r5, [pc, #52]	; (c9c <getSn_RX_RSR+0x58>)
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
     c68:	002e      	movs	r6, r5
     c6a:	e001      	b.n	c70 <getSn_RX_RSR+0x2c>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
     c6c:	42a7      	cmp	r7, r4
     c6e:	d012      	beq.n	c96 <getSn_RX_RSR+0x52>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
     c70:	9800      	ldr	r0, [sp, #0]
     c72:	47a8      	blx	r5
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
     c74:	0200      	lsls	r0, r0, #8
     c76:	b284      	uxth	r4, r0
     c78:	9801      	ldr	r0, [sp, #4]
     c7a:	47a8      	blx	r5
     c7c:	1824      	adds	r4, r4, r0
     c7e:	b2a4      	uxth	r4, r4
      if (val1 != 0)
     c80:	2c00      	cmp	r4, #0
     c82:	d0f3      	beq.n	c6c <getSn_RX_RSR+0x28>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
     c84:	9800      	ldr	r0, [sp, #0]
     c86:	47b0      	blx	r6
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
     c88:	0200      	lsls	r0, r0, #8
     c8a:	b287      	uxth	r7, r0
     c8c:	9801      	ldr	r0, [sp, #4]
     c8e:	47b0      	blx	r6
     c90:	183f      	adds	r7, r7, r0
     c92:	b2bf      	uxth	r7, r7
     c94:	e7ea      	b.n	c6c <getSn_RX_RSR+0x28>
   return val;
}
     c96:	0038      	movs	r0, r7
     c98:	b003      	add	sp, #12
     c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c9c:	00000a21 	.word	0x00000a21

00000ca0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca2:	46c6      	mov	lr, r8
     ca4:	b500      	push	{lr}
     ca6:	b082      	sub	sp, #8
     ca8:	9100      	str	r1, [sp, #0]
     caa:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
     cac:	d103      	bne.n	cb6 <wiz_send_data+0x16>
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
   
   ptr += len;
   setSn_TX_WR(sn,ptr);
}
     cae:	b002      	add	sp, #8
     cb0:	bc04      	pop	{r2}
     cb2:	4690      	mov	r8, r2
     cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ptr = getSn_TX_WR(sn);
     cb6:	0086      	lsls	r6, r0, #2
     cb8:	1c75      	adds	r5, r6, #1
     cba:	00ed      	lsls	r5, r5, #3
     cbc:	2390      	movs	r3, #144	; 0x90
     cbe:	019b      	lsls	r3, r3, #6
     cc0:	469c      	mov	ip, r3
     cc2:	44ac      	add	ip, r5
     cc4:	4663      	mov	r3, ip
     cc6:	9301      	str	r3, [sp, #4]
     cc8:	4660      	mov	r0, ip
     cca:	4f0f      	ldr	r7, [pc, #60]	; (d08 <wiz_send_data+0x68>)
     ccc:	47b8      	blx	r7
     cce:	4680      	mov	r8, r0
     cd0:	2294      	movs	r2, #148	; 0x94
     cd2:	0192      	lsls	r2, r2, #6
     cd4:	4694      	mov	ip, r2
     cd6:	4465      	add	r5, ip
     cd8:	0028      	movs	r0, r5
     cda:	47b8      	blx	r7
     cdc:	4642      	mov	r2, r8
     cde:	0213      	lsls	r3, r2, #8
     ce0:	1818      	adds	r0, r3, r0
     ce2:	b287      	uxth	r7, r0
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
     ce4:	1cb0      	adds	r0, r6, #2
     ce6:	00c0      	lsls	r0, r0, #3
     ce8:	023b      	lsls	r3, r7, #8
     cea:	18c0      	adds	r0, r0, r3
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
     cec:	0022      	movs	r2, r4
     cee:	9900      	ldr	r1, [sp, #0]
     cf0:	4b06      	ldr	r3, [pc, #24]	; (d0c <wiz_send_data+0x6c>)
     cf2:	4798      	blx	r3
   ptr += len;
     cf4:	19e4      	adds	r4, r4, r7
     cf6:	b2a4      	uxth	r4, r4
   setSn_TX_WR(sn,ptr);
     cf8:	0a21      	lsrs	r1, r4, #8
     cfa:	9801      	ldr	r0, [sp, #4]
     cfc:	4e04      	ldr	r6, [pc, #16]	; (d10 <wiz_send_data+0x70>)
     cfe:	47b0      	blx	r6
     d00:	b2e1      	uxtb	r1, r4
     d02:	0028      	movs	r0, r5
     d04:	47b0      	blx	r6
     d06:	e7d2      	b.n	cae <wiz_send_data+0xe>
     d08:	00000a21 	.word	0x00000a21
     d0c:	00000b69 	.word	0x00000b69
     d10:	00000a85 	.word	0x00000a85

00000d14 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
     d14:	b5f0      	push	{r4, r5, r6, r7, lr}
     d16:	46c6      	mov	lr, r8
     d18:	b500      	push	{lr}
     d1a:	b082      	sub	sp, #8
     d1c:	9100      	str	r1, [sp, #0]
     d1e:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
     d20:	d103      	bne.n	d2a <wiz_recv_data+0x16>
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
   ptr += len;
   
   setSn_RX_RD(sn,ptr);
}
     d22:	b002      	add	sp, #8
     d24:	bc04      	pop	{r2}
     d26:	4690      	mov	r8, r2
     d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ptr = getSn_RX_RD(sn);
     d2a:	0086      	lsls	r6, r0, #2
     d2c:	1c75      	adds	r5, r6, #1
     d2e:	00ed      	lsls	r5, r5, #3
     d30:	23a0      	movs	r3, #160	; 0xa0
     d32:	019b      	lsls	r3, r3, #6
     d34:	469c      	mov	ip, r3
     d36:	44ac      	add	ip, r5
     d38:	4663      	mov	r3, ip
     d3a:	9301      	str	r3, [sp, #4]
     d3c:	4660      	mov	r0, ip
     d3e:	4f0f      	ldr	r7, [pc, #60]	; (d7c <wiz_recv_data+0x68>)
     d40:	47b8      	blx	r7
     d42:	4680      	mov	r8, r0
     d44:	22a4      	movs	r2, #164	; 0xa4
     d46:	0192      	lsls	r2, r2, #6
     d48:	4694      	mov	ip, r2
     d4a:	4465      	add	r5, ip
     d4c:	0028      	movs	r0, r5
     d4e:	47b8      	blx	r7
     d50:	4642      	mov	r2, r8
     d52:	0213      	lsls	r3, r2, #8
     d54:	1818      	adds	r0, r3, r0
     d56:	b287      	uxth	r7, r0
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
     d58:	1cf0      	adds	r0, r6, #3
     d5a:	00c0      	lsls	r0, r0, #3
     d5c:	023b      	lsls	r3, r7, #8
     d5e:	18c0      	adds	r0, r0, r3
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
     d60:	0022      	movs	r2, r4
     d62:	9900      	ldr	r1, [sp, #0]
     d64:	4b06      	ldr	r3, [pc, #24]	; (d80 <wiz_recv_data+0x6c>)
     d66:	4798      	blx	r3
   ptr += len;
     d68:	19e4      	adds	r4, r4, r7
     d6a:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
     d6c:	0a21      	lsrs	r1, r4, #8
     d6e:	9801      	ldr	r0, [sp, #4]
     d70:	4e04      	ldr	r6, [pc, #16]	; (d84 <wiz_recv_data+0x70>)
     d72:	47b0      	blx	r6
     d74:	b2e1      	uxtb	r1, r4
     d76:	0028      	movs	r0, r5
     d78:	47b0      	blx	r6
     d7a:	e7d2      	b.n	d22 <wiz_recv_data+0xe>
     d7c:	00000a21 	.word	0x00000a21
     d80:	00000ae5 	.word	0x00000ae5
     d84:	00000a85 	.word	0x00000a85

00000d88 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
     d88:	4770      	bx	lr

00000d8a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
     d8a:	4770      	bx	lr

00000d8c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
     d8c:	4770      	bx	lr

00000d8e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
     d8e:	4770      	bx	lr

00000d90 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
     d90:	7800      	ldrb	r0, [r0, #0]
     d92:	b2c0      	uxtb	r0, r0
     d94:	4770      	bx	lr

00000d96 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
     d96:	7001      	strb	r1, [r0, #0]
     d98:	4770      	bx	lr

00000d9a <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
     d9a:	2000      	movs	r0, #0
     d9c:	4770      	bx	lr

00000d9e <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
     d9e:	4770      	bx	lr

00000da0 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
     da0:	2800      	cmp	r0, #0
     da2:	d005      	beq.n	db0 <reg_wizchip_cs_cbfunc+0x10>
     da4:	2900      	cmp	r1, #0
     da6:	d003      	beq.n	db0 <reg_wizchip_cs_cbfunc+0x10>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
     da8:	4b04      	ldr	r3, [pc, #16]	; (dbc <reg_wizchip_cs_cbfunc+0x1c>)
     daa:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
     dac:	6199      	str	r1, [r3, #24]
   }
}
     dae:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
     db0:	4b02      	ldr	r3, [pc, #8]	; (dbc <reg_wizchip_cs_cbfunc+0x1c>)
     db2:	4a03      	ldr	r2, [pc, #12]	; (dc0 <reg_wizchip_cs_cbfunc+0x20>)
     db4:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
     db6:	4a03      	ldr	r2, [pc, #12]	; (dc4 <reg_wizchip_cs_cbfunc+0x24>)
     db8:	619a      	str	r2, [r3, #24]
     dba:	e7f8      	b.n	dae <reg_wizchip_cs_cbfunc+0xe>
     dbc:	20000004 	.word	0x20000004
     dc0:	00000d8d 	.word	0x00000d8d
     dc4:	00000d8f 	.word	0x00000d8f

00000dc8 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
     dc8:	4b0a      	ldr	r3, [pc, #40]	; (df4 <reg_wizchip_spi_cbfunc+0x2c>)
     dca:	881b      	ldrh	r3, [r3, #0]
     dcc:	2280      	movs	r2, #128	; 0x80
     dce:	0092      	lsls	r2, r2, #2
     dd0:	4013      	ands	r3, r2
     dd2:	2b00      	cmp	r3, #0
     dd4:	d0fd      	beq.n	dd2 <reg_wizchip_spi_cbfunc+0xa>
   
   if(!spi_rb || !spi_wb)
     dd6:	2800      	cmp	r0, #0
     dd8:	d005      	beq.n	de6 <reg_wizchip_spi_cbfunc+0x1e>
     dda:	2900      	cmp	r1, #0
     ddc:	d003      	beq.n	de6 <reg_wizchip_spi_cbfunc+0x1e>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
     dde:	4b05      	ldr	r3, [pc, #20]	; (df4 <reg_wizchip_spi_cbfunc+0x2c>)
     de0:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
     de2:	6219      	str	r1, [r3, #32]
   }
}
     de4:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
     de6:	4b03      	ldr	r3, [pc, #12]	; (df4 <reg_wizchip_spi_cbfunc+0x2c>)
     de8:	4a03      	ldr	r2, [pc, #12]	; (df8 <reg_wizchip_spi_cbfunc+0x30>)
     dea:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
     dec:	4a03      	ldr	r2, [pc, #12]	; (dfc <reg_wizchip_spi_cbfunc+0x34>)
     dee:	621a      	str	r2, [r3, #32]
     df0:	e7f8      	b.n	de4 <reg_wizchip_spi_cbfunc+0x1c>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	20000004 	.word	0x20000004
     df8:	00000d9b 	.word	0x00000d9b
     dfc:	00000d9f 	.word	0x00000d9f

00000e00 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
     e02:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
     e04:	2206      	movs	r2, #6
     e06:	a901      	add	r1, sp, #4
     e08:	2090      	movs	r0, #144	; 0x90
     e0a:	0100      	lsls	r0, r0, #4
     e0c:	4c17      	ldr	r4, [pc, #92]	; (e6c <wizchip_sw_reset+0x6c>)
     e0e:	47a0      	blx	r4
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
     e10:	2780      	movs	r7, #128	; 0x80
     e12:	007f      	lsls	r7, r7, #1
     e14:	2204      	movs	r2, #4
     e16:	a905      	add	r1, sp, #20
     e18:	0038      	movs	r0, r7
     e1a:	47a0      	blx	r4
     e1c:	26a0      	movs	r6, #160	; 0xa0
     e1e:	00f6      	lsls	r6, r6, #3
     e20:	2204      	movs	r2, #4
     e22:	a904      	add	r1, sp, #16
     e24:	0030      	movs	r0, r6
     e26:	47a0      	blx	r4
     e28:	25f0      	movs	r5, #240	; 0xf0
     e2a:	012d      	lsls	r5, r5, #4
     e2c:	2204      	movs	r2, #4
     e2e:	a903      	add	r1, sp, #12
     e30:	0028      	movs	r0, r5
     e32:	47a0      	blx	r4
   setMR(MR_RST);
     e34:	2180      	movs	r1, #128	; 0x80
     e36:	2000      	movs	r0, #0
     e38:	4b0d      	ldr	r3, [pc, #52]	; (e70 <wizchip_sw_reset+0x70>)
     e3a:	4798      	blx	r3
   getMR(); // for delay
     e3c:	2000      	movs	r0, #0
     e3e:	4b0d      	ldr	r3, [pc, #52]	; (e74 <wizchip_sw_reset+0x74>)
     e40:	4798      	blx	r3
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
     e42:	2206      	movs	r2, #6
     e44:	a901      	add	r1, sp, #4
     e46:	2090      	movs	r0, #144	; 0x90
     e48:	0100      	lsls	r0, r0, #4
     e4a:	4c0b      	ldr	r4, [pc, #44]	; (e78 <wizchip_sw_reset+0x78>)
     e4c:	47a0      	blx	r4
   setGAR(gw);
     e4e:	2204      	movs	r2, #4
     e50:	a905      	add	r1, sp, #20
     e52:	0038      	movs	r0, r7
     e54:	47a0      	blx	r4
   setSUBR(sn);
     e56:	2204      	movs	r2, #4
     e58:	a904      	add	r1, sp, #16
     e5a:	0030      	movs	r0, r6
     e5c:	47a0      	blx	r4
   setSIPR(sip);
     e5e:	2204      	movs	r2, #4
     e60:	a903      	add	r1, sp, #12
     e62:	0028      	movs	r0, r5
     e64:	47a0      	blx	r4
}
     e66:	b007      	add	sp, #28
     e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	00000ae5 	.word	0x00000ae5
     e70:	00000a85 	.word	0x00000a85
     e74:	00000a21 	.word	0x00000a21
     e78:	00000b69 	.word	0x00000b69

00000e7c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
     e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e7e:	46c6      	mov	lr, r8
     e80:	b500      	push	{lr}
     e82:	0005      	movs	r5, r0
     e84:	000e      	movs	r6, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
     e86:	4b25      	ldr	r3, [pc, #148]	; (f1c <wizchip_init+0xa0>)
     e88:	4798      	blx	r3
   if(txsize)
     e8a:	2d00      	cmp	r5, #0
     e8c:	d019      	beq.n	ec2 <wizchip_init+0x46>
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
     e8e:	2300      	movs	r3, #0
     e90:	56eb      	ldrsb	r3, [r5, r3]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
     e92:	2b10      	cmp	r3, #16
     e94:	dc34      	bgt.n	f00 <wizchip_init+0x84>
     e96:	1c6a      	adds	r2, r5, #1
     e98:	0028      	movs	r0, r5
     e9a:	3008      	adds	r0, #8
			tmp += txsize[i];
     e9c:	7811      	ldrb	r1, [r2, #0]
     e9e:	18cb      	adds	r3, r1, r3
     ea0:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
     ea2:	2b10      	cmp	r3, #16
     ea4:	dc2f      	bgt.n	f06 <wizchip_init+0x8a>
     ea6:	3201      	adds	r2, #1
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
     ea8:	4290      	cmp	r0, r2
     eaa:	d1f7      	bne.n	e9c <wizchip_init+0x20>
     eac:	4c1c      	ldr	r4, [pc, #112]	; (f20 <wizchip_init+0xa4>)
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
     eae:	4b1d      	ldr	r3, [pc, #116]	; (f24 <wizchip_init+0xa8>)
     eb0:	4698      	mov	r8, r3
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
     eb2:	4f1d      	ldr	r7, [pc, #116]	; (f28 <wizchip_init+0xac>)
			setSn_TXBUF_SIZE(i, txsize[i]);
     eb4:	7829      	ldrb	r1, [r5, #0]
     eb6:	0020      	movs	r0, r4
     eb8:	47c0      	blx	r8
     eba:	3501      	adds	r5, #1
     ebc:	3420      	adds	r4, #32
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
     ebe:	42bc      	cmp	r4, r7
     ec0:	d1f8      	bne.n	eb4 <wizchip_init+0x38>
		}

	#endif
   }

   if(rxsize)
     ec2:	2e00      	cmp	r6, #0
     ec4:	d022      	beq.n	f0c <wizchip_init+0x90>
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += rxsize[i];
     ec6:	2300      	movs	r3, #0
     ec8:	56f3      	ldrsb	r3, [r6, r3]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
     eca:	2b10      	cmp	r3, #16
     ecc:	dc20      	bgt.n	f10 <wizchip_init+0x94>
     ece:	1c72      	adds	r2, r6, #1
     ed0:	0030      	movs	r0, r6
     ed2:	3008      	adds	r0, #8
			tmp += rxsize[i];
     ed4:	7811      	ldrb	r1, [r2, #0]
     ed6:	18cb      	adds	r3, r1, r3
     ed8:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
     eda:	2b10      	cmp	r3, #16
     edc:	dc1b      	bgt.n	f16 <wizchip_init+0x9a>
     ede:	3201      	adds	r2, #1
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
     ee0:	4290      	cmp	r0, r2
     ee2:	d1f7      	bne.n	ed4 <wizchip_init+0x58>
     ee4:	4c11      	ldr	r4, [pc, #68]	; (f2c <wizchip_init+0xb0>)
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
     ee6:	4f0f      	ldr	r7, [pc, #60]	; (f24 <wizchip_init+0xa8>)
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
     ee8:	4d0d      	ldr	r5, [pc, #52]	; (f20 <wizchip_init+0xa4>)
			setSn_RXBUF_SIZE(i, rxsize[i]);
     eea:	7831      	ldrb	r1, [r6, #0]
     eec:	0020      	movs	r0, r4
     eee:	47b8      	blx	r7
     ef0:	3601      	adds	r6, #1
     ef2:	3420      	adds	r4, #32
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
     ef4:	42ac      	cmp	r4, r5
     ef6:	d1f8      	bne.n	eea <wizchip_init+0x6e>
		#endif
		}
	#endif
   }
   return 0;
     ef8:	2000      	movs	r0, #0
}
     efa:	bc04      	pop	{r2}
     efc:	4690      	mov	r8, r2
     efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(tmp > 16) return -1;
     f00:	2001      	movs	r0, #1
     f02:	4240      	negs	r0, r0
     f04:	e7f9      	b.n	efa <wizchip_init+0x7e>
     f06:	2001      	movs	r0, #1
     f08:	4240      	negs	r0, r0
     f0a:	e7f6      	b.n	efa <wizchip_init+0x7e>
   return 0;
     f0c:	2000      	movs	r0, #0
     f0e:	e7f4      	b.n	efa <wizchip_init+0x7e>
			if(tmp > 16) return -1;
     f10:	2001      	movs	r0, #1
     f12:	4240      	negs	r0, r0
     f14:	e7f1      	b.n	efa <wizchip_init+0x7e>
     f16:	2001      	movs	r0, #1
     f18:	4240      	negs	r0, r0
     f1a:	e7ee      	b.n	efa <wizchip_init+0x7e>
     f1c:	00000e01 	.word	0x00000e01
     f20:	00001f08 	.word	0x00001f08
     f24:	00000a85 	.word	0x00000a85
     f28:	00002008 	.word	0x00002008
     f2c:	00001e08 	.word	0x00001e08

00000f30 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
     f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint8_t ir  = (uint8_t)intr;
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
     f32:	0a06      	lsrs	r6, r0, #8
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
     f34:	21f0      	movs	r1, #240	; 0xf0
     f36:	4001      	ands	r1, r0
     f38:	20a8      	movs	r0, #168	; 0xa8
     f3a:	0140      	lsls	r0, r0, #5
     f3c:	4b0a      	ldr	r3, [pc, #40]	; (f68 <wizchip_clrinterrupt+0x38>)
     f3e:	4798      	blx	r3
     f40:	2582      	movs	r5, #130	; 0x82
     f42:	00ad      	lsls	r5, r5, #2
     f44:	2400      	movs	r4, #0
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
     f46:	2701      	movs	r7, #1
     f48:	e003      	b.n	f52 <wizchip_clrinterrupt+0x22>
     f4a:	3401      	adds	r4, #1
     f4c:	3520      	adds	r5, #32
   for(ir=0; ir<8; ir++){
     f4e:	2c08      	cmp	r4, #8
     f50:	d008      	beq.n	f64 <wizchip_clrinterrupt+0x34>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
     f52:	0033      	movs	r3, r6
     f54:	4123      	asrs	r3, r4
     f56:	421f      	tst	r7, r3
     f58:	d0f7      	beq.n	f4a <wizchip_clrinterrupt+0x1a>
     f5a:	211f      	movs	r1, #31
     f5c:	0028      	movs	r0, r5
     f5e:	4b02      	ldr	r3, [pc, #8]	; (f68 <wizchip_clrinterrupt+0x38>)
     f60:	4798      	blx	r3
     f62:	e7f2      	b.n	f4a <wizchip_clrinterrupt+0x1a>
   }

#endif   
}
     f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	00000a85 	.word	0x00000a85

00000f6c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
     f6c:	b570      	push	{r4, r5, r6, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
     f6e:	20a8      	movs	r0, #168	; 0xa8
     f70:	0140      	lsls	r0, r0, #5
     f72:	4d06      	ldr	r5, [pc, #24]	; (f8c <wizchip_getinterrupt+0x20>)
     f74:	47a8      	blx	r5
     f76:	0004      	movs	r4, r0
   sir = getSIR();
     f78:	20b8      	movs	r0, #184	; 0xb8
     f7a:	0140      	lsls	r0, r0, #5
     f7c:	47a8      	blx	r5
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
     f7e:	0200      	lsls	r0, r0, #8
     f80:	b280      	uxth	r0, r0
   ir  = getIR();
     f82:	23f0      	movs	r3, #240	; 0xf0
  ret = (ret << 8) + ir;
     f84:	401c      	ands	r4, r3
     f86:	1900      	adds	r0, r0, r4
  return (intr_kind)ret;
     f88:	b280      	uxth	r0, r0
}
     f8a:	bd70      	pop	{r4, r5, r6, pc}
     f8c:	00000a21 	.word	0x00000a21

00000f90 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
     f90:	b570      	push	{r4, r5, r6, lr}
     f92:	0004      	movs	r4, r0
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
     f94:	b2c1      	uxtb	r1, r0
     f96:	20b0      	movs	r0, #176	; 0xb0
     f98:	0140      	lsls	r0, r0, #5
     f9a:	4d03      	ldr	r5, [pc, #12]	; (fa8 <wizchip_setinterruptmask+0x18>)
     f9c:	47a8      	blx	r5
   setSIMR(simr);
     f9e:	0a21      	lsrs	r1, r4, #8
     fa0:	20c0      	movs	r0, #192	; 0xc0
     fa2:	0140      	lsls	r0, r0, #5
     fa4:	47a8      	blx	r5
#endif   
}
     fa6:	bd70      	pop	{r4, r5, r6, pc}
     fa8:	00000a85 	.word	0x00000a85

00000fac <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
     fac:	b570      	push	{r4, r5, r6, lr}
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
     fae:	20b0      	movs	r0, #176	; 0xb0
     fb0:	0140      	lsls	r0, r0, #5
     fb2:	4c05      	ldr	r4, [pc, #20]	; (fc8 <wizchip_getinterruptmask+0x1c>)
     fb4:	47a0      	blx	r4
     fb6:	0005      	movs	r5, r0
   simr = getSIMR();
     fb8:	20c0      	movs	r0, #192	; 0xc0
     fba:	0140      	lsls	r0, r0, #5
     fbc:	47a0      	blx	r4
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
     fbe:	0200      	lsls	r0, r0, #8
     fc0:	1940      	adds	r0, r0, r5
  return (intr_kind)ret;
     fc2:	b280      	uxth	r0, r0
}
     fc4:	bd70      	pop	{r4, r5, r6, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	00000a21 	.word	0x00000a21

00000fcc <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
     fcc:	b510      	push	{r4, lr}
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
     fce:	20b8      	movs	r0, #184	; 0xb8
     fd0:	0180      	lsls	r0, r0, #6
     fd2:	4b02      	ldr	r3, [pc, #8]	; (fdc <wizphy_getphylink+0x10>)
     fd4:	4798      	blx	r3
      tmp = PHY_LINK_ON;

#else
   tmp = -1;
#endif
   return tmp;
     fd6:	2301      	movs	r3, #1
     fd8:	4018      	ands	r0, r3
}
     fda:	bd10      	pop	{r4, pc}
     fdc:	00000a21 	.word	0x00000a21

00000fe0 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
     fe0:	b510      	push	{r4, lr}
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
     fe2:	20b8      	movs	r0, #184	; 0xb8
     fe4:	0180      	lsls	r0, r0, #6
     fe6:	4b05      	ldr	r3, [pc, #20]	; (ffc <wizphy_getphypmode+0x1c>)
     fe8:	4798      	blx	r3
     fea:	0003      	movs	r3, r0
     fec:	2038      	movs	r0, #56	; 0x38
     fee:	4018      	ands	r0, r3
     ff0:	3830      	subs	r0, #48	; 0x30
     ff2:	4243      	negs	r3, r0
     ff4:	4158      	adcs	r0, r3
      else 
         tmp = PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
     ff6:	b240      	sxtb	r0, r0
}
     ff8:	bd10      	pop	{r4, pc}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	00000a21 	.word	0x00000a21

00001000 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
    1000:	b570      	push	{r4, r5, r6, lr}
   uint8_t tmp = getPHYCFGR();
    1002:	24b8      	movs	r4, #184	; 0xb8
    1004:	01a4      	lsls	r4, r4, #6
    1006:	0020      	movs	r0, r4
    1008:	4e07      	ldr	r6, [pc, #28]	; (1028 <wizphy_reset+0x28>)
    100a:	47b0      	blx	r6
   tmp &= PHYCFGR_RST;
   setPHYCFGR(tmp);
    100c:	217f      	movs	r1, #127	; 0x7f
    100e:	4001      	ands	r1, r0
    1010:	0020      	movs	r0, r4
    1012:	4d06      	ldr	r5, [pc, #24]	; (102c <wizphy_reset+0x2c>)
    1014:	47a8      	blx	r5
   tmp = getPHYCFGR();
    1016:	0020      	movs	r0, r4
    1018:	47b0      	blx	r6
   tmp |= ~PHYCFGR_RST;
    101a:	2180      	movs	r1, #128	; 0x80
    101c:	4249      	negs	r1, r1
    101e:	4301      	orrs	r1, r0
   setPHYCFGR(tmp);
    1020:	b2c9      	uxtb	r1, r1
    1022:	0020      	movs	r0, r4
    1024:	47a8      	blx	r5
}
    1026:	bd70      	pop	{r4, r5, r6, pc}
    1028:	00000a21 	.word	0x00000a21
    102c:	00000a85 	.word	0x00000a85

00001030 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
    1030:	b510      	push	{r4, lr}
   uint8_t tmp = 0;
   if(phyconf->by == PHY_CONFBY_SW)
    1032:	7801      	ldrb	r1, [r0, #0]
      tmp |= PHYCFGR_OPMD;
   else
      tmp &= ~PHYCFGR_OPMD;
    1034:	3901      	subs	r1, #1
    1036:	424b      	negs	r3, r1
    1038:	4159      	adcs	r1, r3
    103a:	0189      	lsls	r1, r1, #6
   if(phyconf->mode == PHY_MODE_AUTONEGO)
    103c:	7843      	ldrb	r3, [r0, #1]
    103e:	2b01      	cmp	r3, #1
    1040:	d00c      	beq.n	105c <wizphy_setphyconf+0x2c>
      tmp |= PHYCFGR_OPMDC_ALLA;
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
    1042:	78c3      	ldrb	r3, [r0, #3]
    1044:	2b01      	cmp	r3, #1
    1046:	d00c      	beq.n	1062 <wizphy_setphyconf+0x32>
         else
            tmp |= PHYCFGR_OPMDC_10F;
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
    1048:	7883      	ldrb	r3, [r0, #2]
    104a:	2b01      	cmp	r3, #1
    104c:	d012      	beq.n	1074 <wizphy_setphyconf+0x44>
            tmp |= PHYCFGR_OPMDC_100H;
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
    104e:	20b8      	movs	r0, #184	; 0xb8
    1050:	0180      	lsls	r0, r0, #6
    1052:	4b0a      	ldr	r3, [pc, #40]	; (107c <wizphy_setphyconf+0x4c>)
    1054:	4798      	blx	r3
   wizphy_reset();
    1056:	4b0a      	ldr	r3, [pc, #40]	; (1080 <wizphy_setphyconf+0x50>)
    1058:	4798      	blx	r3
}
    105a:	bd10      	pop	{r4, pc}
      tmp |= PHYCFGR_OPMDC_ALLA;
    105c:	3337      	adds	r3, #55	; 0x37
    105e:	4319      	orrs	r1, r3
    1060:	e7f5      	b.n	104e <wizphy_setphyconf+0x1e>
         if(phyconf->speed == PHY_SPEED_100)
    1062:	7883      	ldrb	r3, [r0, #2]
    1064:	2b01      	cmp	r3, #1
    1066:	d002      	beq.n	106e <wizphy_setphyconf+0x3e>
            tmp |= PHYCFGR_OPMDC_10F;
    1068:	2308      	movs	r3, #8
    106a:	4319      	orrs	r1, r3
    106c:	e7ef      	b.n	104e <wizphy_setphyconf+0x1e>
            tmp |= PHYCFGR_OPMDC_100F;
    106e:	3317      	adds	r3, #23
    1070:	4319      	orrs	r1, r3
    1072:	e7ec      	b.n	104e <wizphy_setphyconf+0x1e>
            tmp |= PHYCFGR_OPMDC_100H;
    1074:	330f      	adds	r3, #15
    1076:	4319      	orrs	r1, r3
    1078:	e7e9      	b.n	104e <wizphy_setphyconf+0x1e>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	00000a85 	.word	0x00000a85
    1080:	00001001 	.word	0x00001001

00001084 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
    1084:	b510      	push	{r4, lr}
    1086:	0004      	movs	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    1088:	20b8      	movs	r0, #184	; 0xb8
    108a:	0180      	lsls	r0, r0, #6
    108c:	4b13      	ldr	r3, [pc, #76]	; (10dc <wizphy_getphyconf+0x58>)
    108e:	4798      	blx	r3
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
    1090:	0643      	lsls	r3, r0, #25
    1092:	0fdb      	lsrs	r3, r3, #31
    1094:	7023      	strb	r3, [r4, #0]
    1096:	2338      	movs	r3, #56	; 0x38
    1098:	4018      	ands	r0, r3
   switch(tmp & PHYCFGR_OPMDC_ALLA)
    109a:	2820      	cmp	r0, #32
    109c:	d004      	beq.n	10a8 <wizphy_getphyconf+0x24>
    109e:	2838      	cmp	r0, #56	; 0x38
    10a0:	d002      	beq.n	10a8 <wizphy_getphyconf+0x24>
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
         break;
      default:
         phyconf->mode = PHY_MODE_MANUAL;
    10a2:	2300      	movs	r3, #0
    10a4:	7063      	strb	r3, [r4, #1]
         break;
    10a6:	e001      	b.n	10ac <wizphy_getphyconf+0x28>
         phyconf->mode = PHY_MODE_AUTONEGO;
    10a8:	2301      	movs	r3, #1
    10aa:	7063      	strb	r3, [r4, #1]
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
    10ac:	2818      	cmp	r0, #24
    10ae:	d006      	beq.n	10be <wizphy_getphyconf+0x3a>
    10b0:	2820      	cmp	r0, #32
    10b2:	d004      	beq.n	10be <wizphy_getphyconf+0x3a>
    10b4:	2810      	cmp	r0, #16
    10b6:	d002      	beq.n	10be <wizphy_getphyconf+0x3a>
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
         break;
      default:
         phyconf->speed = PHY_SPEED_10;
    10b8:	2300      	movs	r3, #0
    10ba:	70a3      	strb	r3, [r4, #2]
         break;
    10bc:	e001      	b.n	10c2 <wizphy_getphyconf+0x3e>
         phyconf->speed = PHY_SPEED_100;
    10be:	2301      	movs	r3, #1
    10c0:	70a3      	strb	r3, [r4, #2]
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
    10c2:	2818      	cmp	r0, #24
    10c4:	d006      	beq.n	10d4 <wizphy_getphyconf+0x50>
    10c6:	2820      	cmp	r0, #32
    10c8:	d004      	beq.n	10d4 <wizphy_getphyconf+0x50>
    10ca:	2808      	cmp	r0, #8
    10cc:	d002      	beq.n	10d4 <wizphy_getphyconf+0x50>
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
         break;
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
    10ce:	2300      	movs	r3, #0
    10d0:	70e3      	strb	r3, [r4, #3]
         break;
   }
}
    10d2:	bd10      	pop	{r4, pc}
         phyconf->duplex = PHY_DUPLEX_FULL;
    10d4:	2301      	movs	r3, #1
    10d6:	70e3      	strb	r3, [r4, #3]
         break;
    10d8:	e7fb      	b.n	10d2 <wizphy_getphyconf+0x4e>
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00000a21 	.word	0x00000a21

000010e0 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
    10e0:	b510      	push	{r4, lr}
    10e2:	0004      	movs	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    10e4:	20b8      	movs	r0, #184	; 0xb8
    10e6:	0180      	lsls	r0, r0, #6
    10e8:	4b17      	ldr	r3, [pc, #92]	; (1148 <wizphy_setphypmode+0x68>)
    10ea:	4798      	blx	r3
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    10ec:	0643      	lsls	r3, r0, #25
    10ee:	d528      	bpl.n	1142 <wizphy_setphypmode+0x62>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    10f0:	21c7      	movs	r1, #199	; 0xc7
    10f2:	4008      	ands	r0, r1
   if( pmode == PHY_POWER_DOWN)
    10f4:	2c01      	cmp	r4, #1
    10f6:	d011      	beq.n	111c <wizphy_setphypmode+0x3c>
      tmp |= PHYCFGR_OPMDC_PDOWN;
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    10f8:	2138      	movs	r1, #56	; 0x38
   setPHYCFGR(tmp);
    10fa:	4301      	orrs	r1, r0
    10fc:	24b8      	movs	r4, #184	; 0xb8
    10fe:	01a4      	lsls	r4, r4, #6
    1100:	0020      	movs	r0, r4
    1102:	4b12      	ldr	r3, [pc, #72]	; (114c <wizphy_setphypmode+0x6c>)
    1104:	4798      	blx	r3
   wizphy_reset();
    1106:	4b12      	ldr	r3, [pc, #72]	; (1150 <wizphy_setphypmode+0x70>)
    1108:	4798      	blx	r3
   tmp = getPHYCFGR();
    110a:	0020      	movs	r0, r4
    110c:	4b0e      	ldr	r3, [pc, #56]	; (1148 <wizphy_setphypmode+0x68>)
    110e:	4798      	blx	r3
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    1110:	2238      	movs	r2, #56	; 0x38
    1112:	2300      	movs	r3, #0
    1114:	4202      	tst	r2, r0
    1116:	d011      	beq.n	113c <wizphy_setphypmode+0x5c>
   }
   return -1;
}
    1118:	0018      	movs	r0, r3
    111a:	bd10      	pop	{r4, pc}
      tmp |= PHYCFGR_OPMDC_PDOWN;
    111c:	3997      	subs	r1, #151	; 0x97
   setPHYCFGR(tmp);
    111e:	4301      	orrs	r1, r0
    1120:	24b8      	movs	r4, #184	; 0xb8
    1122:	01a4      	lsls	r4, r4, #6
    1124:	0020      	movs	r0, r4
    1126:	4b09      	ldr	r3, [pc, #36]	; (114c <wizphy_setphypmode+0x6c>)
    1128:	4798      	blx	r3
   wizphy_reset();
    112a:	4b09      	ldr	r3, [pc, #36]	; (1150 <wizphy_setphypmode+0x70>)
    112c:	4798      	blx	r3
   tmp = getPHYCFGR();
    112e:	0020      	movs	r0, r4
    1130:	4b05      	ldr	r3, [pc, #20]	; (1148 <wizphy_setphypmode+0x68>)
    1132:	4798      	blx	r3
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    1134:	2230      	movs	r2, #48	; 0x30
    1136:	2300      	movs	r3, #0
    1138:	4202      	tst	r2, r0
    113a:	d1ed      	bne.n	1118 <wizphy_setphypmode+0x38>
   return -1;
    113c:	2301      	movs	r3, #1
    113e:	425b      	negs	r3, r3
    1140:	e7ea      	b.n	1118 <wizphy_setphypmode+0x38>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    1142:	2301      	movs	r3, #1
    1144:	425b      	negs	r3, r3
    1146:	e7e7      	b.n	1118 <wizphy_setphypmode+0x38>
    1148:	00000a21 	.word	0x00000a21
    114c:	00000a85 	.word	0x00000a85
    1150:	00001001 	.word	0x00001001

00001154 <ctlwizchip>:
{
    1154:	b570      	push	{r4, r5, r6, lr}
    1156:	000c      	movs	r4, r1
   switch(cwtype)
    1158:	280f      	cmp	r0, #15
    115a:	d900      	bls.n	115e <ctlwizchip+0xa>
    115c:	e070      	b.n	1240 <ctlwizchip+0xec>
    115e:	0080      	lsls	r0, r0, #2
    1160:	4b3c      	ldr	r3, [pc, #240]	; (1254 <ctlwizchip+0x100>)
    1162:	581b      	ldr	r3, [r3, r0]
    1164:	469f      	mov	pc, r3
   return 0;
    1166:	2000      	movs	r0, #0
}
    1168:	bd70      	pop	{r4, r5, r6, pc}
         wizchip_sw_reset();
    116a:	4b3b      	ldr	r3, [pc, #236]	; (1258 <ctlwizchip+0x104>)
    116c:	4798      	blx	r3
   return 0;
    116e:	2000      	movs	r0, #0
         break;
    1170:	e7fa      	b.n	1168 <ctlwizchip+0x14>
         if(arg != 0) 
    1172:	2900      	cmp	r1, #0
    1174:	d004      	beq.n	1180 <ctlwizchip+0x2c>
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    1176:	3108      	adds	r1, #8
         return wizchip_init(ptmp[0], ptmp[1]);
    1178:	0020      	movs	r0, r4
    117a:	4b38      	ldr	r3, [pc, #224]	; (125c <ctlwizchip+0x108>)
    117c:	4798      	blx	r3
    117e:	e7f3      	b.n	1168 <ctlwizchip+0x14>
   uint8_t* ptmp[2] = {0,0};
    1180:	2100      	movs	r1, #0
    1182:	e7f9      	b.n	1178 <ctlwizchip+0x24>
         wizchip_clrinterrupt(*((intr_kind*)arg));
    1184:	8808      	ldrh	r0, [r1, #0]
    1186:	4b36      	ldr	r3, [pc, #216]	; (1260 <ctlwizchip+0x10c>)
    1188:	4798      	blx	r3
   return 0;
    118a:	2000      	movs	r0, #0
         break;
    118c:	e7ec      	b.n	1168 <ctlwizchip+0x14>
        *((intr_kind*)arg) = wizchip_getinterrupt();
    118e:	4b35      	ldr	r3, [pc, #212]	; (1264 <ctlwizchip+0x110>)
    1190:	4798      	blx	r3
    1192:	8020      	strh	r0, [r4, #0]
   return 0;
    1194:	2000      	movs	r0, #0
         break;
    1196:	e7e7      	b.n	1168 <ctlwizchip+0x14>
         wizchip_setinterruptmask(*((intr_kind*)arg));
    1198:	8808      	ldrh	r0, [r1, #0]
    119a:	4b33      	ldr	r3, [pc, #204]	; (1268 <ctlwizchip+0x114>)
    119c:	4798      	blx	r3
   return 0;
    119e:	2000      	movs	r0, #0
         break;         
    11a0:	e7e2      	b.n	1168 <ctlwizchip+0x14>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    11a2:	4b32      	ldr	r3, [pc, #200]	; (126c <ctlwizchip+0x118>)
    11a4:	4798      	blx	r3
    11a6:	8020      	strh	r0, [r4, #0]
   return 0;
    11a8:	2000      	movs	r0, #0
         break;
    11aa:	e7dd      	b.n	1168 <ctlwizchip+0x14>
         setINTLEVEL(*(uint16_t*)arg);
    11ac:	8809      	ldrh	r1, [r1, #0]
    11ae:	0a09      	lsrs	r1, r1, #8
    11b0:	2098      	movs	r0, #152	; 0x98
    11b2:	0140      	lsls	r0, r0, #5
    11b4:	4d2e      	ldr	r5, [pc, #184]	; (1270 <ctlwizchip+0x11c>)
    11b6:	47a8      	blx	r5
    11b8:	7821      	ldrb	r1, [r4, #0]
    11ba:	20a0      	movs	r0, #160	; 0xa0
    11bc:	0140      	lsls	r0, r0, #5
    11be:	47a8      	blx	r5
   return 0;
    11c0:	2000      	movs	r0, #0
         break;
    11c2:	e7d1      	b.n	1168 <ctlwizchip+0x14>
         *(uint16_t*)arg = getINTLEVEL();
    11c4:	2098      	movs	r0, #152	; 0x98
    11c6:	0140      	lsls	r0, r0, #5
    11c8:	4e2a      	ldr	r6, [pc, #168]	; (1274 <ctlwizchip+0x120>)
    11ca:	47b0      	blx	r6
    11cc:	0005      	movs	r5, r0
    11ce:	20a0      	movs	r0, #160	; 0xa0
    11d0:	0140      	lsls	r0, r0, #5
    11d2:	47b0      	blx	r6
    11d4:	022d      	lsls	r5, r5, #8
    11d6:	1828      	adds	r0, r5, r0
    11d8:	8020      	strh	r0, [r4, #0]
   return 0;
    11da:	2000      	movs	r0, #0
         break;
    11dc:	e7c4      	b.n	1168 <ctlwizchip+0x14>
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    11de:	4b26      	ldr	r3, [pc, #152]	; (1278 <ctlwizchip+0x124>)
    11e0:	789a      	ldrb	r2, [r3, #2]
    11e2:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    11e4:	78da      	ldrb	r2, [r3, #3]
    11e6:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    11e8:	791a      	ldrb	r2, [r3, #4]
    11ea:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    11ec:	795a      	ldrb	r2, [r3, #5]
    11ee:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    11f0:	799b      	ldrb	r3, [r3, #6]
    11f2:	710b      	strb	r3, [r1, #4]
         ((uint8_t*)arg)[5] = 0;
    11f4:	2300      	movs	r3, #0
    11f6:	714b      	strb	r3, [r1, #5]
   return 0;
    11f8:	2000      	movs	r0, #0
         break;
    11fa:	e7b5      	b.n	1168 <ctlwizchip+0x14>
         wizphy_reset();
    11fc:	4b1f      	ldr	r3, [pc, #124]	; (127c <ctlwizchip+0x128>)
    11fe:	4798      	blx	r3
   return 0;
    1200:	2000      	movs	r0, #0
         break;
    1202:	e7b1      	b.n	1168 <ctlwizchip+0x14>
         wizphy_setphyconf((wiz_PhyConf*)arg);
    1204:	0008      	movs	r0, r1
    1206:	4b1e      	ldr	r3, [pc, #120]	; (1280 <ctlwizchip+0x12c>)
    1208:	4798      	blx	r3
   return 0;
    120a:	2000      	movs	r0, #0
         break;
    120c:	e7ac      	b.n	1168 <ctlwizchip+0x14>
         wizphy_getphyconf((wiz_PhyConf*)arg);
    120e:	0008      	movs	r0, r1
    1210:	4b1c      	ldr	r3, [pc, #112]	; (1284 <ctlwizchip+0x130>)
    1212:	4798      	blx	r3
   return 0;
    1214:	2000      	movs	r0, #0
         break;
    1216:	e7a7      	b.n	1168 <ctlwizchip+0x14>
         return wizphy_setphypmode(*(uint8_t*)arg);
    1218:	7808      	ldrb	r0, [r1, #0]
    121a:	4b1b      	ldr	r3, [pc, #108]	; (1288 <ctlwizchip+0x134>)
    121c:	4798      	blx	r3
    121e:	e7a3      	b.n	1168 <ctlwizchip+0x14>
         tmp = wizphy_getphypmode();
    1220:	4b1a      	ldr	r3, [pc, #104]	; (128c <ctlwizchip+0x138>)
    1222:	4798      	blx	r3
    1224:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
    1226:	28ff      	cmp	r0, #255	; 0xff
    1228:	d00d      	beq.n	1246 <ctlwizchip+0xf2>
         *(uint8_t*)arg = tmp;
    122a:	7020      	strb	r0, [r4, #0]
   return 0;
    122c:	2000      	movs	r0, #0
         break;
    122e:	e79b      	b.n	1168 <ctlwizchip+0x14>
         tmp = wizphy_getphylink();
    1230:	4b17      	ldr	r3, [pc, #92]	; (1290 <ctlwizchip+0x13c>)
    1232:	4798      	blx	r3
    1234:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
    1236:	28ff      	cmp	r0, #255	; 0xff
    1238:	d008      	beq.n	124c <ctlwizchip+0xf8>
         *(uint8_t*)arg = tmp;
    123a:	7020      	strb	r0, [r4, #0]
   return 0;
    123c:	2000      	movs	r0, #0
         break;
    123e:	e793      	b.n	1168 <ctlwizchip+0x14>
         return -1;
    1240:	2001      	movs	r0, #1
    1242:	4240      	negs	r0, r0
    1244:	e790      	b.n	1168 <ctlwizchip+0x14>
         if((int8_t)tmp == -1) return -1;
    1246:	2001      	movs	r0, #1
    1248:	4240      	negs	r0, r0
    124a:	e78d      	b.n	1168 <ctlwizchip+0x14>
         if((int8_t)tmp == -1) return -1;
    124c:	2001      	movs	r0, #1
    124e:	4240      	negs	r0, r0
    1250:	e78a      	b.n	1168 <ctlwizchip+0x14>
    1252:	46c0      	nop			; (mov r8, r8)
    1254:	00005050 	.word	0x00005050
    1258:	00000e01 	.word	0x00000e01
    125c:	00000e7d 	.word	0x00000e7d
    1260:	00000f31 	.word	0x00000f31
    1264:	00000f6d 	.word	0x00000f6d
    1268:	00000f91 	.word	0x00000f91
    126c:	00000fad 	.word	0x00000fad
    1270:	00000a85 	.word	0x00000a85
    1274:	00000a21 	.word	0x00000a21
    1278:	20000004 	.word	0x20000004
    127c:	00001001 	.word	0x00001001
    1280:	00001031 	.word	0x00001031
    1284:	00001085 	.word	0x00001085
    1288:	000010e1 	.word	0x000010e1
    128c:	00000fe1 	.word	0x00000fe1
    1290:	00000fcd 	.word	0x00000fcd

00001294 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    1294:	b570      	push	{r4, r5, r6, lr}
    1296:	0004      	movs	r4, r0
   setSHAR(pnetinfo->mac);
    1298:	2206      	movs	r2, #6
    129a:	0001      	movs	r1, r0
    129c:	2090      	movs	r0, #144	; 0x90
    129e:	0100      	lsls	r0, r0, #4
    12a0:	4d0f      	ldr	r5, [pc, #60]	; (12e0 <wizchip_setnetinfo+0x4c>)
    12a2:	47a8      	blx	r5
   setGAR(pnetinfo->gw);
    12a4:	0021      	movs	r1, r4
    12a6:	310e      	adds	r1, #14
    12a8:	2204      	movs	r2, #4
    12aa:	2080      	movs	r0, #128	; 0x80
    12ac:	0040      	lsls	r0, r0, #1
    12ae:	47a8      	blx	r5
   setSUBR(pnetinfo->sn);
    12b0:	0021      	movs	r1, r4
    12b2:	310a      	adds	r1, #10
    12b4:	2204      	movs	r2, #4
    12b6:	20a0      	movs	r0, #160	; 0xa0
    12b8:	00c0      	lsls	r0, r0, #3
    12ba:	47a8      	blx	r5
   setSIPR(pnetinfo->ip);
    12bc:	1da1      	adds	r1, r4, #6
    12be:	2204      	movs	r2, #4
    12c0:	20f0      	movs	r0, #240	; 0xf0
    12c2:	0100      	lsls	r0, r0, #4
    12c4:	47a8      	blx	r5
   _DNS_[0] = pnetinfo->dns[0];
    12c6:	4b07      	ldr	r3, [pc, #28]	; (12e4 <wizchip_setnetinfo+0x50>)
    12c8:	7ca2      	ldrb	r2, [r4, #18]
    12ca:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
    12cc:	7ce2      	ldrb	r2, [r4, #19]
    12ce:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
    12d0:	7d22      	ldrb	r2, [r4, #20]
    12d2:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
    12d4:	7d62      	ldrb	r2, [r4, #21]
    12d6:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
    12d8:	7da2      	ldrb	r2, [r4, #22]
    12da:	4b03      	ldr	r3, [pc, #12]	; (12e8 <wizchip_setnetinfo+0x54>)
    12dc:	701a      	strb	r2, [r3, #0]
}
    12de:	bd70      	pop	{r4, r5, r6, pc}
    12e0:	00000b69 	.word	0x00000b69
    12e4:	200000fc 	.word	0x200000fc
    12e8:	200000f8 	.word	0x200000f8

000012ec <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    12ec:	b570      	push	{r4, r5, r6, lr}
    12ee:	0004      	movs	r4, r0
   getSHAR(pnetinfo->mac);
    12f0:	2206      	movs	r2, #6
    12f2:	0001      	movs	r1, r0
    12f4:	2090      	movs	r0, #144	; 0x90
    12f6:	0100      	lsls	r0, r0, #4
    12f8:	4d0f      	ldr	r5, [pc, #60]	; (1338 <wizchip_getnetinfo+0x4c>)
    12fa:	47a8      	blx	r5
   getGAR(pnetinfo->gw);
    12fc:	0021      	movs	r1, r4
    12fe:	310e      	adds	r1, #14
    1300:	2204      	movs	r2, #4
    1302:	2080      	movs	r0, #128	; 0x80
    1304:	0040      	lsls	r0, r0, #1
    1306:	47a8      	blx	r5
   getSUBR(pnetinfo->sn);
    1308:	0021      	movs	r1, r4
    130a:	310a      	adds	r1, #10
    130c:	2204      	movs	r2, #4
    130e:	20a0      	movs	r0, #160	; 0xa0
    1310:	00c0      	lsls	r0, r0, #3
    1312:	47a8      	blx	r5
   getSIPR(pnetinfo->ip);
    1314:	1da1      	adds	r1, r4, #6
    1316:	2204      	movs	r2, #4
    1318:	20f0      	movs	r0, #240	; 0xf0
    131a:	0100      	lsls	r0, r0, #4
    131c:	47a8      	blx	r5
   pnetinfo->dns[0]= _DNS_[0];
    131e:	4b07      	ldr	r3, [pc, #28]	; (133c <wizchip_getnetinfo+0x50>)
    1320:	781a      	ldrb	r2, [r3, #0]
    1322:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
    1324:	785a      	ldrb	r2, [r3, #1]
    1326:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
    1328:	789a      	ldrb	r2, [r3, #2]
    132a:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
    132c:	78db      	ldrb	r3, [r3, #3]
    132e:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
    1330:	4b03      	ldr	r3, [pc, #12]	; (1340 <wizchip_getnetinfo+0x54>)
    1332:	781b      	ldrb	r3, [r3, #0]
    1334:	75a3      	strb	r3, [r4, #22]
}
    1336:	bd70      	pop	{r4, r5, r6, pc}
    1338:	00000ae5 	.word	0x00000ae5
    133c:	200000fc 	.word	0x200000fc
    1340:	200000f8 	.word	0x200000f8

00001344 <csEnable>:
}



inline void csEnable(void)
{
    1344:	b510      	push	{r4, lr}
	spi_select_slave(&spi_master_instance, &slave, true);
    1346:	2201      	movs	r2, #1
    1348:	4902      	ldr	r1, [pc, #8]	; (1354 <csEnable+0x10>)
    134a:	4803      	ldr	r0, [pc, #12]	; (1358 <csEnable+0x14>)
    134c:	4b03      	ldr	r3, [pc, #12]	; (135c <csEnable+0x18>)
    134e:	4798      	blx	r3
}
    1350:	bd10      	pop	{r4, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	20004c20 	.word	0x20004c20
    1358:	20004be4 	.word	0x20004be4
    135c:	0000211d 	.word	0x0000211d

00001360 <csDisable>:

inline void csDisable(void)
{
    1360:	b510      	push	{r4, lr}
	spi_select_slave(&spi_master_instance, &slave, false);
    1362:	2200      	movs	r2, #0
    1364:	4902      	ldr	r1, [pc, #8]	; (1370 <csDisable+0x10>)
    1366:	4803      	ldr	r0, [pc, #12]	; (1374 <csDisable+0x14>)
    1368:	4b03      	ldr	r3, [pc, #12]	; (1378 <csDisable+0x18>)
    136a:	4798      	blx	r3
}
    136c:	bd10      	pop	{r4, pc}
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	20004c20 	.word	0x20004c20
    1374:	20004be4 	.word	0x20004be4
    1378:	0000211d 	.word	0x0000211d

0000137c <spiReadByte>:


uint8_t spiReadByte(void)
{
    137c:	b510      	push	{r4, lr}
    137e:	b082      	sub	sp, #8
	volatile uint16_t zr;
	volatile uint16_t zr2 = 0x00000000;
    1380:	ab01      	add	r3, sp, #4
    1382:	2200      	movs	r2, #0
    1384:	801a      	strh	r2, [r3, #0]

//	spi_write(&spi_master_instance,&zr);
//	//while(!spi_is_ready_to_read(&spi_master_instance)){};
//	spi_read(&spi_master_instance,&zr);
	
	spi_transceive_wait(&spi_master_instance,zr2,&zr);
    1386:	8819      	ldrh	r1, [r3, #0]
    1388:	b289      	uxth	r1, r1
    138a:	466b      	mov	r3, sp
    138c:	1d9c      	adds	r4, r3, #6
    138e:	0022      	movs	r2, r4
    1390:	4804      	ldr	r0, [pc, #16]	; (13a4 <spiReadByte+0x28>)
    1392:	4b05      	ldr	r3, [pc, #20]	; (13a8 <spiReadByte+0x2c>)
    1394:	4798      	blx	r3
	return (uint8_t)(zr && 0xff);
    1396:	8820      	ldrh	r0, [r4, #0]
    1398:	b280      	uxth	r0, r0
    139a:	1e43      	subs	r3, r0, #1
    139c:	4198      	sbcs	r0, r3
    139e:	b2c0      	uxtb	r0, r0
}
    13a0:	b002      	add	sp, #8
    13a2:	bd10      	pop	{r4, pc}
    13a4:	20004be4 	.word	0x20004be4
    13a8:	000020b5 	.word	0x000020b5

000013ac <spiWriteByte>:

void spiWriteByte(uint8_t byte)
{
    13ac:	b500      	push	{lr}
    13ae:	b083      	sub	sp, #12
	volatile uint16_t zr;
	spi_transceive_wait(&spi_master_instance,(uint8_t)byte,&zr);
    13b0:	b281      	uxth	r1, r0
    13b2:	466b      	mov	r3, sp
    13b4:	1d9a      	adds	r2, r3, #6
    13b6:	4802      	ldr	r0, [pc, #8]	; (13c0 <spiWriteByte+0x14>)
    13b8:	4b02      	ldr	r3, [pc, #8]	; (13c4 <spiWriteByte+0x18>)
    13ba:	4798      	blx	r3
//		spi_write(&spi_master_instance,(uint8_t)byte);
}
    13bc:	b003      	add	sp, #12
    13be:	bd00      	pop	{pc}
    13c0:	20004be4 	.word	0x20004be4
    13c4:	000020b5 	.word	0x000020b5

000013c8 <configure_spi_master>:
{
    13c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13ca:	b08f      	sub	sp, #60	; 0x3c
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    13cc:	4c2b      	ldr	r4, [pc, #172]	; (147c <configure_spi_master+0xb4>)
    13ce:	2307      	movs	r3, #7
    13d0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
    13d2:	2300      	movs	r3, #0
    13d4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    13d6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    13d8:	2201      	movs	r2, #1
    13da:	4669      	mov	r1, sp
    13dc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    13de:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    13e0:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    13e2:	2007      	movs	r0, #7
    13e4:	4b26      	ldr	r3, [pc, #152]	; (1480 <configure_spi_master+0xb8>)
    13e6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    13e8:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13ea:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13ec:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
    13ee:	2900      	cmp	r1, #0
    13f0:	d104      	bne.n	13fc <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
    13f2:	095a      	lsrs	r2, r3, #5
    13f4:	01d2      	lsls	r2, r2, #7
    13f6:	4923      	ldr	r1, [pc, #140]	; (1484 <configure_spi_master+0xbc>)
    13f8:	468c      	mov	ip, r1
    13fa:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    13fc:	261f      	movs	r6, #31
    13fe:	4033      	ands	r3, r6
    1400:	2501      	movs	r5, #1
    1402:	0029      	movs	r1, r5
    1404:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1406:	6191      	str	r1, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
    1408:	ac01      	add	r4, sp, #4
    140a:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    140c:	2300      	movs	r3, #0
    140e:	9302      	str	r3, [sp, #8]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1410:	9303      	str	r3, [sp, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1412:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1414:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1416:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    1418:	74e5      	strb	r5, [r4, #19]
	config->generator_source = GCLK_GENERATOR_0;
    141a:	2220      	movs	r2, #32
    141c:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    141e:	3a14      	subs	r2, #20
    1420:	2100      	movs	r1, #0
    1422:	a806      	add	r0, sp, #24
    1424:	4b18      	ldr	r3, [pc, #96]	; (1488 <configure_spi_master+0xc0>)
    1426:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    1428:	4b18      	ldr	r3, [pc, #96]	; (148c <configure_spi_master+0xc4>)
    142a:	6163      	str	r3, [r4, #20]
	config_spi_master.mux_setting = SPI_SIGNAL_MUX_SETTING_F;
    142c:	2388      	movs	r3, #136	; 0x88
    142e:	035b      	lsls	r3, r3, #13
    1430:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = PINMUX_PA09C_SERCOM0_PAD1;
    1432:	4b17      	ldr	r3, [pc, #92]	; (1490 <configure_spi_master+0xc8>)
    1434:	6263      	str	r3, [r4, #36]	; 0x24
	config_spi_master.pinmux_pad1 = PINMUX_PA10C_SERCOM0_PAD2;
    1436:	4b17      	ldr	r3, [pc, #92]	; (1494 <configure_spi_master+0xcc>)
    1438:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad2 = PINMUX_PA11C_SERCOM0_PAD3;
    143a:	4b17      	ldr	r3, [pc, #92]	; (1498 <configure_spi_master+0xd0>)
    143c:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad3 = PINMUX_UNUSED;
    143e:	2301      	movs	r3, #1
    1440:	425b      	negs	r3, r3
    1442:	6323      	str	r3, [r4, #48]	; 0x30
	spi_init(&spi_master_instance, SERCOM0, &config_spi_master);
    1444:	4f15      	ldr	r7, [pc, #84]	; (149c <configure_spi_master+0xd4>)
    1446:	0022      	movs	r2, r4
    1448:	4915      	ldr	r1, [pc, #84]	; (14a0 <configure_spi_master+0xd8>)
    144a:	0038      	movs	r0, r7
    144c:	4b15      	ldr	r3, [pc, #84]	; (14a4 <configure_spi_master+0xdc>)
    144e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1450:	683c      	ldr	r4, [r7, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1452:	0020      	movs	r0, r4
    1454:	4b14      	ldr	r3, [pc, #80]	; (14a8 <configure_spi_master+0xe0>)
    1456:	4798      	blx	r3
    1458:	4006      	ands	r6, r0
    145a:	40b5      	lsls	r5, r6
    145c:	4b13      	ldr	r3, [pc, #76]	; (14ac <configure_spi_master+0xe4>)
    145e:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1460:	683a      	ldr	r2, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    1462:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1464:	2b00      	cmp	r3, #0
    1466:	d1fc      	bne.n	1462 <configure_spi_master+0x9a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1468:	6823      	ldr	r3, [r4, #0]
    146a:	2202      	movs	r2, #2
    146c:	4313      	orrs	r3, r2
    146e:	6023      	str	r3, [r4, #0]
	debugMSG("SPI Initiated");
    1470:	480f      	ldr	r0, [pc, #60]	; (14b0 <configure_spi_master+0xe8>)
    1472:	4b10      	ldr	r3, [pc, #64]	; (14b4 <configure_spi_master+0xec>)
    1474:	4798      	blx	r3
}
    1476:	b00f      	add	sp, #60	; 0x3c
    1478:	bdf0      	pop	{r4, r5, r6, r7, pc}
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	20004c20 	.word	0x20004c20
    1480:	00001a85 	.word	0x00001a85
    1484:	41004400 	.word	0x41004400
    1488:	0000472f 	.word	0x0000472f
    148c:	000186a0 	.word	0x000186a0
    1490:	00090002 	.word	0x00090002
    1494:	000a0002 	.word	0x000a0002
    1498:	000b0002 	.word	0x000b0002
    149c:	20004be4 	.word	0x20004be4
    14a0:	42000800 	.word	0x42000800
    14a4:	00001eed 	.word	0x00001eed
    14a8:	00001e5d 	.word	0x00001e5d
    14ac:	e000e100 	.word	0xe000e100
    14b0:	00005138 	.word	0x00005138
    14b4:	00000281 	.word	0x00000281

000014b8 <calcu_len>:
{
    14b8:	b510      	push	{r4, lr}
	return strlen(send_dat);
    14ba:	4802      	ldr	r0, [pc, #8]	; (14c4 <calcu_len+0xc>)
    14bc:	4b02      	ldr	r3, [pc, #8]	; (14c8 <calcu_len+0x10>)
    14be:	4798      	blx	r3
    14c0:	b280      	uxth	r0, r0
}
    14c2:	bd10      	pop	{r4, pc}
    14c4:	20000104 	.word	0x20000104
    14c8:	000048f9 	.word	0x000048f9

000014cc <sendHeader>:
{
    14cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ce:	b0a1      	sub	sp, #132	; 0x84
    14d0:	0006      	movs	r6, r0
	uint8_t dat[128]={0,};
    14d2:	2280      	movs	r2, #128	; 0x80
    14d4:	2100      	movs	r1, #0
    14d6:	4668      	mov	r0, sp
    14d8:	4b18      	ldr	r3, [pc, #96]	; (153c <sendHeader+0x70>)
    14da:	4798      	blx	r3
	dat_temp = "HTTP/1.1 200 OK\r\n";                       strcat(dat, dat_temp);
    14dc:	4668      	mov	r0, sp
    14de:	4c18      	ldr	r4, [pc, #96]	; (1540 <sendHeader+0x74>)
    14e0:	47a0      	blx	r4
    14e2:	4468      	add	r0, sp
    14e4:	2212      	movs	r2, #18
    14e6:	4917      	ldr	r1, [pc, #92]	; (1544 <sendHeader+0x78>)
    14e8:	4d17      	ldr	r5, [pc, #92]	; (1548 <sendHeader+0x7c>)
    14ea:	47a8      	blx	r5
	dat_temp = "Content-Type: text/html\r\n";                   strcat(dat, dat_temp);
    14ec:	4668      	mov	r0, sp
    14ee:	47a0      	blx	r4
    14f0:	4468      	add	r0, sp
    14f2:	221a      	movs	r2, #26
    14f4:	4915      	ldr	r1, [pc, #84]	; (154c <sendHeader+0x80>)
    14f6:	47a8      	blx	r5
	dat_temp = "Connection: close\r\n";                     strcat(dat, dat_temp);
    14f8:	4668      	mov	r0, sp
    14fa:	47a0      	blx	r4
    14fc:	4468      	add	r0, sp
    14fe:	2214      	movs	r2, #20
    1500:	4913      	ldr	r1, [pc, #76]	; (1550 <sendHeader+0x84>)
    1502:	47a8      	blx	r5
	sprintf(dat, "%sContent-Length: %d", dat, calcu_len());
    1504:	4b13      	ldr	r3, [pc, #76]	; (1554 <sendHeader+0x88>)
    1506:	4798      	blx	r3
    1508:	0003      	movs	r3, r0
    150a:	466a      	mov	r2, sp
    150c:	4912      	ldr	r1, [pc, #72]	; (1558 <sendHeader+0x8c>)
    150e:	4668      	mov	r0, sp
    1510:	4f12      	ldr	r7, [pc, #72]	; (155c <sendHeader+0x90>)
    1512:	47b8      	blx	r7
	dat_temp = "\r\n\r\n";                              strcat(dat, dat_temp);
    1514:	4668      	mov	r0, sp
    1516:	47a0      	blx	r4
    1518:	4468      	add	r0, sp
    151a:	2205      	movs	r2, #5
    151c:	4910      	ldr	r1, [pc, #64]	; (1560 <sendHeader+0x94>)
    151e:	47a8      	blx	r5
	send(sn, (uint8_t *)dat, strlen(dat));
    1520:	4668      	mov	r0, sp
    1522:	47a0      	blx	r4
    1524:	b282      	uxth	r2, r0
    1526:	4669      	mov	r1, sp
    1528:	0030      	movs	r0, r6
    152a:	4b0e      	ldr	r3, [pc, #56]	; (1564 <sendHeader+0x98>)
    152c:	4798      	blx	r3
	debugMSG("%s", dat);
    152e:	4669      	mov	r1, sp
    1530:	480d      	ldr	r0, [pc, #52]	; (1568 <sendHeader+0x9c>)
    1532:	4b0e      	ldr	r3, [pc, #56]	; (156c <sendHeader+0xa0>)
    1534:	4798      	blx	r3
}
    1536:	b021      	add	sp, #132	; 0x84
    1538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	0000472f 	.word	0x0000472f
    1540:	000048f9 	.word	0x000048f9
    1544:	000052cc 	.word	0x000052cc
    1548:	0000471d 	.word	0x0000471d
    154c:	000052e0 	.word	0x000052e0
    1550:	000052fc 	.word	0x000052fc
    1554:	000014b9 	.word	0x000014b9
    1558:	00005310 	.word	0x00005310
    155c:	000048b5 	.word	0x000048b5
    1560:	00005328 	.word	0x00005328
    1564:	00000795 	.word	0x00000795
    1568:	00005330 	.word	0x00005330
    156c:	00000281 	.word	0x00000281

00001570 <sendData>:
{
    1570:	b570      	push	{r4, r5, r6, lr}
    1572:	0005      	movs	r5, r0
	send(sn, (uint8_t *)send_dat, strlen(send_dat));
    1574:	4c0b      	ldr	r4, [pc, #44]	; (15a4 <sendData+0x34>)
    1576:	0020      	movs	r0, r4
    1578:	4b0b      	ldr	r3, [pc, #44]	; (15a8 <sendData+0x38>)
    157a:	4798      	blx	r3
    157c:	b282      	uxth	r2, r0
    157e:	0021      	movs	r1, r4
    1580:	0028      	movs	r0, r5
    1582:	4b0a      	ldr	r3, [pc, #40]	; (15ac <sendData+0x3c>)
    1584:	4798      	blx	r3
	debugMSG("%s", send_dat);
    1586:	0021      	movs	r1, r4
    1588:	4809      	ldr	r0, [pc, #36]	; (15b0 <sendData+0x40>)
    158a:	4b0a      	ldr	r3, [pc, #40]	; (15b4 <sendData+0x44>)
    158c:	4798      	blx	r3
    158e:	0023      	movs	r3, r4
    1590:	2280      	movs	r2, #128	; 0x80
    1592:	00d2      	lsls	r2, r2, #3
    1594:	4694      	mov	ip, r2
    1596:	4464      	add	r4, ip
		send_dat[i]=0;
    1598:	2100      	movs	r1, #0
    159a:	7019      	strb	r1, [r3, #0]
    159c:	3301      	adds	r3, #1
	for(i=0;i<1024;i++){
    159e:	42a3      	cmp	r3, r4
    15a0:	d1fb      	bne.n	159a <sendData+0x2a>
}
    15a2:	bd70      	pop	{r4, r5, r6, pc}
    15a4:	20000104 	.word	0x20000104
    15a8:	000048f9 	.word	0x000048f9
    15ac:	00000795 	.word	0x00000795
    15b0:	00005330 	.word	0x00005330
    15b4:	00000281 	.word	0x00000281

000015b8 <proc_http>:
{
    15b8:	b510      	push	{r4, lr}
    15ba:	0004      	movs	r4, r0
    if((buf[0]=='G')&&(buf[1]=='E')&&(buf[2]=='T')&&(buf[3]==' ')){ // GET_Request
    15bc:	780b      	ldrb	r3, [r1, #0]
    15be:	2b47      	cmp	r3, #71	; 0x47
    15c0:	d001      	beq.n	15c6 <proc_http+0xe>
}
    15c2:	2001      	movs	r0, #1
    15c4:	bd10      	pop	{r4, pc}
    if((buf[0]=='G')&&(buf[1]=='E')&&(buf[2]=='T')&&(buf[3]==' ')){ // GET_Request
    15c6:	784b      	ldrb	r3, [r1, #1]
    15c8:	2b45      	cmp	r3, #69	; 0x45
    15ca:	d1fa      	bne.n	15c2 <proc_http+0xa>
    15cc:	788b      	ldrb	r3, [r1, #2]
    15ce:	2b54      	cmp	r3, #84	; 0x54
    15d0:	d1f7      	bne.n	15c2 <proc_http+0xa>
    15d2:	78cb      	ldrb	r3, [r1, #3]
    15d4:	2b20      	cmp	r3, #32
    15d6:	d1f4      	bne.n	15c2 <proc_http+0xa>
        if((buf[5]=='?')){
    15d8:	794b      	ldrb	r3, [r1, #5]
    15da:	2b3f      	cmp	r3, #63	; 0x3f
    15dc:	d005      	beq.n	15ea <proc_http+0x32>
            sendHeader(sn);
    15de:	4b0c      	ldr	r3, [pc, #48]	; (1610 <proc_http+0x58>)
    15e0:	4798      	blx	r3
            sendData(sn);
    15e2:	0020      	movs	r0, r4
    15e4:	4b0b      	ldr	r3, [pc, #44]	; (1614 <proc_http+0x5c>)
    15e6:	4798      	blx	r3
    15e8:	e7eb      	b.n	15c2 <proc_http+0xa>
            if((buf[9]=='O')&&(buf[10]=='N')){
    15ea:	7a4b      	ldrb	r3, [r1, #9]
    15ec:	2b4f      	cmp	r3, #79	; 0x4f
    15ee:	d102      	bne.n	15f6 <proc_http+0x3e>
    15f0:	7a8b      	ldrb	r3, [r1, #10]
    15f2:	2b4e      	cmp	r3, #78	; 0x4e
    15f4:	d006      	beq.n	1604 <proc_http+0x4c>
                sendHeader(sn);
    15f6:	0020      	movs	r0, r4
    15f8:	4b05      	ldr	r3, [pc, #20]	; (1610 <proc_http+0x58>)
    15fa:	4798      	blx	r3
                sendData(sn);
    15fc:	0020      	movs	r0, r4
    15fe:	4b05      	ldr	r3, [pc, #20]	; (1614 <proc_http+0x5c>)
    1600:	4798      	blx	r3
    1602:	e7de      	b.n	15c2 <proc_http+0xa>
                sendHeader(sn);
    1604:	4b02      	ldr	r3, [pc, #8]	; (1610 <proc_http+0x58>)
    1606:	4798      	blx	r3
                sendData(sn);
    1608:	0020      	movs	r0, r4
    160a:	4b02      	ldr	r3, [pc, #8]	; (1614 <proc_http+0x5c>)
    160c:	4798      	blx	r3
    160e:	e7d8      	b.n	15c2 <proc_http+0xa>
    1610:	000014cd 	.word	0x000014cd
    1614:	00001571 	.word	0x00001571

00001618 <WebServer>:
{
    1618:	b5f0      	push	{r4, r5, r6, r7, lr}
    161a:	b087      	sub	sp, #28
    161c:	0004      	movs	r4, r0
    161e:	9103      	str	r1, [sp, #12]
    1620:	9202      	str	r2, [sp, #8]
	volatile uint8_t sr = getSn_SR(sn);
    1622:	9001      	str	r0, [sp, #4]
    1624:	0146      	lsls	r6, r0, #5
    1626:	3608      	adds	r6, #8
    1628:	23c0      	movs	r3, #192	; 0xc0
    162a:	009b      	lsls	r3, r3, #2
    162c:	18f5      	adds	r5, r6, r3
    162e:	0028      	movs	r0, r5
    1630:	4f2d      	ldr	r7, [pc, #180]	; (16e8 <WebServer+0xd0>)
    1632:	47b8      	blx	r7
    1634:	ab04      	add	r3, sp, #16
    1636:	71d8      	strb	r0, [r3, #7]
	debugMSG("OutPutSn_SR : %d\n",sn);
    1638:	0021      	movs	r1, r4
    163a:	482c      	ldr	r0, [pc, #176]	; (16ec <WebServer+0xd4>)
    163c:	4b2c      	ldr	r3, [pc, #176]	; (16f0 <WebServer+0xd8>)
    163e:	4798      	blx	r3
   switch(getSn_SR(sn))
    1640:	0028      	movs	r0, r5
    1642:	47b8      	blx	r7
    1644:	2813      	cmp	r0, #19
    1646:	d049      	beq.n	16dc <WebServer+0xc4>
    1648:	d908      	bls.n	165c <WebServer+0x44>
    164a:	2817      	cmp	r0, #23
    164c:	d013      	beq.n	1676 <WebServer+0x5e>
    164e:	281c      	cmp	r0, #28
    1650:	d148      	bne.n	16e4 <WebServer+0xcc>
         if((ret = disconnect(sn)) != SOCK_OK) return ret;
    1652:	0020      	movs	r0, r4
    1654:	4b27      	ldr	r3, [pc, #156]	; (16f4 <WebServer+0xdc>)
    1656:	4798      	blx	r3
}
    1658:	b007      	add	sp, #28
    165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   switch(getSn_SR(sn))
    165c:	2800      	cmp	r0, #0
    165e:	d141      	bne.n	16e4 <WebServer+0xcc>
         if((ret = socket(sn, Sn_MR_TCP, port, 0x00)) != sn) return ret;
    1660:	2300      	movs	r3, #0
    1662:	9a02      	ldr	r2, [sp, #8]
    1664:	2101      	movs	r1, #1
    1666:	0020      	movs	r0, r4
    1668:	4c23      	ldr	r4, [pc, #140]	; (16f8 <WebServer+0xe0>)
    166a:	47a0      	blx	r4
    166c:	9b01      	ldr	r3, [sp, #4]
    166e:	4283      	cmp	r3, r0
    1670:	d1f2      	bne.n	1658 <WebServer+0x40>
   return 1;
    1672:	2001      	movs	r0, #1
    1674:	e7f0      	b.n	1658 <WebServer+0x40>
         if(getSn_IR(sn) & Sn_IR_CON)
    1676:	2380      	movs	r3, #128	; 0x80
    1678:	009b      	lsls	r3, r3, #2
    167a:	18f5      	adds	r5, r6, r3
    167c:	0028      	movs	r0, r5
    167e:	4b1a      	ldr	r3, [pc, #104]	; (16e8 <WebServer+0xd0>)
    1680:	4798      	blx	r3
    1682:	07c3      	lsls	r3, r0, #31
    1684:	d425      	bmi.n	16d2 <WebServer+0xba>
{
    1686:	4b1d      	ldr	r3, [pc, #116]	; (16fc <WebServer+0xe4>)
    1688:	3b01      	subs	r3, #1
    168a:	b29b      	uxth	r3, r3
         while(i){
    168c:	2b00      	cmp	r3, #0
    168e:	d1fb      	bne.n	1688 <WebServer+0x70>
         if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
    1690:	0020      	movs	r0, r4
    1692:	4b1b      	ldr	r3, [pc, #108]	; (1700 <WebServer+0xe8>)
    1694:	4798      	blx	r3
    1696:	0003      	movs	r3, r0
   return 1;
    1698:	2001      	movs	r0, #1
         if((size = getSn_RX_RSR(sn)) > 0) // Don't need to check SOCKERR_BUSY because it doesn't not occur.
    169a:	2b00      	cmp	r3, #0
    169c:	d0dc      	beq.n	1658 <WebServer+0x40>
            ret = recv(sn, buf, size);
    169e:	1c1a      	adds	r2, r3, #0
    16a0:	2180      	movs	r1, #128	; 0x80
    16a2:	0109      	lsls	r1, r1, #4
    16a4:	b29b      	uxth	r3, r3
    16a6:	428b      	cmp	r3, r1
    16a8:	d901      	bls.n	16ae <WebServer+0x96>
    16aa:	4b16      	ldr	r3, [pc, #88]	; (1704 <WebServer+0xec>)
    16ac:	881a      	ldrh	r2, [r3, #0]
    16ae:	b292      	uxth	r2, r2
    16b0:	9d03      	ldr	r5, [sp, #12]
    16b2:	0029      	movs	r1, r5
    16b4:	0020      	movs	r0, r4
    16b6:	4b14      	ldr	r3, [pc, #80]	; (1708 <WebServer+0xf0>)
    16b8:	4798      	blx	r3
            if(ret <= 0) return ret;      // check SOCKERR_BUSY & SOCKERR_XXX. For showing the occurrence of SOCKERR_BUSY.
    16ba:	2800      	cmp	r0, #0
    16bc:	ddcc      	ble.n	1658 <WebServer+0x40>
            debugMSG("HTTP Request received: \r\n%s\r\n", buf);
    16be:	0029      	movs	r1, r5
    16c0:	4812      	ldr	r0, [pc, #72]	; (170c <WebServer+0xf4>)
    16c2:	4b0b      	ldr	r3, [pc, #44]	; (16f0 <WebServer+0xd8>)
    16c4:	4798      	blx	r3
            proc_http(sn, (char *)buf);
    16c6:	0029      	movs	r1, r5
    16c8:	0020      	movs	r0, r4
    16ca:	4b11      	ldr	r3, [pc, #68]	; (1710 <WebServer+0xf8>)
    16cc:	4798      	blx	r3
   return 1;
    16ce:	2001      	movs	r0, #1
    16d0:	e7c2      	b.n	1658 <WebServer+0x40>
            setSn_IR(sn,Sn_IR_CON);
    16d2:	2101      	movs	r1, #1
    16d4:	0028      	movs	r0, r5
    16d6:	4b0f      	ldr	r3, [pc, #60]	; (1714 <WebServer+0xfc>)
    16d8:	4798      	blx	r3
    16da:	e7d4      	b.n	1686 <WebServer+0x6e>
         if( (ret = listen(sn)) != SOCK_OK) return ret;
    16dc:	0020      	movs	r0, r4
    16de:	4b0e      	ldr	r3, [pc, #56]	; (1718 <WebServer+0x100>)
    16e0:	4798      	blx	r3
    16e2:	e7b9      	b.n	1658 <WebServer+0x40>
   return 1;
    16e4:	2001      	movs	r0, #1
    16e6:	e7b7      	b.n	1658 <WebServer+0x40>
    16e8:	00000a21 	.word	0x00000a21
    16ec:	00005104 	.word	0x00005104
    16f0:	00000281 	.word	0x00000281
    16f4:	000006f1 	.word	0x000006f1
    16f8:	000004f1 	.word	0x000004f1
    16fc:	00002710 	.word	0x00002710
    1700:	00000c45 	.word	0x00000c45
    1704:	00005090 	.word	0x00005090
    1708:	000008f5 	.word	0x000008f5
    170c:	00005118 	.word	0x00005118
    1710:	000015b9 	.word	0x000015b9
    1714:	00000a85 	.word	0x00000a85
    1718:	00000679 	.word	0x00000679

0000171c <testTasks_init>:
{
    171c:	b510      	push	{r4, lr}
    171e:	b082      	sub	sp, #8
	debugInit();
    1720:	4b0f      	ldr	r3, [pc, #60]	; (1760 <testTasks_init+0x44>)
    1722:	4798      	blx	r3
	infoMSG("SAMD21 Projekt mit W5500 Integration");
    1724:	480f      	ldr	r0, [pc, #60]	; (1764 <testTasks_init+0x48>)
    1726:	4c10      	ldr	r4, [pc, #64]	; (1768 <testTasks_init+0x4c>)
    1728:	47a0      	blx	r4
	infoMSG("Info Beispiel");
    172a:	4810      	ldr	r0, [pc, #64]	; (176c <testTasks_init+0x50>)
    172c:	47a0      	blx	r4
	debugMSG("Debug Beispiel");
    172e:	4810      	ldr	r0, [pc, #64]	; (1770 <testTasks_init+0x54>)
    1730:	4b10      	ldr	r3, [pc, #64]	; (1774 <testTasks_init+0x58>)
    1732:	4798      	blx	r3
	warningMSG("Warnung Beispiel");
    1734:	4810      	ldr	r0, [pc, #64]	; (1778 <testTasks_init+0x5c>)
    1736:	4b11      	ldr	r3, [pc, #68]	; (177c <testTasks_init+0x60>)
    1738:	4798      	blx	r3
	errorMSG("Error Beispiel");
    173a:	4811      	ldr	r0, [pc, #68]	; (1780 <testTasks_init+0x64>)
    173c:	4b11      	ldr	r3, [pc, #68]	; (1784 <testTasks_init+0x68>)
    173e:	4798      	blx	r3
	infoMSG("Noch ein Paar Bytes als Test ausgabe im UART");
    1740:	4811      	ldr	r0, [pc, #68]	; (1788 <testTasks_init+0x6c>)
    1742:	47a0      	blx	r4
	xTaskCreate(mainTest_task,
    1744:	4b11      	ldr	r3, [pc, #68]	; (178c <testTasks_init+0x70>)
    1746:	9301      	str	r3, [sp, #4]
    1748:	2301      	movs	r3, #1
    174a:	9300      	str	r3, [sp, #0]
    174c:	2300      	movs	r3, #0
    174e:	2280      	movs	r2, #128	; 0x80
    1750:	00d2      	lsls	r2, r2, #3
    1752:	490f      	ldr	r1, [pc, #60]	; (1790 <testTasks_init+0x74>)
    1754:	480f      	ldr	r0, [pc, #60]	; (1794 <testTasks_init+0x78>)
    1756:	4c10      	ldr	r4, [pc, #64]	; (1798 <testTasks_init+0x7c>)
    1758:	47a0      	blx	r4
}
    175a:	b002      	add	sp, #8
    175c:	bd10      	pop	{r4, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00000359 	.word	0x00000359
    1764:	00005334 	.word	0x00005334
    1768:	00000239 	.word	0x00000239
    176c:	0000535c 	.word	0x0000535c
    1770:	0000536c 	.word	0x0000536c
    1774:	00000281 	.word	0x00000281
    1778:	0000537c 	.word	0x0000537c
    177c:	000002c9 	.word	0x000002c9
    1780:	00005390 	.word	0x00005390
    1784:	00000311 	.word	0x00000311
    1788:	000053a0 	.word	0x000053a0
    178c:	20000100 	.word	0x20000100
    1790:	000053d0 	.word	0x000053d0
    1794:	000018d1 	.word	0x000018d1
    1798:	00003a2d 	.word	0x00003a2d

0000179c <W5x00Initialze>:


void W5x00Initialze(void)
{
    179c:	b530      	push	{r4, r5, lr}
    179e:	b087      	sub	sp, #28
	intr_kind temp;
	int8_t phy_link =0;
    17a0:	2200      	movs	r2, #0
    17a2:	2315      	movs	r3, #21
    17a4:	446b      	add	r3, sp
    17a6:	701a      	strb	r2, [r3, #0]
#if _WIZCHIP_ < W5200
	unsigned char W5x00_AdrSet[2][4] = {{2,2,2,2},{2,2,2,2}};
#else
	unsigned char W5x00_AdrSet[2][8] = {{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
    17a8:	a901      	add	r1, sp, #4
    17aa:	4b1b      	ldr	r3, [pc, #108]	; (1818 <W5x00Initialze+0x7c>)
    17ac:	000a      	movs	r2, r1
    17ae:	cb31      	ldmia	r3!, {r0, r4, r5}
    17b0:	c231      	stmia	r2!, {r0, r4, r5}
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	6013      	str	r3, [r2, #0]
	/*
	 */
#if _WIZCHIP_ == W5200
	temp = 0;
#else
	temp = IK_DEST_UNREACH;
    17b6:	2240      	movs	r2, #64	; 0x40
    17b8:	2316      	movs	r3, #22
    17ba:	446b      	add	r3, sp
    17bc:	801a      	strh	r2, [r3, #0]
#endif

	if(ctlwizchip(CW_INIT_WIZCHIP,(void*)W5x00_AdrSet) == -1)
    17be:	2001      	movs	r0, #1
    17c0:	4b16      	ldr	r3, [pc, #88]	; (181c <W5x00Initialze+0x80>)
    17c2:	4798      	blx	r3
    17c4:	1c43      	adds	r3, r0, #1
    17c6:	d00a      	beq.n	17de <W5x00Initialze+0x42>
	{
		errorMSG("W5x00 initialized fail.\r\n");
	}

	if(ctlwizchip(CW_SET_INTRMASK,&temp) == -1)
    17c8:	2116      	movs	r1, #22
    17ca:	4469      	add	r1, sp
    17cc:	2004      	movs	r0, #4
    17ce:	4b13      	ldr	r3, [pc, #76]	; (181c <W5x00Initialze+0x80>)
    17d0:	4798      	blx	r3
    17d2:	1c43      	adds	r3, r0, #1
    17d4:	d007      	beq.n	17e6 <W5x00Initialze+0x4a>
	{
		debugMSG("W5x00 interrupt\r\n");
	}
	do{//check phy status.
		if(ctlwizchip(CW_GET_PHYLINK,&phy_link) == -1){
    17d6:	2415      	movs	r4, #21
    17d8:	446c      	add	r4, sp
    17da:	4d10      	ldr	r5, [pc, #64]	; (181c <W5x00Initialze+0x80>)
    17dc:	e00b      	b.n	17f6 <W5x00Initialze+0x5a>
		errorMSG("W5x00 initialized fail.\r\n");
    17de:	4810      	ldr	r0, [pc, #64]	; (1820 <W5x00Initialze+0x84>)
    17e0:	4b10      	ldr	r3, [pc, #64]	; (1824 <W5x00Initialze+0x88>)
    17e2:	4798      	blx	r3
    17e4:	e7f0      	b.n	17c8 <W5x00Initialze+0x2c>
		debugMSG("W5x00 interrupt\r\n");
    17e6:	4810      	ldr	r0, [pc, #64]	; (1828 <W5x00Initialze+0x8c>)
    17e8:	4b10      	ldr	r3, [pc, #64]	; (182c <W5x00Initialze+0x90>)
    17ea:	4798      	blx	r3
    17ec:	e7f3      	b.n	17d6 <W5x00Initialze+0x3a>
			errorMSG("Unknown PHY link status.\r\n");
			delay_ms(10);
		}

	}while(phy_link == PHY_LINK_OFF);
    17ee:	2300      	movs	r3, #0
    17f0:	56e3      	ldrsb	r3, [r4, r3]
    17f2:	2b00      	cmp	r3, #0
    17f4:	d10b      	bne.n	180e <W5x00Initialze+0x72>
		if(ctlwizchip(CW_GET_PHYLINK,&phy_link) == -1){
    17f6:	0021      	movs	r1, r4
    17f8:	200f      	movs	r0, #15
    17fa:	47a8      	blx	r5
    17fc:	1c43      	adds	r3, r0, #1
    17fe:	d1f6      	bne.n	17ee <W5x00Initialze+0x52>
			errorMSG("Unknown PHY link status.\r\n");
    1800:	480b      	ldr	r0, [pc, #44]	; (1830 <W5x00Initialze+0x94>)
    1802:	4b08      	ldr	r3, [pc, #32]	; (1824 <W5x00Initialze+0x88>)
    1804:	4798      	blx	r3
			delay_ms(10);
    1806:	200a      	movs	r0, #10
    1808:	4b0a      	ldr	r3, [pc, #40]	; (1834 <W5x00Initialze+0x98>)
    180a:	4798      	blx	r3
    180c:	e7ef      	b.n	17ee <W5x00Initialze+0x52>
	infoMSG("W5500 initialisiert");
    180e:	480a      	ldr	r0, [pc, #40]	; (1838 <W5x00Initialze+0x9c>)
    1810:	4b0a      	ldr	r3, [pc, #40]	; (183c <W5x00Initialze+0xa0>)
    1812:	4798      	blx	r3
}
    1814:	b007      	add	sp, #28
    1816:	bd30      	pop	{r4, r5, pc}
    1818:	00005094 	.word	0x00005094
    181c:	00001155 	.word	0x00001155
    1820:	000050a4 	.word	0x000050a4
    1824:	00000311 	.word	0x00000311
    1828:	000050c0 	.word	0x000050c0
    182c:	00000281 	.word	0x00000281
    1830:	000050d4 	.word	0x000050d4
    1834:	000019e9 	.word	0x000019e9
    1838:	000050f0 	.word	0x000050f0
    183c:	00000239 	.word	0x00000239

00001840 <print_network_information>:

void print_network_information(void)
{
    1840:	b530      	push	{r4, r5, lr}
    1842:	b085      	sub	sp, #20
	memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
    1844:	4c19      	ldr	r4, [pc, #100]	; (18ac <print_network_information+0x6c>)
    1846:	2217      	movs	r2, #23
    1848:	2100      	movs	r1, #0
    184a:	0020      	movs	r0, r4
    184c:	4b18      	ldr	r3, [pc, #96]	; (18b0 <print_network_information+0x70>)
    184e:	4798      	blx	r3

	wizchip_getnetinfo(&gWIZNETINFO);
    1850:	0020      	movs	r0, r4
    1852:	4b18      	ldr	r3, [pc, #96]	; (18b4 <print_network_information+0x74>)
    1854:	4798      	blx	r3
	infoMSG("MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
    1856:	78a3      	ldrb	r3, [r4, #2]
    1858:	7862      	ldrb	r2, [r4, #1]
    185a:	7821      	ldrb	r1, [r4, #0]
    185c:	7960      	ldrb	r0, [r4, #5]
    185e:	9002      	str	r0, [sp, #8]
    1860:	7920      	ldrb	r0, [r4, #4]
    1862:	9001      	str	r0, [sp, #4]
    1864:	78e0      	ldrb	r0, [r4, #3]
    1866:	9000      	str	r0, [sp, #0]
    1868:	4813      	ldr	r0, [pc, #76]	; (18b8 <print_network_information+0x78>)
    186a:	4d14      	ldr	r5, [pc, #80]	; (18bc <print_network_information+0x7c>)
    186c:	47a8      	blx	r5
	infoMSG("IP  Address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
    186e:	7a23      	ldrb	r3, [r4, #8]
    1870:	79e2      	ldrb	r2, [r4, #7]
    1872:	79a1      	ldrb	r1, [r4, #6]
    1874:	7a60      	ldrb	r0, [r4, #9]
    1876:	9000      	str	r0, [sp, #0]
    1878:	4811      	ldr	r0, [pc, #68]	; (18c0 <print_network_information+0x80>)
    187a:	47a8      	blx	r5
	infoMSG("Subnet Mask : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
    187c:	7b23      	ldrb	r3, [r4, #12]
    187e:	7ae2      	ldrb	r2, [r4, #11]
    1880:	7aa1      	ldrb	r1, [r4, #10]
    1882:	7b60      	ldrb	r0, [r4, #13]
    1884:	9000      	str	r0, [sp, #0]
    1886:	480f      	ldr	r0, [pc, #60]	; (18c4 <print_network_information+0x84>)
    1888:	47a8      	blx	r5
	infoMSG("Gateway     : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
    188a:	7c23      	ldrb	r3, [r4, #16]
    188c:	7be2      	ldrb	r2, [r4, #15]
    188e:	7ba1      	ldrb	r1, [r4, #14]
    1890:	7c60      	ldrb	r0, [r4, #17]
    1892:	9000      	str	r0, [sp, #0]
    1894:	480c      	ldr	r0, [pc, #48]	; (18c8 <print_network_information+0x88>)
    1896:	47a8      	blx	r5
	infoMSG("DNS Server  : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
    1898:	7d23      	ldrb	r3, [r4, #20]
    189a:	7ce2      	ldrb	r2, [r4, #19]
    189c:	7ca1      	ldrb	r1, [r4, #18]
    189e:	7d60      	ldrb	r0, [r4, #21]
    18a0:	9000      	str	r0, [sp, #0]
    18a2:	480a      	ldr	r0, [pc, #40]	; (18cc <print_network_information+0x8c>)
    18a4:	47a8      	blx	r5
    18a6:	b005      	add	sp, #20
    18a8:	bd30      	pop	{r4, r5, pc}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	20000030 	.word	0x20000030
    18b0:	0000472f 	.word	0x0000472f
    18b4:	000012ed 	.word	0x000012ed
    18b8:	0000522c 	.word	0x0000522c
    18bc:	00000239 	.word	0x00000239
    18c0:	0000525c 	.word	0x0000525c
    18c4:	00005278 	.word	0x00005278
    18c8:	00005294 	.word	0x00005294
    18cc:	000052b0 	.word	0x000052b0

000018d0 <mainTest_task>:
{
    18d0:	b570      	push	{r4, r5, r6, lr}
    18d2:	b08a      	sub	sp, #40	; 0x28
	strcpy((char*) send_dat,"<!DOCTYPE html>		<html>		<body>		<h1>This is heading 1</h1>		<h2>This is heading 2</h2>		<h3>This is heading 3</h3>		<h4>This is heading 4</h4>		<h5>This is heading 5</h5>		<h6>This is heading 6</h6>		</body>		</html>");
    18d4:	22da      	movs	r2, #218	; 0xda
    18d6:	491e      	ldr	r1, [pc, #120]	; (1950 <mainTest_task+0x80>)
    18d8:	481e      	ldr	r0, [pc, #120]	; (1954 <mainTest_task+0x84>)
    18da:	4b1f      	ldr	r3, [pc, #124]	; (1958 <mainTest_task+0x88>)
    18dc:	4798      	blx	r3
	reg_wizchip_spi_cbfunc(spiReadByte, spiWriteByte);
    18de:	491f      	ldr	r1, [pc, #124]	; (195c <mainTest_task+0x8c>)
    18e0:	481f      	ldr	r0, [pc, #124]	; (1960 <mainTest_task+0x90>)
    18e2:	4b20      	ldr	r3, [pc, #128]	; (1964 <mainTest_task+0x94>)
    18e4:	4798      	blx	r3
	reg_wizchip_cs_cbfunc(csEnable,csDisable);
    18e6:	4920      	ldr	r1, [pc, #128]	; (1968 <mainTest_task+0x98>)
    18e8:	4820      	ldr	r0, [pc, #128]	; (196c <mainTest_task+0x9c>)
    18ea:	4b21      	ldr	r3, [pc, #132]	; (1970 <mainTest_task+0xa0>)
    18ec:	4798      	blx	r3
	configure_spi_master();	
    18ee:	4b21      	ldr	r3, [pc, #132]	; (1974 <mainTest_task+0xa4>)
    18f0:	4798      	blx	r3
	W5x00Initialze();
    18f2:	4b21      	ldr	r3, [pc, #132]	; (1978 <mainTest_task+0xa8>)
    18f4:	4798      	blx	r3
	wizchip_setnetinfo(&gWIZNETINFO);
    18f6:	4c21      	ldr	r4, [pc, #132]	; (197c <mainTest_task+0xac>)
    18f8:	0020      	movs	r0, r4
    18fa:	4b21      	ldr	r3, [pc, #132]	; (1980 <mainTest_task+0xb0>)
    18fc:	4798      	blx	r3
	wizchip_getnetinfo(&info);
    18fe:	a804      	add	r0, sp, #16
    1900:	4e20      	ldr	r6, [pc, #128]	; (1984 <mainTest_task+0xb4>)
    1902:	47b0      	blx	r6
	memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
    1904:	2217      	movs	r2, #23
    1906:	2100      	movs	r1, #0
    1908:	0020      	movs	r0, r4
    190a:	4d1f      	ldr	r5, [pc, #124]	; (1988 <mainTest_task+0xb8>)
    190c:	47a8      	blx	r5
	wizchip_getnetinfo(&gWIZNETINFO);
    190e:	0020      	movs	r0, r4
    1910:	47b0      	blx	r6
	uint8_t tmpstr[6] = {0,};
    1912:	2206      	movs	r2, #6
    1914:	2100      	movs	r1, #0
    1916:	a802      	add	r0, sp, #8
    1918:	47a8      	blx	r5
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
    191a:	a902      	add	r1, sp, #8
    191c:	2008      	movs	r0, #8
    191e:	4b1b      	ldr	r3, [pc, #108]	; (198c <mainTest_task+0xbc>)
    1920:	4798      	blx	r3
	zr_12 = (uint8_t) 0x61;
    1922:	466b      	mov	r3, sp
    1924:	2261      	movs	r2, #97	; 0x61
    1926:	71da      	strb	r2, [r3, #7]
	zr_12 = "b";
    1928:	4a19      	ldr	r2, [pc, #100]	; (1990 <mainTest_task+0xc0>)
    192a:	b2d2      	uxtb	r2, r2
    192c:	71da      	strb	r2, [r3, #7]
	zr_12 = (uint8_t) "c";
    192e:	4a19      	ldr	r2, [pc, #100]	; (1994 <mainTest_task+0xc4>)
    1930:	b2d2      	uxtb	r2, r2
    1932:	71da      	strb	r2, [r3, #7]
		print_network_information();
    1934:	4e18      	ldr	r6, [pc, #96]	; (1998 <mainTest_task+0xc8>)
		WebServer(1, ethBuf1, PORT_WEBSERVER);
    1936:	4d19      	ldr	r5, [pc, #100]	; (199c <mainTest_task+0xcc>)
    1938:	4c19      	ldr	r4, [pc, #100]	; (19a0 <mainTest_task+0xd0>)
		print_network_information();
    193a:	47b0      	blx	r6
		WebServer(1, ethBuf1, PORT_WEBSERVER);
    193c:	2250      	movs	r2, #80	; 0x50
    193e:	0029      	movs	r1, r5
    1940:	2001      	movs	r0, #1
    1942:	47a0      	blx	r4
		vTaskDelay(500); // kleine Pause um nicht die ganze zeit aktiv zu warten
    1944:	20fa      	movs	r0, #250	; 0xfa
    1946:	0040      	lsls	r0, r0, #1
    1948:	4b16      	ldr	r3, [pc, #88]	; (19a4 <mainTest_task+0xd4>)
    194a:	4798      	blx	r3
    194c:	e7f5      	b.n	193a <mainTest_task+0x6a>
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	00005148 	.word	0x00005148
    1954:	20000104 	.word	0x20000104
    1958:	0000471d 	.word	0x0000471d
    195c:	000013ad 	.word	0x000013ad
    1960:	0000137d 	.word	0x0000137d
    1964:	00000dc9 	.word	0x00000dc9
    1968:	00001361 	.word	0x00001361
    196c:	00001345 	.word	0x00001345
    1970:	00000da1 	.word	0x00000da1
    1974:	000013c9 	.word	0x000013c9
    1978:	0000179d 	.word	0x0000179d
    197c:	20000030 	.word	0x20000030
    1980:	00001295 	.word	0x00001295
    1984:	000012ed 	.word	0x000012ed
    1988:	0000472f 	.word	0x0000472f
    198c:	00001155 	.word	0x00001155
    1990:	00005224 	.word	0x00005224
    1994:	00005228 	.word	0x00005228
    1998:	00001841 	.word	0x00001841
    199c:	200043e4 	.word	0x200043e4
    19a0:	00001619 	.word	0x00001619
    19a4:	00003eb1 	.word	0x00003eb1

000019a8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    19a8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    19aa:	2000      	movs	r0, #0
    19ac:	4b08      	ldr	r3, [pc, #32]	; (19d0 <delay_init+0x28>)
    19ae:	4798      	blx	r3
    19b0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    19b2:	4c08      	ldr	r4, [pc, #32]	; (19d4 <delay_init+0x2c>)
    19b4:	21fa      	movs	r1, #250	; 0xfa
    19b6:	0089      	lsls	r1, r1, #2
    19b8:	47a0      	blx	r4
    19ba:	4b07      	ldr	r3, [pc, #28]	; (19d8 <delay_init+0x30>)
    19bc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    19be:	4907      	ldr	r1, [pc, #28]	; (19dc <delay_init+0x34>)
    19c0:	0028      	movs	r0, r5
    19c2:	47a0      	blx	r4
    19c4:	4b06      	ldr	r3, [pc, #24]	; (19e0 <delay_init+0x38>)
    19c6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    19c8:	2205      	movs	r2, #5
    19ca:	4b06      	ldr	r3, [pc, #24]	; (19e4 <delay_init+0x3c>)
    19cc:	601a      	str	r2, [r3, #0]
}
    19ce:	bd70      	pop	{r4, r5, r6, pc}
    19d0:	00002c21 	.word	0x00002c21
    19d4:	00004569 	.word	0x00004569
    19d8:	20000048 	.word	0x20000048
    19dc:	000f4240 	.word	0x000f4240
    19e0:	2000004c 	.word	0x2000004c
    19e4:	e000e010 	.word	0xe000e010

000019e8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    19e8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    19ea:	4b08      	ldr	r3, [pc, #32]	; (1a0c <delay_cycles_ms+0x24>)
    19ec:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    19ee:	4a08      	ldr	r2, [pc, #32]	; (1a10 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    19f0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    19f2:	2180      	movs	r1, #128	; 0x80
    19f4:	0249      	lsls	r1, r1, #9
	while (n--) {
    19f6:	3801      	subs	r0, #1
    19f8:	d307      	bcc.n	1a0a <delay_cycles_ms+0x22>
	if (n > 0) {
    19fa:	2c00      	cmp	r4, #0
    19fc:	d0fb      	beq.n	19f6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    19fe:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1a00:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1a02:	6813      	ldr	r3, [r2, #0]
    1a04:	420b      	tst	r3, r1
    1a06:	d0fc      	beq.n	1a02 <delay_cycles_ms+0x1a>
    1a08:	e7f5      	b.n	19f6 <delay_cycles_ms+0xe>
	}
}
    1a0a:	bd30      	pop	{r4, r5, pc}
    1a0c:	20000048 	.word	0x20000048
    1a10:	e000e010 	.word	0xe000e010

00001a14 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1a14:	4b0c      	ldr	r3, [pc, #48]	; (1a48 <cpu_irq_enter_critical+0x34>)
    1a16:	681b      	ldr	r3, [r3, #0]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d106      	bne.n	1a2a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1a1c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1a20:	2b00      	cmp	r3, #0
    1a22:	d007      	beq.n	1a34 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1a24:	2200      	movs	r2, #0
    1a26:	4b09      	ldr	r3, [pc, #36]	; (1a4c <cpu_irq_enter_critical+0x38>)
    1a28:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1a2a:	4a07      	ldr	r2, [pc, #28]	; (1a48 <cpu_irq_enter_critical+0x34>)
    1a2c:	6813      	ldr	r3, [r2, #0]
    1a2e:	3301      	adds	r3, #1
    1a30:	6013      	str	r3, [r2, #0]
}
    1a32:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1a34:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1a36:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1a3a:	2200      	movs	r2, #0
    1a3c:	4b04      	ldr	r3, [pc, #16]	; (1a50 <cpu_irq_enter_critical+0x3c>)
    1a3e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1a40:	3201      	adds	r2, #1
    1a42:	4b02      	ldr	r3, [pc, #8]	; (1a4c <cpu_irq_enter_critical+0x38>)
    1a44:	701a      	strb	r2, [r3, #0]
    1a46:	e7f0      	b.n	1a2a <cpu_irq_enter_critical+0x16>
    1a48:	20000504 	.word	0x20000504
    1a4c:	20000508 	.word	0x20000508
    1a50:	20000050 	.word	0x20000050

00001a54 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1a54:	4b08      	ldr	r3, [pc, #32]	; (1a78 <cpu_irq_leave_critical+0x24>)
    1a56:	681a      	ldr	r2, [r3, #0]
    1a58:	3a01      	subs	r2, #1
    1a5a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	2b00      	cmp	r3, #0
    1a60:	d109      	bne.n	1a76 <cpu_irq_leave_critical+0x22>
    1a62:	4b06      	ldr	r3, [pc, #24]	; (1a7c <cpu_irq_leave_critical+0x28>)
    1a64:	781b      	ldrb	r3, [r3, #0]
    1a66:	2b00      	cmp	r3, #0
    1a68:	d005      	beq.n	1a76 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1a6a:	2201      	movs	r2, #1
    1a6c:	4b04      	ldr	r3, [pc, #16]	; (1a80 <cpu_irq_leave_critical+0x2c>)
    1a6e:	701a      	strb	r2, [r3, #0]
    1a70:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1a74:	b662      	cpsie	i
	}
}
    1a76:	4770      	bx	lr
    1a78:	20000504 	.word	0x20000504
    1a7c:	20000508 	.word	0x20000508
    1a80:	20000050 	.word	0x20000050

00001a84 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1a84:	b500      	push	{lr}
    1a86:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a88:	ab01      	add	r3, sp, #4
    1a8a:	2280      	movs	r2, #128	; 0x80
    1a8c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1a8e:	780a      	ldrb	r2, [r1, #0]
    1a90:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1a92:	784a      	ldrb	r2, [r1, #1]
    1a94:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1a96:	788a      	ldrb	r2, [r1, #2]
    1a98:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1a9a:	0019      	movs	r1, r3
    1a9c:	4b01      	ldr	r3, [pc, #4]	; (1aa4 <port_pin_set_config+0x20>)
    1a9e:	4798      	blx	r3
}
    1aa0:	b003      	add	sp, #12
    1aa2:	bd00      	pop	{pc}
    1aa4:	00002e31 	.word	0x00002e31

00001aa8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aaa:	46de      	mov	lr, fp
    1aac:	4657      	mov	r7, sl
    1aae:	464e      	mov	r6, r9
    1ab0:	4645      	mov	r5, r8
    1ab2:	b5e0      	push	{r5, r6, r7, lr}
    1ab4:	b087      	sub	sp, #28
    1ab6:	4680      	mov	r8, r0
    1ab8:	9104      	str	r1, [sp, #16]
    1aba:	0016      	movs	r6, r2
    1abc:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1abe:	2200      	movs	r2, #0
    1ac0:	2300      	movs	r3, #0
    1ac2:	2100      	movs	r1, #0
    1ac4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1ac6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1ac8:	2001      	movs	r0, #1
    1aca:	0021      	movs	r1, r4
    1acc:	9600      	str	r6, [sp, #0]
    1ace:	9701      	str	r7, [sp, #4]
    1ad0:	465c      	mov	r4, fp
    1ad2:	9403      	str	r4, [sp, #12]
    1ad4:	4644      	mov	r4, r8
    1ad6:	9405      	str	r4, [sp, #20]
    1ad8:	e013      	b.n	1b02 <long_division+0x5a>
    1ada:	2420      	movs	r4, #32
    1adc:	1a64      	subs	r4, r4, r1
    1ade:	0005      	movs	r5, r0
    1ae0:	40e5      	lsrs	r5, r4
    1ae2:	46a8      	mov	r8, r5
    1ae4:	e014      	b.n	1b10 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1ae6:	9c00      	ldr	r4, [sp, #0]
    1ae8:	9d01      	ldr	r5, [sp, #4]
    1aea:	1b12      	subs	r2, r2, r4
    1aec:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1aee:	465c      	mov	r4, fp
    1af0:	464d      	mov	r5, r9
    1af2:	432c      	orrs	r4, r5
    1af4:	46a3      	mov	fp, r4
    1af6:	9c03      	ldr	r4, [sp, #12]
    1af8:	4645      	mov	r5, r8
    1afa:	432c      	orrs	r4, r5
    1afc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1afe:	3901      	subs	r1, #1
    1b00:	d325      	bcc.n	1b4e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1b02:	2420      	movs	r4, #32
    1b04:	4264      	negs	r4, r4
    1b06:	190c      	adds	r4, r1, r4
    1b08:	d4e7      	bmi.n	1ada <long_division+0x32>
    1b0a:	0005      	movs	r5, r0
    1b0c:	40a5      	lsls	r5, r4
    1b0e:	46a8      	mov	r8, r5
    1b10:	0004      	movs	r4, r0
    1b12:	408c      	lsls	r4, r1
    1b14:	46a1      	mov	r9, r4
		r = r << 1;
    1b16:	1892      	adds	r2, r2, r2
    1b18:	415b      	adcs	r3, r3
    1b1a:	0014      	movs	r4, r2
    1b1c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1b1e:	9e05      	ldr	r6, [sp, #20]
    1b20:	464f      	mov	r7, r9
    1b22:	403e      	ands	r6, r7
    1b24:	46b4      	mov	ip, r6
    1b26:	9e04      	ldr	r6, [sp, #16]
    1b28:	4647      	mov	r7, r8
    1b2a:	403e      	ands	r6, r7
    1b2c:	46b2      	mov	sl, r6
    1b2e:	4666      	mov	r6, ip
    1b30:	4657      	mov	r7, sl
    1b32:	433e      	orrs	r6, r7
    1b34:	d003      	beq.n	1b3e <long_division+0x96>
			r |= 0x01;
    1b36:	0006      	movs	r6, r0
    1b38:	4326      	orrs	r6, r4
    1b3a:	0032      	movs	r2, r6
    1b3c:	002b      	movs	r3, r5
		if (r >= d) {
    1b3e:	9c00      	ldr	r4, [sp, #0]
    1b40:	9d01      	ldr	r5, [sp, #4]
    1b42:	429d      	cmp	r5, r3
    1b44:	d8db      	bhi.n	1afe <long_division+0x56>
    1b46:	d1ce      	bne.n	1ae6 <long_division+0x3e>
    1b48:	4294      	cmp	r4, r2
    1b4a:	d8d8      	bhi.n	1afe <long_division+0x56>
    1b4c:	e7cb      	b.n	1ae6 <long_division+0x3e>
    1b4e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1b50:	4658      	mov	r0, fp
    1b52:	0019      	movs	r1, r3
    1b54:	b007      	add	sp, #28
    1b56:	bc3c      	pop	{r2, r3, r4, r5}
    1b58:	4690      	mov	r8, r2
    1b5a:	4699      	mov	r9, r3
    1b5c:	46a2      	mov	sl, r4
    1b5e:	46ab      	mov	fp, r5
    1b60:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001b62 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1b62:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1b64:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b66:	2340      	movs	r3, #64	; 0x40
    1b68:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1b6a:	4281      	cmp	r1, r0
    1b6c:	d202      	bcs.n	1b74 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1b6e:	0018      	movs	r0, r3
    1b70:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1b72:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1b74:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1b76:	1c63      	adds	r3, r4, #1
    1b78:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1b7a:	4288      	cmp	r0, r1
    1b7c:	d9f9      	bls.n	1b72 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b7e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1b80:	2cff      	cmp	r4, #255	; 0xff
    1b82:	d8f4      	bhi.n	1b6e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1b84:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1b86:	2300      	movs	r3, #0
    1b88:	e7f1      	b.n	1b6e <_sercom_get_sync_baud_val+0xc>
	...

00001b8c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b8e:	b083      	sub	sp, #12
    1b90:	000f      	movs	r7, r1
    1b92:	0016      	movs	r6, r2
    1b94:	aa08      	add	r2, sp, #32
    1b96:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1b98:	0004      	movs	r4, r0
    1b9a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1b9c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1b9e:	42bc      	cmp	r4, r7
    1ba0:	d902      	bls.n	1ba8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1ba2:	0010      	movs	r0, r2
    1ba4:	b003      	add	sp, #12
    1ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d114      	bne.n	1bd6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1bac:	0002      	movs	r2, r0
    1bae:	0008      	movs	r0, r1
    1bb0:	2100      	movs	r1, #0
    1bb2:	4c19      	ldr	r4, [pc, #100]	; (1c18 <_sercom_get_async_baud_val+0x8c>)
    1bb4:	47a0      	blx	r4
    1bb6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1bb8:	003a      	movs	r2, r7
    1bba:	2300      	movs	r3, #0
    1bbc:	2000      	movs	r0, #0
    1bbe:	4c17      	ldr	r4, [pc, #92]	; (1c1c <_sercom_get_async_baud_val+0x90>)
    1bc0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1bc2:	2200      	movs	r2, #0
    1bc4:	2301      	movs	r3, #1
    1bc6:	1a12      	subs	r2, r2, r0
    1bc8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1bca:	0c12      	lsrs	r2, r2, #16
    1bcc:	041b      	lsls	r3, r3, #16
    1bce:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1bd0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1bd2:	2200      	movs	r2, #0
    1bd4:	e7e5      	b.n	1ba2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1bd6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1bd8:	2b01      	cmp	r3, #1
    1bda:	d1f9      	bne.n	1bd0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1bdc:	000a      	movs	r2, r1
    1bde:	2300      	movs	r3, #0
    1be0:	2100      	movs	r1, #0
    1be2:	4c0d      	ldr	r4, [pc, #52]	; (1c18 <_sercom_get_async_baud_val+0x8c>)
    1be4:	47a0      	blx	r4
    1be6:	0002      	movs	r2, r0
    1be8:	000b      	movs	r3, r1
    1bea:	9200      	str	r2, [sp, #0]
    1bec:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1bee:	0038      	movs	r0, r7
    1bf0:	2100      	movs	r1, #0
    1bf2:	4c0a      	ldr	r4, [pc, #40]	; (1c1c <_sercom_get_async_baud_val+0x90>)
    1bf4:	47a0      	blx	r4
    1bf6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1bf8:	2380      	movs	r3, #128	; 0x80
    1bfa:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1bfc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1bfe:	4298      	cmp	r0, r3
    1c00:	d8cf      	bhi.n	1ba2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1c02:	0f79      	lsrs	r1, r7, #29
    1c04:	00f8      	lsls	r0, r7, #3
    1c06:	9a00      	ldr	r2, [sp, #0]
    1c08:	9b01      	ldr	r3, [sp, #4]
    1c0a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1c0c:	00ea      	lsls	r2, r5, #3
    1c0e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1c10:	b2d2      	uxtb	r2, r2
    1c12:	0352      	lsls	r2, r2, #13
    1c14:	432a      	orrs	r2, r5
    1c16:	e7db      	b.n	1bd0 <_sercom_get_async_baud_val+0x44>
    1c18:	00004681 	.word	0x00004681
    1c1c:	00001aa9 	.word	0x00001aa9

00001c20 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1c20:	b510      	push	{r4, lr}
    1c22:	b082      	sub	sp, #8
    1c24:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1c26:	4b0e      	ldr	r3, [pc, #56]	; (1c60 <sercom_set_gclk_generator+0x40>)
    1c28:	781b      	ldrb	r3, [r3, #0]
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d007      	beq.n	1c3e <sercom_set_gclk_generator+0x1e>
    1c2e:	2900      	cmp	r1, #0
    1c30:	d105      	bne.n	1c3e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1c32:	4b0b      	ldr	r3, [pc, #44]	; (1c60 <sercom_set_gclk_generator+0x40>)
    1c34:	785b      	ldrb	r3, [r3, #1]
    1c36:	4283      	cmp	r3, r0
    1c38:	d010      	beq.n	1c5c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1c3a:	201d      	movs	r0, #29
    1c3c:	e00c      	b.n	1c58 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1c3e:	a901      	add	r1, sp, #4
    1c40:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1c42:	2013      	movs	r0, #19
    1c44:	4b07      	ldr	r3, [pc, #28]	; (1c64 <sercom_set_gclk_generator+0x44>)
    1c46:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1c48:	2013      	movs	r0, #19
    1c4a:	4b07      	ldr	r3, [pc, #28]	; (1c68 <sercom_set_gclk_generator+0x48>)
    1c4c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1c4e:	4b04      	ldr	r3, [pc, #16]	; (1c60 <sercom_set_gclk_generator+0x40>)
    1c50:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1c52:	2201      	movs	r2, #1
    1c54:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1c56:	2000      	movs	r0, #0
}
    1c58:	b002      	add	sp, #8
    1c5a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1c5c:	2000      	movs	r0, #0
    1c5e:	e7fb      	b.n	1c58 <sercom_set_gclk_generator+0x38>
    1c60:	2000050c 	.word	0x2000050c
    1c64:	00002d39 	.word	0x00002d39
    1c68:	00002cad 	.word	0x00002cad

00001c6c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1c6c:	4b40      	ldr	r3, [pc, #256]	; (1d70 <_sercom_get_default_pad+0x104>)
    1c6e:	4298      	cmp	r0, r3
    1c70:	d031      	beq.n	1cd6 <_sercom_get_default_pad+0x6a>
    1c72:	d90a      	bls.n	1c8a <_sercom_get_default_pad+0x1e>
    1c74:	4b3f      	ldr	r3, [pc, #252]	; (1d74 <_sercom_get_default_pad+0x108>)
    1c76:	4298      	cmp	r0, r3
    1c78:	d04d      	beq.n	1d16 <_sercom_get_default_pad+0xaa>
    1c7a:	4b3f      	ldr	r3, [pc, #252]	; (1d78 <_sercom_get_default_pad+0x10c>)
    1c7c:	4298      	cmp	r0, r3
    1c7e:	d05a      	beq.n	1d36 <_sercom_get_default_pad+0xca>
    1c80:	4b3e      	ldr	r3, [pc, #248]	; (1d7c <_sercom_get_default_pad+0x110>)
    1c82:	4298      	cmp	r0, r3
    1c84:	d037      	beq.n	1cf6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1c86:	2000      	movs	r0, #0
}
    1c88:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1c8a:	4b3d      	ldr	r3, [pc, #244]	; (1d80 <_sercom_get_default_pad+0x114>)
    1c8c:	4298      	cmp	r0, r3
    1c8e:	d00c      	beq.n	1caa <_sercom_get_default_pad+0x3e>
    1c90:	4b3c      	ldr	r3, [pc, #240]	; (1d84 <_sercom_get_default_pad+0x118>)
    1c92:	4298      	cmp	r0, r3
    1c94:	d1f7      	bne.n	1c86 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1c96:	2901      	cmp	r1, #1
    1c98:	d017      	beq.n	1cca <_sercom_get_default_pad+0x5e>
    1c9a:	2900      	cmp	r1, #0
    1c9c:	d05d      	beq.n	1d5a <_sercom_get_default_pad+0xee>
    1c9e:	2902      	cmp	r1, #2
    1ca0:	d015      	beq.n	1cce <_sercom_get_default_pad+0x62>
    1ca2:	2903      	cmp	r1, #3
    1ca4:	d015      	beq.n	1cd2 <_sercom_get_default_pad+0x66>
	return 0;
    1ca6:	2000      	movs	r0, #0
    1ca8:	e7ee      	b.n	1c88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1caa:	2901      	cmp	r1, #1
    1cac:	d007      	beq.n	1cbe <_sercom_get_default_pad+0x52>
    1cae:	2900      	cmp	r1, #0
    1cb0:	d051      	beq.n	1d56 <_sercom_get_default_pad+0xea>
    1cb2:	2902      	cmp	r1, #2
    1cb4:	d005      	beq.n	1cc2 <_sercom_get_default_pad+0x56>
    1cb6:	2903      	cmp	r1, #3
    1cb8:	d005      	beq.n	1cc6 <_sercom_get_default_pad+0x5a>
	return 0;
    1cba:	2000      	movs	r0, #0
    1cbc:	e7e4      	b.n	1c88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1cbe:	4832      	ldr	r0, [pc, #200]	; (1d88 <_sercom_get_default_pad+0x11c>)
    1cc0:	e7e2      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cc2:	4832      	ldr	r0, [pc, #200]	; (1d8c <_sercom_get_default_pad+0x120>)
    1cc4:	e7e0      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cc6:	4832      	ldr	r0, [pc, #200]	; (1d90 <_sercom_get_default_pad+0x124>)
    1cc8:	e7de      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cca:	4832      	ldr	r0, [pc, #200]	; (1d94 <_sercom_get_default_pad+0x128>)
    1ccc:	e7dc      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cce:	4832      	ldr	r0, [pc, #200]	; (1d98 <_sercom_get_default_pad+0x12c>)
    1cd0:	e7da      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cd2:	4832      	ldr	r0, [pc, #200]	; (1d9c <_sercom_get_default_pad+0x130>)
    1cd4:	e7d8      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cd6:	2901      	cmp	r1, #1
    1cd8:	d007      	beq.n	1cea <_sercom_get_default_pad+0x7e>
    1cda:	2900      	cmp	r1, #0
    1cdc:	d03f      	beq.n	1d5e <_sercom_get_default_pad+0xf2>
    1cde:	2902      	cmp	r1, #2
    1ce0:	d005      	beq.n	1cee <_sercom_get_default_pad+0x82>
    1ce2:	2903      	cmp	r1, #3
    1ce4:	d005      	beq.n	1cf2 <_sercom_get_default_pad+0x86>
	return 0;
    1ce6:	2000      	movs	r0, #0
    1ce8:	e7ce      	b.n	1c88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1cea:	482d      	ldr	r0, [pc, #180]	; (1da0 <_sercom_get_default_pad+0x134>)
    1cec:	e7cc      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cee:	482d      	ldr	r0, [pc, #180]	; (1da4 <_sercom_get_default_pad+0x138>)
    1cf0:	e7ca      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cf2:	482d      	ldr	r0, [pc, #180]	; (1da8 <_sercom_get_default_pad+0x13c>)
    1cf4:	e7c8      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1cf6:	2901      	cmp	r1, #1
    1cf8:	d007      	beq.n	1d0a <_sercom_get_default_pad+0x9e>
    1cfa:	2900      	cmp	r1, #0
    1cfc:	d031      	beq.n	1d62 <_sercom_get_default_pad+0xf6>
    1cfe:	2902      	cmp	r1, #2
    1d00:	d005      	beq.n	1d0e <_sercom_get_default_pad+0xa2>
    1d02:	2903      	cmp	r1, #3
    1d04:	d005      	beq.n	1d12 <_sercom_get_default_pad+0xa6>
	return 0;
    1d06:	2000      	movs	r0, #0
    1d08:	e7be      	b.n	1c88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d0a:	4828      	ldr	r0, [pc, #160]	; (1dac <_sercom_get_default_pad+0x140>)
    1d0c:	e7bc      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d0e:	4828      	ldr	r0, [pc, #160]	; (1db0 <_sercom_get_default_pad+0x144>)
    1d10:	e7ba      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d12:	4828      	ldr	r0, [pc, #160]	; (1db4 <_sercom_get_default_pad+0x148>)
    1d14:	e7b8      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d16:	2901      	cmp	r1, #1
    1d18:	d007      	beq.n	1d2a <_sercom_get_default_pad+0xbe>
    1d1a:	2900      	cmp	r1, #0
    1d1c:	d023      	beq.n	1d66 <_sercom_get_default_pad+0xfa>
    1d1e:	2902      	cmp	r1, #2
    1d20:	d005      	beq.n	1d2e <_sercom_get_default_pad+0xc2>
    1d22:	2903      	cmp	r1, #3
    1d24:	d005      	beq.n	1d32 <_sercom_get_default_pad+0xc6>
	return 0;
    1d26:	2000      	movs	r0, #0
    1d28:	e7ae      	b.n	1c88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d2a:	4823      	ldr	r0, [pc, #140]	; (1db8 <_sercom_get_default_pad+0x14c>)
    1d2c:	e7ac      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d2e:	4823      	ldr	r0, [pc, #140]	; (1dbc <_sercom_get_default_pad+0x150>)
    1d30:	e7aa      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d32:	4823      	ldr	r0, [pc, #140]	; (1dc0 <_sercom_get_default_pad+0x154>)
    1d34:	e7a8      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d36:	2901      	cmp	r1, #1
    1d38:	d007      	beq.n	1d4a <_sercom_get_default_pad+0xde>
    1d3a:	2900      	cmp	r1, #0
    1d3c:	d015      	beq.n	1d6a <_sercom_get_default_pad+0xfe>
    1d3e:	2902      	cmp	r1, #2
    1d40:	d005      	beq.n	1d4e <_sercom_get_default_pad+0xe2>
    1d42:	2903      	cmp	r1, #3
    1d44:	d005      	beq.n	1d52 <_sercom_get_default_pad+0xe6>
	return 0;
    1d46:	2000      	movs	r0, #0
    1d48:	e79e      	b.n	1c88 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1d4a:	481e      	ldr	r0, [pc, #120]	; (1dc4 <_sercom_get_default_pad+0x158>)
    1d4c:	e79c      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d4e:	481e      	ldr	r0, [pc, #120]	; (1dc8 <_sercom_get_default_pad+0x15c>)
    1d50:	e79a      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d52:	481e      	ldr	r0, [pc, #120]	; (1dcc <_sercom_get_default_pad+0x160>)
    1d54:	e798      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d56:	481e      	ldr	r0, [pc, #120]	; (1dd0 <_sercom_get_default_pad+0x164>)
    1d58:	e796      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d5a:	2003      	movs	r0, #3
    1d5c:	e794      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d5e:	481d      	ldr	r0, [pc, #116]	; (1dd4 <_sercom_get_default_pad+0x168>)
    1d60:	e792      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d62:	481d      	ldr	r0, [pc, #116]	; (1dd8 <_sercom_get_default_pad+0x16c>)
    1d64:	e790      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d66:	481d      	ldr	r0, [pc, #116]	; (1ddc <_sercom_get_default_pad+0x170>)
    1d68:	e78e      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d6a:	481d      	ldr	r0, [pc, #116]	; (1de0 <_sercom_get_default_pad+0x174>)
    1d6c:	e78c      	b.n	1c88 <_sercom_get_default_pad+0x1c>
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	42001000 	.word	0x42001000
    1d74:	42001800 	.word	0x42001800
    1d78:	42001c00 	.word	0x42001c00
    1d7c:	42001400 	.word	0x42001400
    1d80:	42000800 	.word	0x42000800
    1d84:	42000c00 	.word	0x42000c00
    1d88:	00050003 	.word	0x00050003
    1d8c:	00060003 	.word	0x00060003
    1d90:	00070003 	.word	0x00070003
    1d94:	00010003 	.word	0x00010003
    1d98:	001e0003 	.word	0x001e0003
    1d9c:	001f0003 	.word	0x001f0003
    1da0:	00090003 	.word	0x00090003
    1da4:	000a0003 	.word	0x000a0003
    1da8:	000b0003 	.word	0x000b0003
    1dac:	00110003 	.word	0x00110003
    1db0:	00120003 	.word	0x00120003
    1db4:	00130003 	.word	0x00130003
    1db8:	000d0003 	.word	0x000d0003
    1dbc:	000e0003 	.word	0x000e0003
    1dc0:	000f0003 	.word	0x000f0003
    1dc4:	00170003 	.word	0x00170003
    1dc8:	00180003 	.word	0x00180003
    1dcc:	00190003 	.word	0x00190003
    1dd0:	00040003 	.word	0x00040003
    1dd4:	00080003 	.word	0x00080003
    1dd8:	00100003 	.word	0x00100003
    1ddc:	000c0003 	.word	0x000c0003
    1de0:	00160003 	.word	0x00160003

00001de4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1de4:	b530      	push	{r4, r5, lr}
    1de6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1de8:	4b0b      	ldr	r3, [pc, #44]	; (1e18 <_sercom_get_sercom_inst_index+0x34>)
    1dea:	466a      	mov	r2, sp
    1dec:	cb32      	ldmia	r3!, {r1, r4, r5}
    1dee:	c232      	stmia	r2!, {r1, r4, r5}
    1df0:	cb32      	ldmia	r3!, {r1, r4, r5}
    1df2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1df4:	9b00      	ldr	r3, [sp, #0]
    1df6:	4283      	cmp	r3, r0
    1df8:	d00b      	beq.n	1e12 <_sercom_get_sercom_inst_index+0x2e>
    1dfa:	2301      	movs	r3, #1
    1dfc:	009a      	lsls	r2, r3, #2
    1dfe:	4669      	mov	r1, sp
    1e00:	5852      	ldr	r2, [r2, r1]
    1e02:	4282      	cmp	r2, r0
    1e04:	d006      	beq.n	1e14 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e06:	3301      	adds	r3, #1
    1e08:	2b06      	cmp	r3, #6
    1e0a:	d1f7      	bne.n	1dfc <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1e0c:	2000      	movs	r0, #0
}
    1e0e:	b007      	add	sp, #28
    1e10:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e12:	2300      	movs	r3, #0
			return i;
    1e14:	b2d8      	uxtb	r0, r3
    1e16:	e7fa      	b.n	1e0e <_sercom_get_sercom_inst_index+0x2a>
    1e18:	000053e0 	.word	0x000053e0

00001e1c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1e1c:	4770      	bx	lr
	...

00001e20 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1e20:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1e22:	4b0a      	ldr	r3, [pc, #40]	; (1e4c <_sercom_set_handler+0x2c>)
    1e24:	781b      	ldrb	r3, [r3, #0]
    1e26:	2b00      	cmp	r3, #0
    1e28:	d10c      	bne.n	1e44 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e2a:	4f09      	ldr	r7, [pc, #36]	; (1e50 <_sercom_set_handler+0x30>)
    1e2c:	4e09      	ldr	r6, [pc, #36]	; (1e54 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1e2e:	4d0a      	ldr	r5, [pc, #40]	; (1e58 <_sercom_set_handler+0x38>)
    1e30:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1e32:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1e34:	195a      	adds	r2, r3, r5
    1e36:	6014      	str	r4, [r2, #0]
    1e38:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e3a:	2b18      	cmp	r3, #24
    1e3c:	d1f9      	bne.n	1e32 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1e3e:	2201      	movs	r2, #1
    1e40:	4b02      	ldr	r3, [pc, #8]	; (1e4c <_sercom_set_handler+0x2c>)
    1e42:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1e44:	0080      	lsls	r0, r0, #2
    1e46:	4b02      	ldr	r3, [pc, #8]	; (1e50 <_sercom_set_handler+0x30>)
    1e48:	50c1      	str	r1, [r0, r3]
}
    1e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e4c:	2000050e 	.word	0x2000050e
    1e50:	20000510 	.word	0x20000510
    1e54:	00001e1d 	.word	0x00001e1d
    1e58:	20005424 	.word	0x20005424

00001e5c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1e5c:	b500      	push	{lr}
    1e5e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1e60:	2309      	movs	r3, #9
    1e62:	466a      	mov	r2, sp
    1e64:	7013      	strb	r3, [r2, #0]
    1e66:	3301      	adds	r3, #1
    1e68:	7053      	strb	r3, [r2, #1]
    1e6a:	3301      	adds	r3, #1
    1e6c:	7093      	strb	r3, [r2, #2]
    1e6e:	3301      	adds	r3, #1
    1e70:	70d3      	strb	r3, [r2, #3]
    1e72:	3301      	adds	r3, #1
    1e74:	7113      	strb	r3, [r2, #4]
    1e76:	3301      	adds	r3, #1
    1e78:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1e7a:	4b03      	ldr	r3, [pc, #12]	; (1e88 <_sercom_get_interrupt_vector+0x2c>)
    1e7c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1e7e:	466b      	mov	r3, sp
    1e80:	5618      	ldrsb	r0, [r3, r0]
}
    1e82:	b003      	add	sp, #12
    1e84:	bd00      	pop	{pc}
    1e86:	46c0      	nop			; (mov r8, r8)
    1e88:	00001de5 	.word	0x00001de5

00001e8c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1e8c:	b510      	push	{r4, lr}
    1e8e:	4b02      	ldr	r3, [pc, #8]	; (1e98 <SERCOM0_Handler+0xc>)
    1e90:	681b      	ldr	r3, [r3, #0]
    1e92:	2000      	movs	r0, #0
    1e94:	4798      	blx	r3
    1e96:	bd10      	pop	{r4, pc}
    1e98:	20000510 	.word	0x20000510

00001e9c <SERCOM1_Handler>:
    1e9c:	b510      	push	{r4, lr}
    1e9e:	4b02      	ldr	r3, [pc, #8]	; (1ea8 <SERCOM1_Handler+0xc>)
    1ea0:	685b      	ldr	r3, [r3, #4]
    1ea2:	2001      	movs	r0, #1
    1ea4:	4798      	blx	r3
    1ea6:	bd10      	pop	{r4, pc}
    1ea8:	20000510 	.word	0x20000510

00001eac <SERCOM2_Handler>:
    1eac:	b510      	push	{r4, lr}
    1eae:	4b02      	ldr	r3, [pc, #8]	; (1eb8 <SERCOM2_Handler+0xc>)
    1eb0:	689b      	ldr	r3, [r3, #8]
    1eb2:	2002      	movs	r0, #2
    1eb4:	4798      	blx	r3
    1eb6:	bd10      	pop	{r4, pc}
    1eb8:	20000510 	.word	0x20000510

00001ebc <SERCOM3_Handler>:
    1ebc:	b510      	push	{r4, lr}
    1ebe:	4b02      	ldr	r3, [pc, #8]	; (1ec8 <SERCOM3_Handler+0xc>)
    1ec0:	68db      	ldr	r3, [r3, #12]
    1ec2:	2003      	movs	r0, #3
    1ec4:	4798      	blx	r3
    1ec6:	bd10      	pop	{r4, pc}
    1ec8:	20000510 	.word	0x20000510

00001ecc <SERCOM4_Handler>:
    1ecc:	b510      	push	{r4, lr}
    1ece:	4b02      	ldr	r3, [pc, #8]	; (1ed8 <SERCOM4_Handler+0xc>)
    1ed0:	691b      	ldr	r3, [r3, #16]
    1ed2:	2004      	movs	r0, #4
    1ed4:	4798      	blx	r3
    1ed6:	bd10      	pop	{r4, pc}
    1ed8:	20000510 	.word	0x20000510

00001edc <SERCOM5_Handler>:
    1edc:	b510      	push	{r4, lr}
    1ede:	4b02      	ldr	r3, [pc, #8]	; (1ee8 <SERCOM5_Handler+0xc>)
    1ee0:	695b      	ldr	r3, [r3, #20]
    1ee2:	2005      	movs	r0, #5
    1ee4:	4798      	blx	r3
    1ee6:	bd10      	pop	{r4, pc}
    1ee8:	20000510 	.word	0x20000510

00001eec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    1eec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eee:	b08b      	sub	sp, #44	; 0x2c
    1ef0:	0005      	movs	r5, r0
    1ef2:	000c      	movs	r4, r1
    1ef4:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    1ef6:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1ef8:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    1efa:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    1efc:	079b      	lsls	r3, r3, #30
    1efe:	d501      	bpl.n	1f04 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    1f00:	b00b      	add	sp, #44	; 0x2c
    1f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1f04:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    1f06:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    1f08:	07db      	lsls	r3, r3, #31
    1f0a:	d4f9      	bmi.n	1f00 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1f0c:	0008      	movs	r0, r1
    1f0e:	4b5c      	ldr	r3, [pc, #368]	; (2080 <STACK_SIZE+0x80>)
    1f10:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1f12:	4a5c      	ldr	r2, [pc, #368]	; (2084 <STACK_SIZE+0x84>)
    1f14:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1f16:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1f18:	2301      	movs	r3, #1
    1f1a:	40bb      	lsls	r3, r7
    1f1c:	430b      	orrs	r3, r1
    1f1e:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    1f20:	a909      	add	r1, sp, #36	; 0x24
    1f22:	2720      	movs	r7, #32
    1f24:	5df3      	ldrb	r3, [r6, r7]
    1f26:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1f28:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1f2a:	b2c3      	uxtb	r3, r0
    1f2c:	9301      	str	r3, [sp, #4]
    1f2e:	0018      	movs	r0, r3
    1f30:	4b55      	ldr	r3, [pc, #340]	; (2088 <STACK_SIZE+0x88>)
    1f32:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1f34:	9801      	ldr	r0, [sp, #4]
    1f36:	4b55      	ldr	r3, [pc, #340]	; (208c <STACK_SIZE+0x8c>)
    1f38:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1f3a:	5df0      	ldrb	r0, [r6, r7]
    1f3c:	2100      	movs	r1, #0
    1f3e:	4b54      	ldr	r3, [pc, #336]	; (2090 <STACK_SIZE+0x90>)
    1f40:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    1f42:	7833      	ldrb	r3, [r6, #0]
    1f44:	2b01      	cmp	r3, #1
    1f46:	d038      	beq.n	1fba <spi_init+0xce>
    1f48:	002b      	movs	r3, r5
    1f4a:	330c      	adds	r3, #12
    1f4c:	0029      	movs	r1, r5
    1f4e:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    1f50:	2200      	movs	r2, #0
    1f52:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    1f54:	428b      	cmp	r3, r1
    1f56:	d1fc      	bne.n	1f52 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    1f58:	2300      	movs	r3, #0
    1f5a:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    1f5c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    1f5e:	2400      	movs	r4, #0
    1f60:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    1f62:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    1f64:	3336      	adds	r3, #54	; 0x36
    1f66:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    1f68:	3301      	adds	r3, #1
    1f6a:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    1f6c:	3301      	adds	r3, #1
    1f6e:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    1f70:	3b35      	subs	r3, #53	; 0x35
    1f72:	722b      	strb	r3, [r5, #8]
	module->locked                     = false;
    1f74:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    1f76:	6828      	ldr	r0, [r5, #0]
    1f78:	4b41      	ldr	r3, [pc, #260]	; (2080 <STACK_SIZE+0x80>)
    1f7a:	4798      	blx	r3
    1f7c:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    1f7e:	4945      	ldr	r1, [pc, #276]	; (2094 <STACK_SIZE+0x94>)
    1f80:	4b45      	ldr	r3, [pc, #276]	; (2098 <STACK_SIZE+0x98>)
    1f82:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1f84:	00bf      	lsls	r7, r7, #2
    1f86:	4b45      	ldr	r3, [pc, #276]	; (209c <STACK_SIZE+0x9c>)
    1f88:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1f8a:	682f      	ldr	r7, [r5, #0]
    1f8c:	ab04      	add	r3, sp, #16
    1f8e:	2280      	movs	r2, #128	; 0x80
    1f90:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1f92:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f94:	3a7f      	subs	r2, #127	; 0x7f
    1f96:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1f98:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    1f9a:	7833      	ldrb	r3, [r6, #0]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d102      	bne.n	1fa6 <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1fa0:	2200      	movs	r2, #0
    1fa2:	ab04      	add	r3, sp, #16
    1fa4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1fa6:	6a73      	ldr	r3, [r6, #36]	; 0x24
    1fa8:	9305      	str	r3, [sp, #20]
    1faa:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1fac:	9306      	str	r3, [sp, #24]
    1fae:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1fb0:	9307      	str	r3, [sp, #28]
    1fb2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    1fb4:	9308      	str	r3, [sp, #32]
    1fb6:	2400      	movs	r4, #0
    1fb8:	e00b      	b.n	1fd2 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    1fba:	6823      	ldr	r3, [r4, #0]
    1fbc:	220c      	movs	r2, #12
    1fbe:	4313      	orrs	r3, r2
    1fc0:	6023      	str	r3, [r4, #0]
    1fc2:	e7c1      	b.n	1f48 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1fc4:	0038      	movs	r0, r7
    1fc6:	4b36      	ldr	r3, [pc, #216]	; (20a0 <STACK_SIZE+0xa0>)
    1fc8:	4798      	blx	r3
    1fca:	e00a      	b.n	1fe2 <spi_init+0xf6>
    1fcc:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1fce:	2c04      	cmp	r4, #4
    1fd0:	d010      	beq.n	1ff4 <spi_init+0x108>
    1fd2:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1fd4:	00a3      	lsls	r3, r4, #2
    1fd6:	aa02      	add	r2, sp, #8
    1fd8:	200c      	movs	r0, #12
    1fda:	1812      	adds	r2, r2, r0
    1fdc:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    1fde:	2800      	cmp	r0, #0
    1fe0:	d0f0      	beq.n	1fc4 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    1fe2:	1c43      	adds	r3, r0, #1
    1fe4:	d0f2      	beq.n	1fcc <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1fe6:	a904      	add	r1, sp, #16
    1fe8:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1fea:	0c00      	lsrs	r0, r0, #16
    1fec:	b2c0      	uxtb	r0, r0
    1fee:	4b2d      	ldr	r3, [pc, #180]	; (20a4 <STACK_SIZE+0xa4>)
    1ff0:	4798      	blx	r3
    1ff2:	e7eb      	b.n	1fcc <spi_init+0xe0>
	module->mode             = config->mode;
    1ff4:	7833      	ldrb	r3, [r6, #0]
    1ff6:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    1ff8:	7c33      	ldrb	r3, [r6, #16]
    1ffa:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    1ffc:	7cb3      	ldrb	r3, [r6, #18]
    1ffe:	71eb      	strb	r3, [r5, #7]
	uint16_t baud = 0;
    2000:	2200      	movs	r2, #0
    2002:	ab02      	add	r3, sp, #8
    2004:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    2006:	7833      	ldrb	r3, [r6, #0]
    2008:	2b01      	cmp	r3, #1
    200a:	d022      	beq.n	2052 <STACK_SIZE+0x52>
	ctrla |= config->transfer_mode;
    200c:	6873      	ldr	r3, [r6, #4]
    200e:	68b2      	ldr	r2, [r6, #8]
    2010:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    2012:	68f2      	ldr	r2, [r6, #12]
    2014:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    2016:	7c32      	ldrb	r2, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    2018:	7c71      	ldrb	r1, [r6, #17]
    201a:	2900      	cmp	r1, #0
    201c:	d103      	bne.n	2026 <STACK_SIZE+0x26>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    201e:	4922      	ldr	r1, [pc, #136]	; (20a8 <STACK_SIZE+0xa8>)
    2020:	7889      	ldrb	r1, [r1, #2]
    2022:	0789      	lsls	r1, r1, #30
    2024:	d501      	bpl.n	202a <STACK_SIZE+0x2a>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2026:	2180      	movs	r1, #128	; 0x80
    2028:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    202a:	7cb1      	ldrb	r1, [r6, #18]
    202c:	2900      	cmp	r1, #0
    202e:	d002      	beq.n	2036 <STACK_SIZE+0x36>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2030:	2180      	movs	r1, #128	; 0x80
    2032:	0289      	lsls	r1, r1, #10
    2034:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    2036:	7cf1      	ldrb	r1, [r6, #19]
    2038:	2900      	cmp	r1, #0
    203a:	d002      	beq.n	2042 <STACK_SIZE+0x42>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    203c:	2180      	movs	r1, #128	; 0x80
    203e:	0089      	lsls	r1, r1, #2
    2040:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
    2042:	6839      	ldr	r1, [r7, #0]
    2044:	430b      	orrs	r3, r1
    2046:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    2048:	687b      	ldr	r3, [r7, #4]
    204a:	4313      	orrs	r3, r2
    204c:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    204e:	2000      	movs	r0, #0
    2050:	e756      	b.n	1f00 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2052:	6828      	ldr	r0, [r5, #0]
    2054:	4b0a      	ldr	r3, [pc, #40]	; (2080 <STACK_SIZE+0x80>)
    2056:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2058:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    205a:	b2c0      	uxtb	r0, r0
    205c:	4b13      	ldr	r3, [pc, #76]	; (20ac <STACK_SIZE+0xac>)
    205e:	4798      	blx	r3
    2060:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    2062:	ab02      	add	r3, sp, #8
    2064:	1d9a      	adds	r2, r3, #6
    2066:	6970      	ldr	r0, [r6, #20]
    2068:	4b11      	ldr	r3, [pc, #68]	; (20b0 <STACK_SIZE+0xb0>)
    206a:	4798      	blx	r3
    206c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    206e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2070:	2b00      	cmp	r3, #0
    2072:	d000      	beq.n	2076 <STACK_SIZE+0x76>
    2074:	e744      	b.n	1f00 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    2076:	ab02      	add	r3, sp, #8
    2078:	3306      	adds	r3, #6
    207a:	781b      	ldrb	r3, [r3, #0]
    207c:	733b      	strb	r3, [r7, #12]
    207e:	e7c5      	b.n	200c <STACK_SIZE+0xc>
    2080:	00001de5 	.word	0x00001de5
    2084:	40000400 	.word	0x40000400
    2088:	00002d39 	.word	0x00002d39
    208c:	00002cad 	.word	0x00002cad
    2090:	00001c21 	.word	0x00001c21
    2094:	00002209 	.word	0x00002209
    2098:	00001e21 	.word	0x00001e21
    209c:	20005424 	.word	0x20005424
    20a0:	00001c6d 	.word	0x00001c6d
    20a4:	00002e31 	.word	0x00002e31
    20a8:	41002000 	.word	0x41002000
    20ac:	00002d55 	.word	0x00002d55
    20b0:	00001b63 	.word	0x00001b63

000020b4 <spi_transceive_wait>:
 */
enum status_code spi_transceive_wait(
		struct spi_module *const module,
		uint16_t tx_data,
		uint16_t *rx_data)
{
    20b4:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);

	if (!(module->receiver_enabled)) {
    20b6:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    20b8:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    20ba:	2c00      	cmp	r4, #0
    20bc:	d101      	bne.n	20c2 <spi_transceive_wait+0xe>

	/* Read data */
	retval = spi_read(module, rx_data);

	return retval;
}
    20be:	0018      	movs	r0, r3
    20c0:	bd30      	pop	{r4, r5, pc}
	if (module->status == STATUS_BUSY) {
    20c2:	331c      	adds	r3, #28
    20c4:	5cc4      	ldrb	r4, [r0, r3]
		return STATUS_BUSY;
    20c6:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    20c8:	2c05      	cmp	r4, #5
    20ca:	d0f8      	beq.n	20be <spi_transceive_wait+0xa>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    20cc:	6804      	ldr	r4, [r0, #0]
	while (!spi_is_ready_to_write(module)) {
    20ce:	2501      	movs	r5, #1

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    20d0:	7e23      	ldrb	r3, [r4, #24]
    20d2:	422b      	tst	r3, r5
    20d4:	d0fc      	beq.n	20d0 <spi_transceive_wait+0x1c>
    20d6:	7e23      	ldrb	r3, [r4, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    20d8:	07db      	lsls	r3, r3, #31
    20da:	d502      	bpl.n	20e2 <spi_transceive_wait+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    20dc:	05c9      	lsls	r1, r1, #23
    20de:	0dc9      	lsrs	r1, r1, #23
    20e0:	62a1      	str	r1, [r4, #40]	; 0x28
	SercomSpi *const spi_module = &(module->hw->SPI);
    20e2:	6801      	ldr	r1, [r0, #0]
	while (!spi_is_ready_to_read(module)) {
    20e4:	2404      	movs	r4, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    20e6:	7e0b      	ldrb	r3, [r1, #24]
    20e8:	4223      	tst	r3, r4
    20ea:	d0fc      	beq.n	20e6 <spi_transceive_wait+0x32>
    20ec:	7e0c      	ldrb	r4, [r1, #24]
	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
		/* No data has been received, return */
		return STATUS_ERR_IO;
    20ee:	2310      	movs	r3, #16
	if (!spi_is_ready_to_read(module)) {
    20f0:	0764      	lsls	r4, r4, #29
    20f2:	d5e4      	bpl.n	20be <spi_transceive_wait+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    20f4:	8b4c      	ldrh	r4, [r1, #26]
	enum status_code retval = STATUS_OK;
    20f6:	2300      	movs	r3, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    20f8:	0764      	lsls	r4, r4, #29
    20fa:	d502      	bpl.n	2102 <spi_transceive_wait+0x4e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    20fc:	3304      	adds	r3, #4
    20fe:	834b      	strh	r3, [r1, #26]
		retval = STATUS_ERR_OVERFLOW;
    2100:	331a      	adds	r3, #26
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2102:	7980      	ldrb	r0, [r0, #6]
    2104:	2801      	cmp	r0, #1
    2106:	d003      	beq.n	2110 <spi_transceive_wait+0x5c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2108:	6a89      	ldr	r1, [r1, #40]	; 0x28
    210a:	b2c9      	uxtb	r1, r1
    210c:	8011      	strh	r1, [r2, #0]
    210e:	e7d6      	b.n	20be <spi_transceive_wait+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2110:	6a89      	ldr	r1, [r1, #40]	; 0x28
    2112:	05c9      	lsls	r1, r1, #23
    2114:	0dc9      	lsrs	r1, r1, #23
    2116:	8011      	strh	r1, [r2, #0]
    2118:	e7d1      	b.n	20be <spi_transceive_wait+0xa>
	...

0000211c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    211c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    211e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2120:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2122:	2c01      	cmp	r4, #1
    2124:	d001      	beq.n	212a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2126:	0018      	movs	r0, r3
    2128:	bd10      	pop	{r4, pc}
		if (select) {
    212a:	2a00      	cmp	r2, #0
    212c:	d058      	beq.n	21e0 <spi_select_slave+0xc4>
			if (slave->address_enabled) {
    212e:	784b      	ldrb	r3, [r1, #1]
    2130:	2b00      	cmp	r3, #0
    2132:	d044      	beq.n	21be <spi_select_slave+0xa2>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2134:	6803      	ldr	r3, [r0, #0]
    2136:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2138:	07db      	lsls	r3, r3, #31
    213a:	d410      	bmi.n	215e <spi_select_slave+0x42>
					port_pin_set_output_level(slave->ss_pin, true);
    213c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    213e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2140:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2142:	2900      	cmp	r1, #0
    2144:	d104      	bne.n	2150 <spi_select_slave+0x34>
		return &(ports[port_index]->Group[group_index]);
    2146:	0953      	lsrs	r3, r2, #5
    2148:	01db      	lsls	r3, r3, #7
    214a:	492e      	ldr	r1, [pc, #184]	; (2204 <spi_select_slave+0xe8>)
    214c:	468c      	mov	ip, r1
    214e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2150:	211f      	movs	r1, #31
    2152:	4011      	ands	r1, r2
    2154:	2201      	movs	r2, #1
    2156:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2158:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    215a:	2305      	movs	r3, #5
    215c:	e7e3      	b.n	2126 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    215e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2160:	09d4      	lsrs	r4, r2, #7
		return NULL;
    2162:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2164:	2c00      	cmp	r4, #0
    2166:	d104      	bne.n	2172 <spi_select_slave+0x56>
		return &(ports[port_index]->Group[group_index]);
    2168:	0953      	lsrs	r3, r2, #5
    216a:	01db      	lsls	r3, r3, #7
    216c:	4c25      	ldr	r4, [pc, #148]	; (2204 <spi_select_slave+0xe8>)
    216e:	46a4      	mov	ip, r4
    2170:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2172:	241f      	movs	r4, #31
    2174:	4014      	ands	r4, r2
    2176:	2201      	movs	r2, #1
    2178:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    217a:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    217c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    217e:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2180:	07d2      	lsls	r2, r2, #31
    2182:	d501      	bpl.n	2188 <spi_select_slave+0x6c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2184:	788a      	ldrb	r2, [r1, #2]
    2186:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2188:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    218a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    218c:	2a00      	cmp	r2, #0
    218e:	d1ca      	bne.n	2126 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2190:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    2192:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2194:	7e13      	ldrb	r3, [r2, #24]
    2196:	420b      	tst	r3, r1
    2198:	d0fc      	beq.n	2194 <spi_select_slave+0x78>
    219a:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    219c:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    219e:	0749      	lsls	r1, r1, #29
    21a0:	d5c1      	bpl.n	2126 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    21a2:	8b53      	ldrh	r3, [r2, #26]
    21a4:	075b      	lsls	r3, r3, #29
    21a6:	d501      	bpl.n	21ac <spi_select_slave+0x90>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    21a8:	2304      	movs	r3, #4
    21aa:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    21ac:	7983      	ldrb	r3, [r0, #6]
    21ae:	2b01      	cmp	r3, #1
    21b0:	d002      	beq.n	21b8 <spi_select_slave+0x9c>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    21b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21b4:	2300      	movs	r3, #0
    21b6:	e7b6      	b.n	2126 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    21b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21ba:	2300      	movs	r3, #0
    21bc:	e7b3      	b.n	2126 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    21be:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    21c0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    21c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21c4:	2900      	cmp	r1, #0
    21c6:	d104      	bne.n	21d2 <spi_select_slave+0xb6>
		return &(ports[port_index]->Group[group_index]);
    21c8:	0953      	lsrs	r3, r2, #5
    21ca:	01db      	lsls	r3, r3, #7
    21cc:	490d      	ldr	r1, [pc, #52]	; (2204 <spi_select_slave+0xe8>)
    21ce:	468c      	mov	ip, r1
    21d0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21d2:	211f      	movs	r1, #31
    21d4:	4011      	ands	r1, r2
    21d6:	2201      	movs	r2, #1
    21d8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    21da:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    21dc:	2300      	movs	r3, #0
    21de:	e7a2      	b.n	2126 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    21e0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    21e2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    21e4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    21e6:	2900      	cmp	r1, #0
    21e8:	d104      	bne.n	21f4 <spi_select_slave+0xd8>
		return &(ports[port_index]->Group[group_index]);
    21ea:	0953      	lsrs	r3, r2, #5
    21ec:	01db      	lsls	r3, r3, #7
    21ee:	4905      	ldr	r1, [pc, #20]	; (2204 <spi_select_slave+0xe8>)
    21f0:	468c      	mov	ip, r1
    21f2:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    21f4:	211f      	movs	r1, #31
    21f6:	4011      	ands	r1, r2
    21f8:	2201      	movs	r2, #1
    21fa:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    21fc:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    21fe:	2300      	movs	r3, #0
    2200:	e791      	b.n	2126 <spi_select_slave+0xa>
    2202:	46c0      	nop			; (mov r8, r8)
    2204:	41004400 	.word	0x41004400

00002208 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    220a:	0080      	lsls	r0, r0, #2
    220c:	4b70      	ldr	r3, [pc, #448]	; (23d0 <_spi_interrupt_handler+0x1c8>)
    220e:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2210:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    2212:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    2214:	5ce7      	ldrb	r7, [r4, r3]
    2216:	2236      	movs	r2, #54	; 0x36
    2218:	5ca2      	ldrb	r2, [r4, r2]
    221a:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    221c:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    221e:	7db5      	ldrb	r5, [r6, #22]
    2220:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    2222:	07eb      	lsls	r3, r5, #31
    2224:	d502      	bpl.n	222c <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2226:	7963      	ldrb	r3, [r4, #5]
    2228:	2b01      	cmp	r3, #1
    222a:	d01e      	beq.n	226a <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    222c:	076b      	lsls	r3, r5, #29
    222e:	d511      	bpl.n	2254 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2230:	8b73      	ldrh	r3, [r6, #26]
    2232:	075b      	lsls	r3, r3, #29
    2234:	d55a      	bpl.n	22ec <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2236:	7a23      	ldrb	r3, [r4, #8]
    2238:	2b01      	cmp	r3, #1
    223a:	d008      	beq.n	224e <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    223c:	221e      	movs	r2, #30
    223e:	2338      	movs	r3, #56	; 0x38
    2240:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2242:	3b35      	subs	r3, #53	; 0x35
    2244:	7223      	strb	r3, [r4, #8]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2246:	3302      	adds	r3, #2
    2248:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    224a:	073b      	lsls	r3, r7, #28
    224c:	d44a      	bmi.n	22e4 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    224e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2250:	2304      	movs	r3, #4
    2252:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2254:	07ab      	lsls	r3, r5, #30
    2256:	d503      	bpl.n	2260 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2258:	7963      	ldrb	r3, [r4, #5]
    225a:	2b01      	cmp	r3, #1
    225c:	d100      	bne.n	2260 <_spi_interrupt_handler+0x58>
    225e:	e097      	b.n	2390 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2260:	b26d      	sxtb	r5, r5
    2262:	2d00      	cmp	r5, #0
    2264:	da00      	bge.n	2268 <_spi_interrupt_handler+0x60>
    2266:	e0a9      	b.n	23bc <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    2268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    226a:	7a23      	ldrb	r3, [r4, #8]
		if ((module->mode == SPI_MODE_MASTER) &&
    226c:	2b00      	cmp	r3, #0
    226e:	d022      	beq.n	22b6 <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    2270:	7a23      	ldrb	r3, [r4, #8]
		|| ((module->mode == SPI_MODE_MASTER) &&
    2272:	2b00      	cmp	r3, #0
    2274:	d0da      	beq.n	222c <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2276:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2278:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    227a:	7813      	ldrb	r3, [r2, #0]
    227c:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    227e:	1c50      	adds	r0, r2, #1
    2280:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2282:	79a0      	ldrb	r0, [r4, #6]
    2284:	2801      	cmp	r0, #1
    2286:	d027      	beq.n	22d8 <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2288:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    228a:	05db      	lsls	r3, r3, #23
    228c:	0ddb      	lsrs	r3, r3, #23
    228e:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    2290:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2292:	3b01      	subs	r3, #1
    2294:	b29b      	uxth	r3, r3
    2296:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    2298:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    229a:	b29b      	uxth	r3, r3
    229c:	2b00      	cmp	r3, #0
    229e:	d1c5      	bne.n	222c <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    22a0:	3301      	adds	r3, #1
    22a2:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    22a4:	7a23      	ldrb	r3, [r4, #8]
    22a6:	2b01      	cmp	r3, #1
    22a8:	d1c0      	bne.n	222c <_spi_interrupt_handler+0x24>
    22aa:	79e3      	ldrb	r3, [r4, #7]
    22ac:	2b00      	cmp	r3, #0
    22ae:	d1bd      	bne.n	222c <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    22b0:	3302      	adds	r3, #2
    22b2:	75b3      	strb	r3, [r6, #22]
    22b4:	e7ba      	b.n	222c <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    22b6:	4b47      	ldr	r3, [pc, #284]	; (23d4 <_spi_interrupt_handler+0x1cc>)
    22b8:	881b      	ldrh	r3, [r3, #0]
    22ba:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    22bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    22be:	3b01      	subs	r3, #1
    22c0:	b29b      	uxth	r3, r3
    22c2:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    22c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    22c6:	b29b      	uxth	r3, r3
    22c8:	2b00      	cmp	r3, #0
    22ca:	d101      	bne.n	22d0 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    22cc:	3301      	adds	r3, #1
    22ce:	7533      	strb	r3, [r6, #20]
		if (0
    22d0:	7963      	ldrb	r3, [r4, #5]
    22d2:	2b01      	cmp	r3, #1
    22d4:	d0cc      	beq.n	2270 <_spi_interrupt_handler+0x68>
    22d6:	e7a9      	b.n	222c <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    22d8:	7850      	ldrb	r0, [r2, #1]
    22da:	0200      	lsls	r0, r0, #8
    22dc:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    22de:	3202      	adds	r2, #2
    22e0:	62e2      	str	r2, [r4, #44]	; 0x2c
    22e2:	e7d2      	b.n	228a <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    22e4:	0020      	movs	r0, r4
    22e6:	69a3      	ldr	r3, [r4, #24]
    22e8:	4798      	blx	r3
    22ea:	e7b0      	b.n	224e <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    22ec:	7a23      	ldrb	r3, [r4, #8]
    22ee:	2b01      	cmp	r3, #1
    22f0:	d028      	beq.n	2344 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    22f2:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    22f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22f6:	05db      	lsls	r3, r3, #23
    22f8:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    22fa:	b2da      	uxtb	r2, r3
    22fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    22fe:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    2300:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2302:	1c51      	adds	r1, r2, #1
    2304:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2306:	79a1      	ldrb	r1, [r4, #6]
    2308:	2901      	cmp	r1, #1
    230a:	d034      	beq.n	2376 <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    230c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    230e:	3b01      	subs	r3, #1
    2310:	b29b      	uxth	r3, r3
    2312:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    2314:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2316:	b29b      	uxth	r3, r3
    2318:	2b00      	cmp	r3, #0
    231a:	d000      	beq.n	231e <_spi_interrupt_handler+0x116>
    231c:	e79a      	b.n	2254 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    231e:	2200      	movs	r2, #0
    2320:	3338      	adds	r3, #56	; 0x38
    2322:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2324:	3b34      	subs	r3, #52	; 0x34
    2326:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2328:	7a23      	ldrb	r3, [r4, #8]
    232a:	2b02      	cmp	r3, #2
    232c:	d029      	beq.n	2382 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    232e:	7a23      	ldrb	r3, [r4, #8]
    2330:	2b00      	cmp	r3, #0
    2332:	d000      	beq.n	2336 <_spi_interrupt_handler+0x12e>
    2334:	e78e      	b.n	2254 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2336:	07bb      	lsls	r3, r7, #30
    2338:	d400      	bmi.n	233c <_spi_interrupt_handler+0x134>
    233a:	e78b      	b.n	2254 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    233c:	0020      	movs	r0, r4
    233e:	6923      	ldr	r3, [r4, #16]
    2340:	4798      	blx	r3
    2342:	e787      	b.n	2254 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2344:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    2346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2348:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    234a:	3b01      	subs	r3, #1
    234c:	b29b      	uxth	r3, r3
    234e:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    2350:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2352:	b29b      	uxth	r3, r3
    2354:	2b00      	cmp	r3, #0
    2356:	d000      	beq.n	235a <_spi_interrupt_handler+0x152>
    2358:	e77c      	b.n	2254 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    235a:	3304      	adds	r3, #4
    235c:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    235e:	2200      	movs	r2, #0
    2360:	3334      	adds	r3, #52	; 0x34
    2362:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    2364:	3b35      	subs	r3, #53	; 0x35
    2366:	7223      	strb	r3, [r4, #8]
					if (callback_mask &
    2368:	07fb      	lsls	r3, r7, #31
    236a:	d400      	bmi.n	236e <_spi_interrupt_handler+0x166>
    236c:	e772      	b.n	2254 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    236e:	0020      	movs	r0, r4
    2370:	68e3      	ldr	r3, [r4, #12]
    2372:	4798      	blx	r3
    2374:	e76e      	b.n	2254 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2376:	0a1b      	lsrs	r3, r3, #8
    2378:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    237a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    237c:	3301      	adds	r3, #1
    237e:	62a3      	str	r3, [r4, #40]	; 0x28
    2380:	e7c4      	b.n	230c <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2382:	077b      	lsls	r3, r7, #29
    2384:	d400      	bmi.n	2388 <_spi_interrupt_handler+0x180>
    2386:	e765      	b.n	2254 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2388:	0020      	movs	r0, r4
    238a:	6963      	ldr	r3, [r4, #20]
    238c:	4798      	blx	r3
    238e:	e761      	b.n	2254 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2390:	7a23      	ldrb	r3, [r4, #8]
		if ((module->mode == SPI_MODE_MASTER) &&
    2392:	2b01      	cmp	r3, #1
    2394:	d000      	beq.n	2398 <_spi_interrupt_handler+0x190>
    2396:	e763      	b.n	2260 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2398:	79e3      	ldrb	r3, [r4, #7]
    239a:	2b00      	cmp	r3, #0
    239c:	d000      	beq.n	23a0 <_spi_interrupt_handler+0x198>
    239e:	e75f      	b.n	2260 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    23a0:	3302      	adds	r3, #2
    23a2:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    23a4:	3301      	adds	r3, #1
    23a6:	7223      	strb	r3, [r4, #8]
			module->status = STATUS_OK;
    23a8:	2200      	movs	r2, #0
    23aa:	3335      	adds	r3, #53	; 0x35
    23ac:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    23ae:	07fb      	lsls	r3, r7, #31
    23b0:	d400      	bmi.n	23b4 <_spi_interrupt_handler+0x1ac>
    23b2:	e755      	b.n	2260 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    23b4:	0020      	movs	r0, r4
    23b6:	68e3      	ldr	r3, [r4, #12]
    23b8:	4798      	blx	r3
    23ba:	e751      	b.n	2260 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    23bc:	2380      	movs	r3, #128	; 0x80
    23be:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    23c0:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    23c2:	067b      	lsls	r3, r7, #25
    23c4:	d400      	bmi.n	23c8 <_spi_interrupt_handler+0x1c0>
    23c6:	e74f      	b.n	2268 <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    23c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    23ca:	0020      	movs	r0, r4
    23cc:	4798      	blx	r3
}
    23ce:	e74b      	b.n	2268 <_spi_interrupt_handler+0x60>
    23d0:	20005424 	.word	0x20005424
    23d4:	2000543c 	.word	0x2000543c

000023d8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    23d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23da:	46de      	mov	lr, fp
    23dc:	4657      	mov	r7, sl
    23de:	464e      	mov	r6, r9
    23e0:	4645      	mov	r5, r8
    23e2:	b5e0      	push	{r5, r6, r7, lr}
    23e4:	b091      	sub	sp, #68	; 0x44
    23e6:	0005      	movs	r5, r0
    23e8:	000c      	movs	r4, r1
    23ea:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    23ec:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    23ee:	0008      	movs	r0, r1
    23f0:	4bba      	ldr	r3, [pc, #744]	; (26dc <usart_init+0x304>)
    23f2:	4798      	blx	r3
    23f4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    23f6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    23f8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    23fa:	07db      	lsls	r3, r3, #31
    23fc:	d506      	bpl.n	240c <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    23fe:	b011      	add	sp, #68	; 0x44
    2400:	bc3c      	pop	{r2, r3, r4, r5}
    2402:	4690      	mov	r8, r2
    2404:	4699      	mov	r9, r3
    2406:	46a2      	mov	sl, r4
    2408:	46ab      	mov	fp, r5
    240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    240c:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    240e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    2410:	079b      	lsls	r3, r3, #30
    2412:	d4f4      	bmi.n	23fe <usart_init+0x26>
    2414:	49b2      	ldr	r1, [pc, #712]	; (26e0 <usart_init+0x308>)
    2416:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    2418:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    241a:	2301      	movs	r3, #1
    241c:	40bb      	lsls	r3, r7
    241e:	4303      	orrs	r3, r0
    2420:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    2422:	a90f      	add	r1, sp, #60	; 0x3c
    2424:	272d      	movs	r7, #45	; 0x2d
    2426:	5df3      	ldrb	r3, [r6, r7]
    2428:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    242a:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    242c:	b2d3      	uxtb	r3, r2
    242e:	9302      	str	r3, [sp, #8]
    2430:	0018      	movs	r0, r3
    2432:	4bac      	ldr	r3, [pc, #688]	; (26e4 <usart_init+0x30c>)
    2434:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2436:	9802      	ldr	r0, [sp, #8]
    2438:	4bab      	ldr	r3, [pc, #684]	; (26e8 <usart_init+0x310>)
    243a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    243c:	5df0      	ldrb	r0, [r6, r7]
    243e:	2100      	movs	r1, #0
    2440:	4baa      	ldr	r3, [pc, #680]	; (26ec <usart_init+0x314>)
    2442:	4798      	blx	r3
	module->character_size = config->character_size;
    2444:	7af3      	ldrb	r3, [r6, #11]
    2446:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2448:	2324      	movs	r3, #36	; 0x24
    244a:	5cf3      	ldrb	r3, [r6, r3]
    244c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    244e:	2325      	movs	r3, #37	; 0x25
    2450:	5cf3      	ldrb	r3, [r6, r3]
    2452:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2454:	7ef3      	ldrb	r3, [r6, #27]
    2456:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2458:	7f33      	ldrb	r3, [r6, #28]
    245a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    245c:	682b      	ldr	r3, [r5, #0]
    245e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2460:	0018      	movs	r0, r3
    2462:	4b9e      	ldr	r3, [pc, #632]	; (26dc <usart_init+0x304>)
    2464:	4798      	blx	r3
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2466:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    2468:	2200      	movs	r2, #0
    246a:	230e      	movs	r3, #14
    246c:	a906      	add	r1, sp, #24
    246e:	468c      	mov	ip, r1
    2470:	4463      	add	r3, ip
    2472:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2474:	8a32      	ldrh	r2, [r6, #16]
    2476:	9202      	str	r2, [sp, #8]
    2478:	2380      	movs	r3, #128	; 0x80
    247a:	01db      	lsls	r3, r3, #7
    247c:	429a      	cmp	r2, r3
    247e:	d100      	bne.n	2482 <usart_init+0xaa>
    2480:	e09a      	b.n	25b8 <usart_init+0x1e0>
    2482:	d90f      	bls.n	24a4 <usart_init+0xcc>
    2484:	23c0      	movs	r3, #192	; 0xc0
    2486:	01db      	lsls	r3, r3, #7
    2488:	9a02      	ldr	r2, [sp, #8]
    248a:	429a      	cmp	r2, r3
    248c:	d100      	bne.n	2490 <usart_init+0xb8>
    248e:	e08e      	b.n	25ae <usart_init+0x1d6>
    2490:	2380      	movs	r3, #128	; 0x80
    2492:	021b      	lsls	r3, r3, #8
    2494:	429a      	cmp	r2, r3
    2496:	d000      	beq.n	249a <usart_init+0xc2>
    2498:	e11b      	b.n	26d2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    249a:	2303      	movs	r3, #3
    249c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    249e:	2300      	movs	r3, #0
    24a0:	9307      	str	r3, [sp, #28]
    24a2:	e008      	b.n	24b6 <usart_init+0xde>
	switch (config->sample_rate) {
    24a4:	2380      	movs	r3, #128	; 0x80
    24a6:	019b      	lsls	r3, r3, #6
    24a8:	429a      	cmp	r2, r3
    24aa:	d000      	beq.n	24ae <usart_init+0xd6>
    24ac:	e111      	b.n	26d2 <usart_init+0x2fa>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    24ae:	2310      	movs	r3, #16
    24b0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    24b2:	3b0f      	subs	r3, #15
    24b4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    24b6:	6833      	ldr	r3, [r6, #0]
    24b8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    24ba:	68f3      	ldr	r3, [r6, #12]
    24bc:	469b      	mov	fp, r3
		config->sample_adjustment |
    24be:	6973      	ldr	r3, [r6, #20]
    24c0:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    24c2:	7e33      	ldrb	r3, [r6, #24]
    24c4:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    24c6:	2326      	movs	r3, #38	; 0x26
    24c8:	5cf3      	ldrb	r3, [r6, r3]
    24ca:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    24cc:	6873      	ldr	r3, [r6, #4]
    24ce:	4699      	mov	r9, r3
	switch (transfer_mode)
    24d0:	2b00      	cmp	r3, #0
    24d2:	d100      	bne.n	24d6 <usart_init+0xfe>
    24d4:	e09c      	b.n	2610 <usart_init+0x238>
    24d6:	2380      	movs	r3, #128	; 0x80
    24d8:	055b      	lsls	r3, r3, #21
    24da:	4599      	cmp	r9, r3
    24dc:	d100      	bne.n	24e0 <usart_init+0x108>
    24de:	e080      	b.n	25e2 <usart_init+0x20a>
	if(config->encoding_format_enable) {
    24e0:	7e73      	ldrb	r3, [r6, #25]
    24e2:	2b00      	cmp	r3, #0
    24e4:	d002      	beq.n	24ec <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    24e6:	7eb3      	ldrb	r3, [r6, #26]
    24e8:	4642      	mov	r2, r8
    24ea:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    24ec:	230e      	movs	r3, #14
    24ee:	aa06      	add	r2, sp, #24
    24f0:	4694      	mov	ip, r2
    24f2:	4463      	add	r3, ip
    24f4:	881b      	ldrh	r3, [r3, #0]
    24f6:	4642      	mov	r2, r8
    24f8:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    24fa:	9b05      	ldr	r3, [sp, #20]
    24fc:	465a      	mov	r2, fp
    24fe:	4313      	orrs	r3, r2
    2500:	9a03      	ldr	r2, [sp, #12]
    2502:	4313      	orrs	r3, r2
    2504:	464a      	mov	r2, r9
    2506:	4313      	orrs	r3, r2
    2508:	9f02      	ldr	r7, [sp, #8]
    250a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    250c:	9b04      	ldr	r3, [sp, #16]
    250e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    2510:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    2512:	4653      	mov	r3, sl
    2514:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    2516:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    2518:	2327      	movs	r3, #39	; 0x27
    251a:	5cf3      	ldrb	r3, [r6, r3]
    251c:	2b00      	cmp	r3, #0
    251e:	d101      	bne.n	2524 <usart_init+0x14c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2520:	3304      	adds	r3, #4
    2522:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2524:	7e73      	ldrb	r3, [r6, #25]
    2526:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2528:	7f32      	ldrb	r2, [r6, #28]
    252a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    252c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    252e:	7f72      	ldrb	r2, [r6, #29]
    2530:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2532:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2534:	2224      	movs	r2, #36	; 0x24
    2536:	5cb2      	ldrb	r2, [r6, r2]
    2538:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    253a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    253c:	2225      	movs	r2, #37	; 0x25
    253e:	5cb2      	ldrb	r2, [r6, r2]
    2540:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2542:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2544:	7ab1      	ldrb	r1, [r6, #10]
    2546:	7af2      	ldrb	r2, [r6, #11]
    2548:	4311      	orrs	r1, r2
    254a:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    254c:	8933      	ldrh	r3, [r6, #8]
    254e:	2bff      	cmp	r3, #255	; 0xff
    2550:	d100      	bne.n	2554 <usart_init+0x17c>
    2552:	e081      	b.n	2658 <usart_init+0x280>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2554:	2280      	movs	r2, #128	; 0x80
    2556:	0452      	lsls	r2, r2, #17
    2558:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    255a:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    255c:	232c      	movs	r3, #44	; 0x2c
    255e:	5cf3      	ldrb	r3, [r6, r3]
    2560:	2b00      	cmp	r3, #0
    2562:	d103      	bne.n	256c <usart_init+0x194>
    2564:	4b62      	ldr	r3, [pc, #392]	; (26f0 <usart_init+0x318>)
    2566:	789b      	ldrb	r3, [r3, #2]
    2568:	079b      	lsls	r3, r3, #30
    256a:	d501      	bpl.n	2570 <usart_init+0x198>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    256c:	2380      	movs	r3, #128	; 0x80
    256e:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2570:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2572:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2574:	2b00      	cmp	r3, #0
    2576:	d1fc      	bne.n	2572 <usart_init+0x19a>
	usart_hw->CTRLB.reg = ctrlb;
    2578:	4643      	mov	r3, r8
    257a:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    257c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    257e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2580:	2b00      	cmp	r3, #0
    2582:	d1fc      	bne.n	257e <usart_init+0x1a6>
	usart_hw->CTRLA.reg = ctrla;
    2584:	4643      	mov	r3, r8
    2586:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2588:	ab0e      	add	r3, sp, #56	; 0x38
    258a:	2280      	movs	r2, #128	; 0x80
    258c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    258e:	2200      	movs	r2, #0
    2590:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2592:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2594:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2596:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2598:	930a      	str	r3, [sp, #40]	; 0x28
    259a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    259c:	930b      	str	r3, [sp, #44]	; 0x2c
    259e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    25a0:	930c      	str	r3, [sp, #48]	; 0x30
    25a2:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    25a4:	9302      	str	r3, [sp, #8]
    25a6:	930d      	str	r3, [sp, #52]	; 0x34
    25a8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    25aa:	ae0a      	add	r6, sp, #40	; 0x28
    25ac:	e063      	b.n	2676 <usart_init+0x29e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    25ae:	2308      	movs	r3, #8
    25b0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    25b2:	3b07      	subs	r3, #7
    25b4:	9307      	str	r3, [sp, #28]
    25b6:	e77e      	b.n	24b6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    25b8:	6833      	ldr	r3, [r6, #0]
    25ba:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    25bc:	68f3      	ldr	r3, [r6, #12]
    25be:	469b      	mov	fp, r3
		config->sample_adjustment |
    25c0:	6973      	ldr	r3, [r6, #20]
    25c2:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    25c4:	7e33      	ldrb	r3, [r6, #24]
    25c6:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    25c8:	2326      	movs	r3, #38	; 0x26
    25ca:	5cf3      	ldrb	r3, [r6, r3]
    25cc:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    25ce:	6873      	ldr	r3, [r6, #4]
    25d0:	4699      	mov	r9, r3
	switch (transfer_mode)
    25d2:	2b00      	cmp	r3, #0
    25d4:	d018      	beq.n	2608 <usart_init+0x230>
    25d6:	2380      	movs	r3, #128	; 0x80
    25d8:	055b      	lsls	r3, r3, #21
    25da:	4599      	cmp	r9, r3
    25dc:	d001      	beq.n	25e2 <usart_init+0x20a>
	enum status_code status_code = STATUS_OK;
    25de:	2000      	movs	r0, #0
    25e0:	e025      	b.n	262e <usart_init+0x256>
			if (!config->use_external_clock) {
    25e2:	2327      	movs	r3, #39	; 0x27
    25e4:	5cf3      	ldrb	r3, [r6, r3]
    25e6:	2b00      	cmp	r3, #0
    25e8:	d000      	beq.n	25ec <usart_init+0x214>
    25ea:	e779      	b.n	24e0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    25ec:	6a33      	ldr	r3, [r6, #32]
    25ee:	001f      	movs	r7, r3
    25f0:	b2c0      	uxtb	r0, r0
    25f2:	4b40      	ldr	r3, [pc, #256]	; (26f4 <usart_init+0x31c>)
    25f4:	4798      	blx	r3
    25f6:	0001      	movs	r1, r0
    25f8:	220e      	movs	r2, #14
    25fa:	ab06      	add	r3, sp, #24
    25fc:	469c      	mov	ip, r3
    25fe:	4462      	add	r2, ip
    2600:	0038      	movs	r0, r7
    2602:	4b3d      	ldr	r3, [pc, #244]	; (26f8 <usart_init+0x320>)
    2604:	4798      	blx	r3
    2606:	e012      	b.n	262e <usart_init+0x256>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2608:	2308      	movs	r3, #8
    260a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    260c:	2300      	movs	r3, #0
    260e:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    2610:	2327      	movs	r3, #39	; 0x27
    2612:	5cf3      	ldrb	r3, [r6, r3]
    2614:	2b00      	cmp	r3, #0
    2616:	d00e      	beq.n	2636 <usart_init+0x25e>
				status_code =
    2618:	9b06      	ldr	r3, [sp, #24]
    261a:	9300      	str	r3, [sp, #0]
    261c:	9b07      	ldr	r3, [sp, #28]
    261e:	220e      	movs	r2, #14
    2620:	a906      	add	r1, sp, #24
    2622:	468c      	mov	ip, r1
    2624:	4462      	add	r2, ip
    2626:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2628:	6a30      	ldr	r0, [r6, #32]
    262a:	4f34      	ldr	r7, [pc, #208]	; (26fc <usart_init+0x324>)
    262c:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    262e:	2800      	cmp	r0, #0
    2630:	d000      	beq.n	2634 <usart_init+0x25c>
    2632:	e6e4      	b.n	23fe <usart_init+0x26>
    2634:	e754      	b.n	24e0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2636:	6a33      	ldr	r3, [r6, #32]
    2638:	001f      	movs	r7, r3
    263a:	b2c0      	uxtb	r0, r0
    263c:	4b2d      	ldr	r3, [pc, #180]	; (26f4 <usart_init+0x31c>)
    263e:	4798      	blx	r3
    2640:	0001      	movs	r1, r0
				status_code =
    2642:	9b06      	ldr	r3, [sp, #24]
    2644:	9300      	str	r3, [sp, #0]
    2646:	9b07      	ldr	r3, [sp, #28]
    2648:	220e      	movs	r2, #14
    264a:	a806      	add	r0, sp, #24
    264c:	4684      	mov	ip, r0
    264e:	4462      	add	r2, ip
    2650:	0038      	movs	r0, r7
    2652:	4f2a      	ldr	r7, [pc, #168]	; (26fc <usart_init+0x324>)
    2654:	47b8      	blx	r7
    2656:	e7ea      	b.n	262e <usart_init+0x256>
		if(config->lin_slave_enable) {
    2658:	7ef3      	ldrb	r3, [r6, #27]
    265a:	2b00      	cmp	r3, #0
    265c:	d100      	bne.n	2660 <usart_init+0x288>
    265e:	e77d      	b.n	255c <usart_init+0x184>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2660:	2380      	movs	r3, #128	; 0x80
    2662:	04db      	lsls	r3, r3, #19
    2664:	431f      	orrs	r7, r3
    2666:	e779      	b.n	255c <usart_init+0x184>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2668:	0020      	movs	r0, r4
    266a:	4b25      	ldr	r3, [pc, #148]	; (2700 <usart_init+0x328>)
    266c:	4798      	blx	r3
    266e:	e007      	b.n	2680 <usart_init+0x2a8>
    2670:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2672:	2f04      	cmp	r7, #4
    2674:	d00d      	beq.n	2692 <usart_init+0x2ba>
    2676:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2678:	00bb      	lsls	r3, r7, #2
    267a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    267c:	2800      	cmp	r0, #0
    267e:	d0f3      	beq.n	2668 <usart_init+0x290>
		if (current_pinmux != PINMUX_UNUSED) {
    2680:	1c43      	adds	r3, r0, #1
    2682:	d0f5      	beq.n	2670 <usart_init+0x298>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2684:	a90e      	add	r1, sp, #56	; 0x38
    2686:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2688:	0c00      	lsrs	r0, r0, #16
    268a:	b2c0      	uxtb	r0, r0
    268c:	4b1d      	ldr	r3, [pc, #116]	; (2704 <usart_init+0x32c>)
    268e:	4798      	blx	r3
    2690:	e7ee      	b.n	2670 <usart_init+0x298>
		module->callback[i]            = NULL;
    2692:	2300      	movs	r3, #0
    2694:	60eb      	str	r3, [r5, #12]
    2696:	612b      	str	r3, [r5, #16]
    2698:	616b      	str	r3, [r5, #20]
    269a:	61ab      	str	r3, [r5, #24]
    269c:	61eb      	str	r3, [r5, #28]
    269e:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    26a0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    26a2:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    26a4:	2200      	movs	r2, #0
    26a6:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    26a8:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    26aa:	3330      	adds	r3, #48	; 0x30
    26ac:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    26ae:	3301      	adds	r3, #1
    26b0:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    26b2:	3301      	adds	r3, #1
    26b4:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    26b6:	3301      	adds	r3, #1
    26b8:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    26ba:	6828      	ldr	r0, [r5, #0]
    26bc:	4b07      	ldr	r3, [pc, #28]	; (26dc <usart_init+0x304>)
    26be:	4798      	blx	r3
    26c0:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    26c2:	4911      	ldr	r1, [pc, #68]	; (2708 <usart_init+0x330>)
    26c4:	4b11      	ldr	r3, [pc, #68]	; (270c <usart_init+0x334>)
    26c6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    26c8:	00a4      	lsls	r4, r4, #2
    26ca:	4b11      	ldr	r3, [pc, #68]	; (2710 <usart_init+0x338>)
    26cc:	50e5      	str	r5, [r4, r3]
	return status_code;
    26ce:	2000      	movs	r0, #0
    26d0:	e695      	b.n	23fe <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    26d2:	2310      	movs	r3, #16
    26d4:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    26d6:	2300      	movs	r3, #0
    26d8:	9307      	str	r3, [sp, #28]
    26da:	e6ec      	b.n	24b6 <usart_init+0xde>
    26dc:	00001de5 	.word	0x00001de5
    26e0:	40000400 	.word	0x40000400
    26e4:	00002d39 	.word	0x00002d39
    26e8:	00002cad 	.word	0x00002cad
    26ec:	00001c21 	.word	0x00001c21
    26f0:	41002000 	.word	0x41002000
    26f4:	00002d55 	.word	0x00002d55
    26f8:	00001b63 	.word	0x00001b63
    26fc:	00001b8d 	.word	0x00001b8d
    2700:	00001c6d 	.word	0x00001c6d
    2704:	00002e31 	.word	0x00002e31
    2708:	0000273d 	.word	0x0000273d
    270c:	00001e21 	.word	0x00001e21
    2710:	20005424 	.word	0x20005424

00002714 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    2714:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    2716:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    2718:	2a00      	cmp	r2, #0
    271a:	d101      	bne.n	2720 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    271c:	0018      	movs	r0, r3
    271e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    2720:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    2722:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2724:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    2726:	2a00      	cmp	r2, #0
    2728:	d1f8      	bne.n	271c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    272a:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    272c:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    272e:	2102      	movs	r1, #2
    2730:	7e13      	ldrb	r3, [r2, #24]
    2732:	420b      	tst	r3, r1
    2734:	d0fc      	beq.n	2730 <usart_write_wait+0x1c>
	return STATUS_OK;
    2736:	2300      	movs	r3, #0
    2738:	e7f0      	b.n	271c <usart_write_wait+0x8>
	...

0000273c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    273e:	0080      	lsls	r0, r0, #2
    2740:	4b62      	ldr	r3, [pc, #392]	; (28cc <_usart_interrupt_handler+0x190>)
    2742:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2744:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2746:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2748:	2b00      	cmp	r3, #0
    274a:	d1fc      	bne.n	2746 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    274c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    274e:	7da6      	ldrb	r6, [r4, #22]
    2750:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2752:	2330      	movs	r3, #48	; 0x30
    2754:	5ceb      	ldrb	r3, [r5, r3]
    2756:	2231      	movs	r2, #49	; 0x31
    2758:	5caf      	ldrb	r7, [r5, r2]
    275a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    275c:	07f3      	lsls	r3, r6, #31
    275e:	d522      	bpl.n	27a6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2760:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2762:	b29b      	uxth	r3, r3
    2764:	2b00      	cmp	r3, #0
    2766:	d01c      	beq.n	27a2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2768:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    276a:	7813      	ldrb	r3, [r2, #0]
    276c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    276e:	1c51      	adds	r1, r2, #1
    2770:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2772:	7969      	ldrb	r1, [r5, #5]
    2774:	2901      	cmp	r1, #1
    2776:	d00e      	beq.n	2796 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2778:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    277a:	05db      	lsls	r3, r3, #23
    277c:	0ddb      	lsrs	r3, r3, #23
    277e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2780:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2782:	3b01      	subs	r3, #1
    2784:	b29b      	uxth	r3, r3
    2786:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2788:	2b00      	cmp	r3, #0
    278a:	d10c      	bne.n	27a6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    278c:	3301      	adds	r3, #1
    278e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2790:	3301      	adds	r3, #1
    2792:	75a3      	strb	r3, [r4, #22]
    2794:	e007      	b.n	27a6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2796:	7851      	ldrb	r1, [r2, #1]
    2798:	0209      	lsls	r1, r1, #8
    279a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    279c:	3202      	adds	r2, #2
    279e:	62aa      	str	r2, [r5, #40]	; 0x28
    27a0:	e7eb      	b.n	277a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    27a2:	2301      	movs	r3, #1
    27a4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    27a6:	07b3      	lsls	r3, r6, #30
    27a8:	d506      	bpl.n	27b8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    27aa:	2302      	movs	r3, #2
    27ac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    27ae:	2200      	movs	r2, #0
    27b0:	3331      	adds	r3, #49	; 0x31
    27b2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    27b4:	07fb      	lsls	r3, r7, #31
    27b6:	d41a      	bmi.n	27ee <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    27b8:	0773      	lsls	r3, r6, #29
    27ba:	d565      	bpl.n	2888 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    27bc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    27be:	b29b      	uxth	r3, r3
    27c0:	2b00      	cmp	r3, #0
    27c2:	d05f      	beq.n	2884 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    27c4:	8b63      	ldrh	r3, [r4, #26]
    27c6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    27c8:	071a      	lsls	r2, r3, #28
    27ca:	d414      	bmi.n	27f6 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    27cc:	223f      	movs	r2, #63	; 0x3f
    27ce:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    27d0:	2b00      	cmp	r3, #0
    27d2:	d034      	beq.n	283e <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    27d4:	079a      	lsls	r2, r3, #30
    27d6:	d511      	bpl.n	27fc <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    27d8:	221a      	movs	r2, #26
    27da:	2332      	movs	r3, #50	; 0x32
    27dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    27de:	3b30      	subs	r3, #48	; 0x30
    27e0:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    27e2:	077b      	lsls	r3, r7, #29
    27e4:	d550      	bpl.n	2888 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    27e6:	0028      	movs	r0, r5
    27e8:	696b      	ldr	r3, [r5, #20]
    27ea:	4798      	blx	r3
    27ec:	e04c      	b.n	2888 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    27ee:	0028      	movs	r0, r5
    27f0:	68eb      	ldr	r3, [r5, #12]
    27f2:	4798      	blx	r3
    27f4:	e7e0      	b.n	27b8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    27f6:	2237      	movs	r2, #55	; 0x37
    27f8:	4013      	ands	r3, r2
    27fa:	e7e9      	b.n	27d0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    27fc:	075a      	lsls	r2, r3, #29
    27fe:	d505      	bpl.n	280c <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2800:	221e      	movs	r2, #30
    2802:	2332      	movs	r3, #50	; 0x32
    2804:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2806:	3b2e      	subs	r3, #46	; 0x2e
    2808:	8363      	strh	r3, [r4, #26]
    280a:	e7ea      	b.n	27e2 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    280c:	07da      	lsls	r2, r3, #31
    280e:	d505      	bpl.n	281c <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2810:	2213      	movs	r2, #19
    2812:	2332      	movs	r3, #50	; 0x32
    2814:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2816:	3b31      	subs	r3, #49	; 0x31
    2818:	8363      	strh	r3, [r4, #26]
    281a:	e7e2      	b.n	27e2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    281c:	06da      	lsls	r2, r3, #27
    281e:	d505      	bpl.n	282c <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2820:	2242      	movs	r2, #66	; 0x42
    2822:	2332      	movs	r3, #50	; 0x32
    2824:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2826:	3b22      	subs	r3, #34	; 0x22
    2828:	8363      	strh	r3, [r4, #26]
    282a:	e7da      	b.n	27e2 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    282c:	2220      	movs	r2, #32
    282e:	421a      	tst	r2, r3
    2830:	d0d7      	beq.n	27e2 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2832:	3221      	adds	r2, #33	; 0x21
    2834:	2332      	movs	r3, #50	; 0x32
    2836:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2838:	3b12      	subs	r3, #18
    283a:	8363      	strh	r3, [r4, #26]
    283c:	e7d1      	b.n	27e2 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    283e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2840:	05db      	lsls	r3, r3, #23
    2842:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2844:	b2da      	uxtb	r2, r3
    2846:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2848:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    284a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    284c:	1c51      	adds	r1, r2, #1
    284e:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2850:	7969      	ldrb	r1, [r5, #5]
    2852:	2901      	cmp	r1, #1
    2854:	d010      	beq.n	2878 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2856:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2858:	3b01      	subs	r3, #1
    285a:	b29b      	uxth	r3, r3
    285c:	85ab      	strh	r3, [r5, #44]	; 0x2c
    285e:	2b00      	cmp	r3, #0
    2860:	d112      	bne.n	2888 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2862:	3304      	adds	r3, #4
    2864:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2866:	2200      	movs	r2, #0
    2868:	332e      	adds	r3, #46	; 0x2e
    286a:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    286c:	07bb      	lsls	r3, r7, #30
    286e:	d50b      	bpl.n	2888 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2870:	0028      	movs	r0, r5
    2872:	692b      	ldr	r3, [r5, #16]
    2874:	4798      	blx	r3
    2876:	e007      	b.n	2888 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2878:	0a1b      	lsrs	r3, r3, #8
    287a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    287c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    287e:	3301      	adds	r3, #1
    2880:	626b      	str	r3, [r5, #36]	; 0x24
    2882:	e7e8      	b.n	2856 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2884:	2304      	movs	r3, #4
    2886:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2888:	06f3      	lsls	r3, r6, #27
    288a:	d504      	bpl.n	2896 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    288c:	2310      	movs	r3, #16
    288e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2890:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2892:	06fb      	lsls	r3, r7, #27
    2894:	d40e      	bmi.n	28b4 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2896:	06b3      	lsls	r3, r6, #26
    2898:	d504      	bpl.n	28a4 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    289a:	2320      	movs	r3, #32
    289c:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    289e:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    28a0:	073b      	lsls	r3, r7, #28
    28a2:	d40b      	bmi.n	28bc <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    28a4:	0733      	lsls	r3, r6, #28
    28a6:	d504      	bpl.n	28b2 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    28a8:	2308      	movs	r3, #8
    28aa:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    28ac:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    28ae:	06bb      	lsls	r3, r7, #26
    28b0:	d408      	bmi.n	28c4 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    28b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    28b4:	0028      	movs	r0, r5
    28b6:	69eb      	ldr	r3, [r5, #28]
    28b8:	4798      	blx	r3
    28ba:	e7ec      	b.n	2896 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    28bc:	0028      	movs	r0, r5
    28be:	69ab      	ldr	r3, [r5, #24]
    28c0:	4798      	blx	r3
    28c2:	e7ef      	b.n	28a4 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    28c4:	6a2b      	ldr	r3, [r5, #32]
    28c6:	0028      	movs	r0, r5
    28c8:	4798      	blx	r3
}
    28ca:	e7f2      	b.n	28b2 <_usart_interrupt_handler+0x176>
    28cc:	20005424 	.word	0x20005424

000028d0 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    28d0:	b510      	push	{r4, lr}
	switch (clock_source) {
    28d2:	2808      	cmp	r0, #8
    28d4:	d803      	bhi.n	28de <system_clock_source_get_hz+0xe>
    28d6:	0080      	lsls	r0, r0, #2
    28d8:	4b1c      	ldr	r3, [pc, #112]	; (294c <system_clock_source_get_hz+0x7c>)
    28da:	581b      	ldr	r3, [r3, r0]
    28dc:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    28de:	2000      	movs	r0, #0
    28e0:	e032      	b.n	2948 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    28e2:	4b1b      	ldr	r3, [pc, #108]	; (2950 <system_clock_source_get_hz+0x80>)
    28e4:	6918      	ldr	r0, [r3, #16]
    28e6:	e02f      	b.n	2948 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    28e8:	4b1a      	ldr	r3, [pc, #104]	; (2954 <system_clock_source_get_hz+0x84>)
    28ea:	6a1b      	ldr	r3, [r3, #32]
    28ec:	059b      	lsls	r3, r3, #22
    28ee:	0f9b      	lsrs	r3, r3, #30
    28f0:	4819      	ldr	r0, [pc, #100]	; (2958 <system_clock_source_get_hz+0x88>)
    28f2:	40d8      	lsrs	r0, r3
    28f4:	e028      	b.n	2948 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    28f6:	4b16      	ldr	r3, [pc, #88]	; (2950 <system_clock_source_get_hz+0x80>)
    28f8:	6958      	ldr	r0, [r3, #20]
    28fa:	e025      	b.n	2948 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    28fc:	4b14      	ldr	r3, [pc, #80]	; (2950 <system_clock_source_get_hz+0x80>)
    28fe:	681b      	ldr	r3, [r3, #0]
			return 0;
    2900:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2902:	079b      	lsls	r3, r3, #30
    2904:	d520      	bpl.n	2948 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2906:	4913      	ldr	r1, [pc, #76]	; (2954 <system_clock_source_get_hz+0x84>)
    2908:	2210      	movs	r2, #16
    290a:	68cb      	ldr	r3, [r1, #12]
    290c:	421a      	tst	r2, r3
    290e:	d0fc      	beq.n	290a <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2910:	4b0f      	ldr	r3, [pc, #60]	; (2950 <system_clock_source_get_hz+0x80>)
    2912:	681a      	ldr	r2, [r3, #0]
    2914:	2324      	movs	r3, #36	; 0x24
    2916:	4013      	ands	r3, r2
    2918:	2b04      	cmp	r3, #4
    291a:	d001      	beq.n	2920 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    291c:	480f      	ldr	r0, [pc, #60]	; (295c <system_clock_source_get_hz+0x8c>)
    291e:	e013      	b.n	2948 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2920:	2000      	movs	r0, #0
    2922:	4b0f      	ldr	r3, [pc, #60]	; (2960 <system_clock_source_get_hz+0x90>)
    2924:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2926:	4b0a      	ldr	r3, [pc, #40]	; (2950 <system_clock_source_get_hz+0x80>)
    2928:	689b      	ldr	r3, [r3, #8]
    292a:	041b      	lsls	r3, r3, #16
    292c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    292e:	4358      	muls	r0, r3
    2930:	e00a      	b.n	2948 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2932:	2350      	movs	r3, #80	; 0x50
    2934:	4a07      	ldr	r2, [pc, #28]	; (2954 <system_clock_source_get_hz+0x84>)
    2936:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2938:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    293a:	075b      	lsls	r3, r3, #29
    293c:	d504      	bpl.n	2948 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    293e:	4b04      	ldr	r3, [pc, #16]	; (2950 <system_clock_source_get_hz+0x80>)
    2940:	68d8      	ldr	r0, [r3, #12]
    2942:	e001      	b.n	2948 <system_clock_source_get_hz+0x78>
		return 32768UL;
    2944:	2080      	movs	r0, #128	; 0x80
    2946:	0200      	lsls	r0, r0, #8
	}
}
    2948:	bd10      	pop	{r4, pc}
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	000053f8 	.word	0x000053f8
    2950:	20000528 	.word	0x20000528
    2954:	40000800 	.word	0x40000800
    2958:	007a1200 	.word	0x007a1200
    295c:	02dc6c00 	.word	0x02dc6c00
    2960:	00002d55 	.word	0x00002d55

00002964 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2964:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2966:	490c      	ldr	r1, [pc, #48]	; (2998 <system_clock_source_osc8m_set_config+0x34>)
    2968:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    296a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    296c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    296e:	7840      	ldrb	r0, [r0, #1]
    2970:	2201      	movs	r2, #1
    2972:	4010      	ands	r0, r2
    2974:	0180      	lsls	r0, r0, #6
    2976:	2640      	movs	r6, #64	; 0x40
    2978:	43b3      	bics	r3, r6
    297a:	4303      	orrs	r3, r0
    297c:	402a      	ands	r2, r5
    297e:	01d2      	lsls	r2, r2, #7
    2980:	2080      	movs	r0, #128	; 0x80
    2982:	4383      	bics	r3, r0
    2984:	4313      	orrs	r3, r2
    2986:	2203      	movs	r2, #3
    2988:	4022      	ands	r2, r4
    298a:	0212      	lsls	r2, r2, #8
    298c:	4803      	ldr	r0, [pc, #12]	; (299c <system_clock_source_osc8m_set_config+0x38>)
    298e:	4003      	ands	r3, r0
    2990:	4313      	orrs	r3, r2
    2992:	620b      	str	r3, [r1, #32]
}
    2994:	bd70      	pop	{r4, r5, r6, pc}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	40000800 	.word	0x40000800
    299c:	fffffcff 	.word	0xfffffcff

000029a0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    29a0:	2808      	cmp	r0, #8
    29a2:	d803      	bhi.n	29ac <system_clock_source_enable+0xc>
    29a4:	0080      	lsls	r0, r0, #2
    29a6:	4b25      	ldr	r3, [pc, #148]	; (2a3c <system_clock_source_enable+0x9c>)
    29a8:	581b      	ldr	r3, [r3, r0]
    29aa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    29ac:	2017      	movs	r0, #23
    29ae:	e044      	b.n	2a3a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    29b0:	4a23      	ldr	r2, [pc, #140]	; (2a40 <system_clock_source_enable+0xa0>)
    29b2:	6a13      	ldr	r3, [r2, #32]
    29b4:	2102      	movs	r1, #2
    29b6:	430b      	orrs	r3, r1
    29b8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    29ba:	2000      	movs	r0, #0
    29bc:	e03d      	b.n	2a3a <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    29be:	4a20      	ldr	r2, [pc, #128]	; (2a40 <system_clock_source_enable+0xa0>)
    29c0:	6993      	ldr	r3, [r2, #24]
    29c2:	2102      	movs	r1, #2
    29c4:	430b      	orrs	r3, r1
    29c6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    29c8:	2000      	movs	r0, #0
		break;
    29ca:	e036      	b.n	2a3a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    29cc:	4a1c      	ldr	r2, [pc, #112]	; (2a40 <system_clock_source_enable+0xa0>)
    29ce:	8a13      	ldrh	r3, [r2, #16]
    29d0:	2102      	movs	r1, #2
    29d2:	430b      	orrs	r3, r1
    29d4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    29d6:	2000      	movs	r0, #0
		break;
    29d8:	e02f      	b.n	2a3a <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    29da:	4a19      	ldr	r2, [pc, #100]	; (2a40 <system_clock_source_enable+0xa0>)
    29dc:	8a93      	ldrh	r3, [r2, #20]
    29de:	2102      	movs	r1, #2
    29e0:	430b      	orrs	r3, r1
    29e2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    29e4:	2000      	movs	r0, #0
		break;
    29e6:	e028      	b.n	2a3a <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    29e8:	4916      	ldr	r1, [pc, #88]	; (2a44 <system_clock_source_enable+0xa4>)
    29ea:	680b      	ldr	r3, [r1, #0]
    29ec:	2202      	movs	r2, #2
    29ee:	4313      	orrs	r3, r2
    29f0:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    29f2:	4b13      	ldr	r3, [pc, #76]	; (2a40 <system_clock_source_enable+0xa0>)
    29f4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    29f6:	0019      	movs	r1, r3
    29f8:	320e      	adds	r2, #14
    29fa:	68cb      	ldr	r3, [r1, #12]
    29fc:	421a      	tst	r2, r3
    29fe:	d0fc      	beq.n	29fa <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2a00:	4a10      	ldr	r2, [pc, #64]	; (2a44 <system_clock_source_enable+0xa4>)
    2a02:	6891      	ldr	r1, [r2, #8]
    2a04:	4b0e      	ldr	r3, [pc, #56]	; (2a40 <system_clock_source_enable+0xa0>)
    2a06:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2a08:	6852      	ldr	r2, [r2, #4]
    2a0a:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2a0c:	2200      	movs	r2, #0
    2a0e:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2a10:	0019      	movs	r1, r3
    2a12:	3210      	adds	r2, #16
    2a14:	68cb      	ldr	r3, [r1, #12]
    2a16:	421a      	tst	r2, r3
    2a18:	d0fc      	beq.n	2a14 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2a1a:	4b0a      	ldr	r3, [pc, #40]	; (2a44 <system_clock_source_enable+0xa4>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	b29b      	uxth	r3, r3
    2a20:	4a07      	ldr	r2, [pc, #28]	; (2a40 <system_clock_source_enable+0xa0>)
    2a22:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    2a24:	2000      	movs	r0, #0
    2a26:	e008      	b.n	2a3a <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    2a28:	4905      	ldr	r1, [pc, #20]	; (2a40 <system_clock_source_enable+0xa0>)
    2a2a:	2244      	movs	r2, #68	; 0x44
    2a2c:	5c8b      	ldrb	r3, [r1, r2]
    2a2e:	2002      	movs	r0, #2
    2a30:	4303      	orrs	r3, r0
    2a32:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2a34:	2000      	movs	r0, #0
		break;
    2a36:	e000      	b.n	2a3a <system_clock_source_enable+0x9a>
		return STATUS_OK;
    2a38:	2000      	movs	r0, #0
}
    2a3a:	4770      	bx	lr
    2a3c:	0000541c 	.word	0x0000541c
    2a40:	40000800 	.word	0x40000800
    2a44:	20000528 	.word	0x20000528

00002a48 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a4a:	46c6      	mov	lr, r8
    2a4c:	b500      	push	{lr}
    2a4e:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    2a50:	22c2      	movs	r2, #194	; 0xc2
    2a52:	00d2      	lsls	r2, r2, #3
    2a54:	4b21      	ldr	r3, [pc, #132]	; (2adc <system_clock_init+0x94>)
    2a56:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2a58:	4a21      	ldr	r2, [pc, #132]	; (2ae0 <system_clock_init+0x98>)
    2a5a:	6853      	ldr	r3, [r2, #4]
    2a5c:	211e      	movs	r1, #30
    2a5e:	438b      	bics	r3, r1
    2a60:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    2a62:	2301      	movs	r3, #1
    2a64:	466a      	mov	r2, sp
    2a66:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2a68:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    2a6a:	4d1e      	ldr	r5, [pc, #120]	; (2ae4 <system_clock_init+0x9c>)
    2a6c:	b2e0      	uxtb	r0, r4
    2a6e:	4669      	mov	r1, sp
    2a70:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    2a72:	3401      	adds	r4, #1
    2a74:	2c25      	cmp	r4, #37	; 0x25
    2a76:	d1f9      	bne.n	2a6c <system_clock_init+0x24>
	config->run_in_standby  = false;
    2a78:	a803      	add	r0, sp, #12
    2a7a:	2400      	movs	r4, #0
    2a7c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    2a7e:	2301      	movs	r3, #1
    2a80:	4698      	mov	r8, r3
    2a82:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    2a84:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    2a86:	4b18      	ldr	r3, [pc, #96]	; (2ae8 <system_clock_init+0xa0>)
    2a88:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    2a8a:	2006      	movs	r0, #6
    2a8c:	4b17      	ldr	r3, [pc, #92]	; (2aec <system_clock_init+0xa4>)
    2a8e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2a90:	4b17      	ldr	r3, [pc, #92]	; (2af0 <system_clock_init+0xa8>)
    2a92:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    2a94:	466b      	mov	r3, sp
    2a96:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30 || SAMR34 || SAMR35 || (WLR089)
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2a98:	2706      	movs	r7, #6
    2a9a:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    2a9c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2a9e:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2aa0:	2310      	movs	r3, #16
    2aa2:	9301      	str	r3, [sp, #4]
    2aa4:	4669      	mov	r1, sp
    2aa6:	2003      	movs	r0, #3
    2aa8:	4e12      	ldr	r6, [pc, #72]	; (2af4 <system_clock_init+0xac>)
    2aaa:	47b0      	blx	r6
    2aac:	2003      	movs	r0, #3
    2aae:	4d12      	ldr	r5, [pc, #72]	; (2af8 <system_clock_init+0xb0>)
    2ab0:	47a8      	blx	r5
	PM->CPUSEL.reg = (uint32_t)divider;
    2ab2:	4b12      	ldr	r3, [pc, #72]	; (2afc <system_clock_init+0xb4>)
    2ab4:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    2ab6:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    2ab8:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    2aba:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    2abc:	4643      	mov	r3, r8
    2abe:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    2ac0:	466b      	mov	r3, sp
    2ac2:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    2ac4:	701f      	strb	r7, [r3, #0]
	config->run_in_standby     = false;
    2ac6:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    2ac8:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    2aca:	4669      	mov	r1, sp
    2acc:	2000      	movs	r0, #0
    2ace:	47b0      	blx	r6
    2ad0:	2000      	movs	r0, #0
    2ad2:	47a8      	blx	r5
#endif
}
    2ad4:	b004      	add	sp, #16
    2ad6:	bc04      	pop	{r2}
    2ad8:	4690      	mov	r8, r2
    2ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2adc:	40000800 	.word	0x40000800
    2ae0:	41004000 	.word	0x41004000
    2ae4:	00002d39 	.word	0x00002d39
    2ae8:	00002965 	.word	0x00002965
    2aec:	000029a1 	.word	0x000029a1
    2af0:	00002b01 	.word	0x00002b01
    2af4:	00002b25 	.word	0x00002b25
    2af8:	00002bdd 	.word	0x00002bdd
    2afc:	40000400 	.word	0x40000400

00002b00 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    2b00:	4a06      	ldr	r2, [pc, #24]	; (2b1c <system_gclk_init+0x1c>)
    2b02:	6993      	ldr	r3, [r2, #24]
    2b04:	2108      	movs	r1, #8
    2b06:	430b      	orrs	r3, r1
    2b08:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    2b0a:	2201      	movs	r2, #1
    2b0c:	4b04      	ldr	r3, [pc, #16]	; (2b20 <system_gclk_init+0x20>)
    2b0e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    2b10:	0019      	movs	r1, r3
    2b12:	780b      	ldrb	r3, [r1, #0]
    2b14:	4213      	tst	r3, r2
    2b16:	d1fc      	bne.n	2b12 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2b18:	4770      	bx	lr
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	40000400 	.word	0x40000400
    2b20:	40000c00 	.word	0x40000c00

00002b24 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2b24:	b570      	push	{r4, r5, r6, lr}
    2b26:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    2b28:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2b2a:	780d      	ldrb	r5, [r1, #0]
    2b2c:	022d      	lsls	r5, r5, #8
    2b2e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    2b30:	784b      	ldrb	r3, [r1, #1]
    2b32:	2b00      	cmp	r3, #0
    2b34:	d002      	beq.n	2b3c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2b36:	2380      	movs	r3, #128	; 0x80
    2b38:	02db      	lsls	r3, r3, #11
    2b3a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2b3c:	7a4b      	ldrb	r3, [r1, #9]
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d002      	beq.n	2b48 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    2b42:	2380      	movs	r3, #128	; 0x80
    2b44:	031b      	lsls	r3, r3, #12
    2b46:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2b48:	6848      	ldr	r0, [r1, #4]
    2b4a:	2801      	cmp	r0, #1
    2b4c:	d910      	bls.n	2b70 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2b4e:	1e43      	subs	r3, r0, #1
    2b50:	4218      	tst	r0, r3
    2b52:	d134      	bne.n	2bbe <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    2b54:	2802      	cmp	r0, #2
    2b56:	d930      	bls.n	2bba <system_gclk_gen_set_config+0x96>
    2b58:	2302      	movs	r3, #2
    2b5a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2b5c:	3201      	adds	r2, #1
						mask <<= 1) {
    2b5e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    2b60:	4298      	cmp	r0, r3
    2b62:	d8fb      	bhi.n	2b5c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    2b64:	0212      	lsls	r2, r2, #8
    2b66:	4332      	orrs	r2, r6
    2b68:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2b6a:	2380      	movs	r3, #128	; 0x80
    2b6c:	035b      	lsls	r3, r3, #13
    2b6e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2b70:	7a0b      	ldrb	r3, [r1, #8]
    2b72:	2b00      	cmp	r3, #0
    2b74:	d002      	beq.n	2b7c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    2b76:	2380      	movs	r3, #128	; 0x80
    2b78:	039b      	lsls	r3, r3, #14
    2b7a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b7c:	4a13      	ldr	r2, [pc, #76]	; (2bcc <system_gclk_gen_set_config+0xa8>)
    2b7e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    2b80:	b25b      	sxtb	r3, r3
    2b82:	2b00      	cmp	r3, #0
    2b84:	dbfb      	blt.n	2b7e <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    2b86:	4b12      	ldr	r3, [pc, #72]	; (2bd0 <system_gclk_gen_set_config+0xac>)
    2b88:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2b8a:	4b12      	ldr	r3, [pc, #72]	; (2bd4 <system_gclk_gen_set_config+0xb0>)
    2b8c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b8e:	4a0f      	ldr	r2, [pc, #60]	; (2bcc <system_gclk_gen_set_config+0xa8>)
    2b90:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    2b92:	b25b      	sxtb	r3, r3
    2b94:	2b00      	cmp	r3, #0
    2b96:	dbfb      	blt.n	2b90 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    2b98:	4b0c      	ldr	r3, [pc, #48]	; (2bcc <system_gclk_gen_set_config+0xa8>)
    2b9a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2b9c:	001a      	movs	r2, r3
    2b9e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    2ba0:	b25b      	sxtb	r3, r3
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	dbfb      	blt.n	2b9e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    2ba6:	4a09      	ldr	r2, [pc, #36]	; (2bcc <system_gclk_gen_set_config+0xa8>)
    2ba8:	6853      	ldr	r3, [r2, #4]
    2baa:	2180      	movs	r1, #128	; 0x80
    2bac:	0249      	lsls	r1, r1, #9
    2bae:	400b      	ands	r3, r1
    2bb0:	431d      	orrs	r5, r3
    2bb2:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    2bb4:	4b08      	ldr	r3, [pc, #32]	; (2bd8 <system_gclk_gen_set_config+0xb4>)
    2bb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2bb8:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    2bba:	2200      	movs	r2, #0
    2bbc:	e7d2      	b.n	2b64 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    2bbe:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    2bc0:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    2bc2:	2380      	movs	r3, #128	; 0x80
    2bc4:	029b      	lsls	r3, r3, #10
    2bc6:	431d      	orrs	r5, r3
    2bc8:	e7d2      	b.n	2b70 <system_gclk_gen_set_config+0x4c>
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	40000c00 	.word	0x40000c00
    2bd0:	00001a15 	.word	0x00001a15
    2bd4:	40000c08 	.word	0x40000c08
    2bd8:	00001a55 	.word	0x00001a55

00002bdc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2bdc:	b510      	push	{r4, lr}
    2bde:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2be0:	4a0b      	ldr	r2, [pc, #44]	; (2c10 <system_gclk_gen_enable+0x34>)
    2be2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2be4:	b25b      	sxtb	r3, r3
    2be6:	2b00      	cmp	r3, #0
    2be8:	dbfb      	blt.n	2be2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    2bea:	4b0a      	ldr	r3, [pc, #40]	; (2c14 <system_gclk_gen_enable+0x38>)
    2bec:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2bee:	4b0a      	ldr	r3, [pc, #40]	; (2c18 <system_gclk_gen_enable+0x3c>)
    2bf0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2bf2:	4a07      	ldr	r2, [pc, #28]	; (2c10 <system_gclk_gen_enable+0x34>)
    2bf4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2bf6:	b25b      	sxtb	r3, r3
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	dbfb      	blt.n	2bf4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    2bfc:	4a04      	ldr	r2, [pc, #16]	; (2c10 <system_gclk_gen_enable+0x34>)
    2bfe:	6851      	ldr	r1, [r2, #4]
    2c00:	2380      	movs	r3, #128	; 0x80
    2c02:	025b      	lsls	r3, r3, #9
    2c04:	430b      	orrs	r3, r1
    2c06:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    2c08:	4b04      	ldr	r3, [pc, #16]	; (2c1c <system_gclk_gen_enable+0x40>)
    2c0a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2c0c:	bd10      	pop	{r4, pc}
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	40000c00 	.word	0x40000c00
    2c14:	00001a15 	.word	0x00001a15
    2c18:	40000c04 	.word	0x40000c04
    2c1c:	00001a55 	.word	0x00001a55

00002c20 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2c20:	b570      	push	{r4, r5, r6, lr}
    2c22:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c24:	4a1a      	ldr	r2, [pc, #104]	; (2c90 <system_gclk_gen_get_hz+0x70>)
    2c26:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c28:	b25b      	sxtb	r3, r3
    2c2a:	2b00      	cmp	r3, #0
    2c2c:	dbfb      	blt.n	2c26 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    2c2e:	4b19      	ldr	r3, [pc, #100]	; (2c94 <system_gclk_gen_get_hz+0x74>)
    2c30:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2c32:	4b19      	ldr	r3, [pc, #100]	; (2c98 <system_gclk_gen_get_hz+0x78>)
    2c34:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c36:	4a16      	ldr	r2, [pc, #88]	; (2c90 <system_gclk_gen_get_hz+0x70>)
    2c38:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c3a:	b25b      	sxtb	r3, r3
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	dbfb      	blt.n	2c38 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    2c40:	4e13      	ldr	r6, [pc, #76]	; (2c90 <system_gclk_gen_get_hz+0x70>)
    2c42:	6870      	ldr	r0, [r6, #4]
    2c44:	04c0      	lsls	r0, r0, #19
    2c46:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2c48:	4b14      	ldr	r3, [pc, #80]	; (2c9c <system_gclk_gen_get_hz+0x7c>)
    2c4a:	4798      	blx	r3
    2c4c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    2c4e:	4b12      	ldr	r3, [pc, #72]	; (2c98 <system_gclk_gen_get_hz+0x78>)
    2c50:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    2c52:	6876      	ldr	r6, [r6, #4]
    2c54:	02f6      	lsls	r6, r6, #11
    2c56:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    2c58:	4b11      	ldr	r3, [pc, #68]	; (2ca0 <system_gclk_gen_get_hz+0x80>)
    2c5a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    2c5c:	4a0c      	ldr	r2, [pc, #48]	; (2c90 <system_gclk_gen_get_hz+0x70>)
    2c5e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    2c60:	b25b      	sxtb	r3, r3
    2c62:	2b00      	cmp	r3, #0
    2c64:	dbfb      	blt.n	2c5e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    2c66:	4b0a      	ldr	r3, [pc, #40]	; (2c90 <system_gclk_gen_get_hz+0x70>)
    2c68:	689c      	ldr	r4, [r3, #8]
    2c6a:	0224      	lsls	r4, r4, #8
    2c6c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2c6e:	4b0d      	ldr	r3, [pc, #52]	; (2ca4 <system_gclk_gen_get_hz+0x84>)
    2c70:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2c72:	2e00      	cmp	r6, #0
    2c74:	d107      	bne.n	2c86 <system_gclk_gen_get_hz+0x66>
    2c76:	2c01      	cmp	r4, #1
    2c78:	d907      	bls.n	2c8a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    2c7a:	0021      	movs	r1, r4
    2c7c:	0028      	movs	r0, r5
    2c7e:	4b0a      	ldr	r3, [pc, #40]	; (2ca8 <system_gclk_gen_get_hz+0x88>)
    2c80:	4798      	blx	r3
    2c82:	0005      	movs	r5, r0
    2c84:	e001      	b.n	2c8a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    2c86:	3401      	adds	r4, #1
    2c88:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    2c8a:	0028      	movs	r0, r5
    2c8c:	bd70      	pop	{r4, r5, r6, pc}
    2c8e:	46c0      	nop			; (mov r8, r8)
    2c90:	40000c00 	.word	0x40000c00
    2c94:	00001a15 	.word	0x00001a15
    2c98:	40000c04 	.word	0x40000c04
    2c9c:	000028d1 	.word	0x000028d1
    2ca0:	40000c08 	.word	0x40000c08
    2ca4:	00001a55 	.word	0x00001a55
    2ca8:	00004569 	.word	0x00004569

00002cac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    2cac:	b510      	push	{r4, lr}
    2cae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2cb0:	4b06      	ldr	r3, [pc, #24]	; (2ccc <system_gclk_chan_enable+0x20>)
    2cb2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2cb4:	4b06      	ldr	r3, [pc, #24]	; (2cd0 <system_gclk_chan_enable+0x24>)
    2cb6:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    2cb8:	4a06      	ldr	r2, [pc, #24]	; (2cd4 <system_gclk_chan_enable+0x28>)
    2cba:	8853      	ldrh	r3, [r2, #2]
    2cbc:	2180      	movs	r1, #128	; 0x80
    2cbe:	01c9      	lsls	r1, r1, #7
    2cc0:	430b      	orrs	r3, r1
    2cc2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    2cc4:	4b04      	ldr	r3, [pc, #16]	; (2cd8 <system_gclk_chan_enable+0x2c>)
    2cc6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2cc8:	bd10      	pop	{r4, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	00001a15 	.word	0x00001a15
    2cd0:	40000c02 	.word	0x40000c02
    2cd4:	40000c00 	.word	0x40000c00
    2cd8:	00001a55 	.word	0x00001a55

00002cdc <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    2cdc:	b510      	push	{r4, lr}
    2cde:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2ce0:	4b0f      	ldr	r3, [pc, #60]	; (2d20 <system_gclk_chan_disable+0x44>)
    2ce2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2ce4:	4b0f      	ldr	r3, [pc, #60]	; (2d24 <system_gclk_chan_disable+0x48>)
    2ce6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    2ce8:	4a0f      	ldr	r2, [pc, #60]	; (2d28 <system_gclk_chan_disable+0x4c>)
    2cea:	8853      	ldrh	r3, [r2, #2]
    2cec:	051b      	lsls	r3, r3, #20
    2cee:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    2cf0:	8853      	ldrh	r3, [r2, #2]
    2cf2:	490e      	ldr	r1, [pc, #56]	; (2d2c <system_gclk_chan_disable+0x50>)
    2cf4:	400b      	ands	r3, r1
    2cf6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    2cf8:	8853      	ldrh	r3, [r2, #2]
    2cfa:	490d      	ldr	r1, [pc, #52]	; (2d30 <system_gclk_chan_disable+0x54>)
    2cfc:	400b      	ands	r3, r1
    2cfe:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    2d00:	0011      	movs	r1, r2
    2d02:	2280      	movs	r2, #128	; 0x80
    2d04:	01d2      	lsls	r2, r2, #7
    2d06:	884b      	ldrh	r3, [r1, #2]
    2d08:	4213      	tst	r3, r2
    2d0a:	d1fc      	bne.n	2d06 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    2d0c:	4906      	ldr	r1, [pc, #24]	; (2d28 <system_gclk_chan_disable+0x4c>)
    2d0e:	884a      	ldrh	r2, [r1, #2]
    2d10:	0203      	lsls	r3, r0, #8
    2d12:	4806      	ldr	r0, [pc, #24]	; (2d2c <system_gclk_chan_disable+0x50>)
    2d14:	4002      	ands	r2, r0
    2d16:	4313      	orrs	r3, r2
    2d18:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    2d1a:	4b06      	ldr	r3, [pc, #24]	; (2d34 <system_gclk_chan_disable+0x58>)
    2d1c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    2d1e:	bd10      	pop	{r4, pc}
    2d20:	00001a15 	.word	0x00001a15
    2d24:	40000c02 	.word	0x40000c02
    2d28:	40000c00 	.word	0x40000c00
    2d2c:	fffff0ff 	.word	0xfffff0ff
    2d30:	ffffbfff 	.word	0xffffbfff
    2d34:	00001a55 	.word	0x00001a55

00002d38 <system_gclk_chan_set_config>:
{
    2d38:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    2d3a:	780c      	ldrb	r4, [r1, #0]
    2d3c:	0224      	lsls	r4, r4, #8
    2d3e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    2d40:	4b02      	ldr	r3, [pc, #8]	; (2d4c <system_gclk_chan_set_config+0x14>)
    2d42:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    2d44:	b2a4      	uxth	r4, r4
    2d46:	4b02      	ldr	r3, [pc, #8]	; (2d50 <system_gclk_chan_set_config+0x18>)
    2d48:	805c      	strh	r4, [r3, #2]
}
    2d4a:	bd10      	pop	{r4, pc}
    2d4c:	00002cdd 	.word	0x00002cdd
    2d50:	40000c00 	.word	0x40000c00

00002d54 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2d54:	b510      	push	{r4, lr}
    2d56:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2d58:	4b06      	ldr	r3, [pc, #24]	; (2d74 <system_gclk_chan_get_hz+0x20>)
    2d5a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    2d5c:	4b06      	ldr	r3, [pc, #24]	; (2d78 <system_gclk_chan_get_hz+0x24>)
    2d5e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    2d60:	4b06      	ldr	r3, [pc, #24]	; (2d7c <system_gclk_chan_get_hz+0x28>)
    2d62:	885c      	ldrh	r4, [r3, #2]
    2d64:	0524      	lsls	r4, r4, #20
    2d66:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2d68:	4b05      	ldr	r3, [pc, #20]	; (2d80 <system_gclk_chan_get_hz+0x2c>)
    2d6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2d6c:	0020      	movs	r0, r4
    2d6e:	4b05      	ldr	r3, [pc, #20]	; (2d84 <system_gclk_chan_get_hz+0x30>)
    2d70:	4798      	blx	r3
}
    2d72:	bd10      	pop	{r4, pc}
    2d74:	00001a15 	.word	0x00001a15
    2d78:	40000c02 	.word	0x40000c02
    2d7c:	40000c00 	.word	0x40000c00
    2d80:	00001a55 	.word	0x00001a55
    2d84:	00002c21 	.word	0x00002c21

00002d88 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2d88:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2d8a:	78d3      	ldrb	r3, [r2, #3]
    2d8c:	2b00      	cmp	r3, #0
    2d8e:	d135      	bne.n	2dfc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2d90:	7813      	ldrb	r3, [r2, #0]
    2d92:	2b80      	cmp	r3, #128	; 0x80
    2d94:	d029      	beq.n	2dea <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    2d96:	061b      	lsls	r3, r3, #24
    2d98:	2480      	movs	r4, #128	; 0x80
    2d9a:	0264      	lsls	r4, r4, #9
    2d9c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2d9e:	7854      	ldrb	r4, [r2, #1]
    2da0:	2502      	movs	r5, #2
    2da2:	43ac      	bics	r4, r5
    2da4:	d106      	bne.n	2db4 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    2da6:	7894      	ldrb	r4, [r2, #2]
    2da8:	2c00      	cmp	r4, #0
    2daa:	d120      	bne.n	2dee <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2dac:	2480      	movs	r4, #128	; 0x80
    2dae:	02a4      	lsls	r4, r4, #10
    2db0:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    2db2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2db4:	7854      	ldrb	r4, [r2, #1]
    2db6:	3c01      	subs	r4, #1
    2db8:	2c01      	cmp	r4, #1
    2dba:	d91c      	bls.n	2df6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2dbc:	040d      	lsls	r5, r1, #16
    2dbe:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2dc0:	24a0      	movs	r4, #160	; 0xa0
    2dc2:	05e4      	lsls	r4, r4, #23
    2dc4:	432c      	orrs	r4, r5
    2dc6:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2dc8:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2dca:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2dcc:	24d0      	movs	r4, #208	; 0xd0
    2dce:	0624      	lsls	r4, r4, #24
    2dd0:	432c      	orrs	r4, r5
    2dd2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2dd4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    2dd6:	78d4      	ldrb	r4, [r2, #3]
    2dd8:	2c00      	cmp	r4, #0
    2dda:	d122      	bne.n	2e22 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    2ddc:	035b      	lsls	r3, r3, #13
    2dde:	d51c      	bpl.n	2e1a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    2de0:	7893      	ldrb	r3, [r2, #2]
    2de2:	2b01      	cmp	r3, #1
    2de4:	d01e      	beq.n	2e24 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    2de6:	6141      	str	r1, [r0, #20]
    2de8:	e017      	b.n	2e1a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    2dea:	2300      	movs	r3, #0
    2dec:	e7d7      	b.n	2d9e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    2dee:	24c0      	movs	r4, #192	; 0xc0
    2df0:	02e4      	lsls	r4, r4, #11
    2df2:	4323      	orrs	r3, r4
    2df4:	e7dd      	b.n	2db2 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    2df6:	4c0d      	ldr	r4, [pc, #52]	; (2e2c <_system_pinmux_config+0xa4>)
    2df8:	4023      	ands	r3, r4
    2dfa:	e7df      	b.n	2dbc <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    2dfc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    2dfe:	040c      	lsls	r4, r1, #16
    2e00:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    2e02:	23a0      	movs	r3, #160	; 0xa0
    2e04:	05db      	lsls	r3, r3, #23
    2e06:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e08:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    2e0a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    2e0c:	23d0      	movs	r3, #208	; 0xd0
    2e0e:	061b      	lsls	r3, r3, #24
    2e10:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    2e12:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    2e14:	78d3      	ldrb	r3, [r2, #3]
    2e16:	2b00      	cmp	r3, #0
    2e18:	d103      	bne.n	2e22 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2e1a:	7853      	ldrb	r3, [r2, #1]
    2e1c:	3b01      	subs	r3, #1
    2e1e:	2b01      	cmp	r3, #1
    2e20:	d902      	bls.n	2e28 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    2e22:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    2e24:	6181      	str	r1, [r0, #24]
    2e26:	e7f8      	b.n	2e1a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2e28:	6081      	str	r1, [r0, #8]
}
    2e2a:	e7fa      	b.n	2e22 <_system_pinmux_config+0x9a>
    2e2c:	fffbffff 	.word	0xfffbffff

00002e30 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2e30:	b510      	push	{r4, lr}
    2e32:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    2e34:	09c1      	lsrs	r1, r0, #7
		return NULL;
    2e36:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2e38:	2900      	cmp	r1, #0
    2e3a:	d104      	bne.n	2e46 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    2e3c:	0943      	lsrs	r3, r0, #5
    2e3e:	01db      	lsls	r3, r3, #7
    2e40:	4905      	ldr	r1, [pc, #20]	; (2e58 <system_pinmux_pin_set_config+0x28>)
    2e42:	468c      	mov	ip, r1
    2e44:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2e46:	241f      	movs	r4, #31
    2e48:	4020      	ands	r0, r4
    2e4a:	2101      	movs	r1, #1
    2e4c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2e4e:	0018      	movs	r0, r3
    2e50:	4b02      	ldr	r3, [pc, #8]	; (2e5c <system_pinmux_pin_set_config+0x2c>)
    2e52:	4798      	blx	r3
}
    2e54:	bd10      	pop	{r4, pc}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	41004400 	.word	0x41004400
    2e5c:	00002d89 	.word	0x00002d89

00002e60 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2e60:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    2e62:	4b01      	ldr	r3, [pc, #4]	; (2e68 <system_init+0x8>)
    2e64:	4798      	blx	r3
}
    2e66:	bd10      	pop	{r4, pc}
    2e68:	00002a49 	.word	0x00002a49

00002e6c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2e6c:	e7fe      	b.n	2e6c <Dummy_Handler>
	...

00002e70 <Reset_Handler>:
{
    2e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    2e72:	4a2a      	ldr	r2, [pc, #168]	; (2f1c <Reset_Handler+0xac>)
    2e74:	4b2a      	ldr	r3, [pc, #168]	; (2f20 <Reset_Handler+0xb0>)
    2e76:	429a      	cmp	r2, r3
    2e78:	d011      	beq.n	2e9e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2e7a:	001a      	movs	r2, r3
    2e7c:	4b29      	ldr	r3, [pc, #164]	; (2f24 <Reset_Handler+0xb4>)
    2e7e:	429a      	cmp	r2, r3
    2e80:	d20d      	bcs.n	2e9e <Reset_Handler+0x2e>
    2e82:	4a29      	ldr	r2, [pc, #164]	; (2f28 <Reset_Handler+0xb8>)
    2e84:	3303      	adds	r3, #3
    2e86:	1a9b      	subs	r3, r3, r2
    2e88:	089b      	lsrs	r3, r3, #2
    2e8a:	3301      	adds	r3, #1
    2e8c:	009b      	lsls	r3, r3, #2
    2e8e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2e90:	4823      	ldr	r0, [pc, #140]	; (2f20 <Reset_Handler+0xb0>)
    2e92:	4922      	ldr	r1, [pc, #136]	; (2f1c <Reset_Handler+0xac>)
    2e94:	588c      	ldr	r4, [r1, r2]
    2e96:	5084      	str	r4, [r0, r2]
    2e98:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2e9a:	429a      	cmp	r2, r3
    2e9c:	d1fa      	bne.n	2e94 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2e9e:	4a23      	ldr	r2, [pc, #140]	; (2f2c <Reset_Handler+0xbc>)
    2ea0:	4b23      	ldr	r3, [pc, #140]	; (2f30 <Reset_Handler+0xc0>)
    2ea2:	429a      	cmp	r2, r3
    2ea4:	d20a      	bcs.n	2ebc <Reset_Handler+0x4c>
    2ea6:	43d3      	mvns	r3, r2
    2ea8:	4921      	ldr	r1, [pc, #132]	; (2f30 <Reset_Handler+0xc0>)
    2eaa:	185b      	adds	r3, r3, r1
    2eac:	2103      	movs	r1, #3
    2eae:	438b      	bics	r3, r1
    2eb0:	3304      	adds	r3, #4
    2eb2:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    2eb4:	2100      	movs	r1, #0
    2eb6:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2eb8:	4293      	cmp	r3, r2
    2eba:	d1fc      	bne.n	2eb6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2ebc:	4a1d      	ldr	r2, [pc, #116]	; (2f34 <Reset_Handler+0xc4>)
    2ebe:	21ff      	movs	r1, #255	; 0xff
    2ec0:	4b1d      	ldr	r3, [pc, #116]	; (2f38 <Reset_Handler+0xc8>)
    2ec2:	438b      	bics	r3, r1
    2ec4:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2ec6:	39fd      	subs	r1, #253	; 0xfd
    2ec8:	2390      	movs	r3, #144	; 0x90
    2eca:	005b      	lsls	r3, r3, #1
    2ecc:	4a1b      	ldr	r2, [pc, #108]	; (2f3c <Reset_Handler+0xcc>)
    2ece:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2ed0:	4a1b      	ldr	r2, [pc, #108]	; (2f40 <Reset_Handler+0xd0>)
    2ed2:	78d3      	ldrb	r3, [r2, #3]
    2ed4:	2503      	movs	r5, #3
    2ed6:	43ab      	bics	r3, r5
    2ed8:	2402      	movs	r4, #2
    2eda:	4323      	orrs	r3, r4
    2edc:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2ede:	78d3      	ldrb	r3, [r2, #3]
    2ee0:	270c      	movs	r7, #12
    2ee2:	43bb      	bics	r3, r7
    2ee4:	2608      	movs	r6, #8
    2ee6:	4333      	orrs	r3, r6
    2ee8:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2eea:	4b16      	ldr	r3, [pc, #88]	; (2f44 <Reset_Handler+0xd4>)
    2eec:	7b98      	ldrb	r0, [r3, #14]
    2eee:	2230      	movs	r2, #48	; 0x30
    2ef0:	4390      	bics	r0, r2
    2ef2:	2220      	movs	r2, #32
    2ef4:	4310      	orrs	r0, r2
    2ef6:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    2ef8:	7b99      	ldrb	r1, [r3, #14]
    2efa:	43b9      	bics	r1, r7
    2efc:	4331      	orrs	r1, r6
    2efe:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2f00:	7b9a      	ldrb	r2, [r3, #14]
    2f02:	43aa      	bics	r2, r5
    2f04:	4322      	orrs	r2, r4
    2f06:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2f08:	4a0f      	ldr	r2, [pc, #60]	; (2f48 <Reset_Handler+0xd8>)
    2f0a:	6853      	ldr	r3, [r2, #4]
    2f0c:	2180      	movs	r1, #128	; 0x80
    2f0e:	430b      	orrs	r3, r1
    2f10:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2f12:	4b0e      	ldr	r3, [pc, #56]	; (2f4c <Reset_Handler+0xdc>)
    2f14:	4798      	blx	r3
        main();
    2f16:	4b0e      	ldr	r3, [pc, #56]	; (2f50 <Reset_Handler+0xe0>)
    2f18:	4798      	blx	r3
    2f1a:	e7fe      	b.n	2f1a <Reset_Handler+0xaa>
    2f1c:	0000552c 	.word	0x0000552c
    2f20:	20000000 	.word	0x20000000
    2f24:	200000bc 	.word	0x200000bc
    2f28:	20000004 	.word	0x20000004
    2f2c:	200000bc 	.word	0x200000bc
    2f30:	20005444 	.word	0x20005444
    2f34:	e000ed00 	.word	0xe000ed00
    2f38:	00000000 	.word	0x00000000
    2f3c:	41007000 	.word	0x41007000
    2f40:	41005000 	.word	0x41005000
    2f44:	41004800 	.word	0x41004800
    2f48:	41004000 	.word	0x41004000
    2f4c:	000046d5 	.word	0x000046d5
    2f50:	00004545 	.word	0x00004545

00002f54 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2f54:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2f56:	4a06      	ldr	r2, [pc, #24]	; (2f70 <_sbrk+0x1c>)
    2f58:	6812      	ldr	r2, [r2, #0]
    2f5a:	2a00      	cmp	r2, #0
    2f5c:	d004      	beq.n	2f68 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2f5e:	4a04      	ldr	r2, [pc, #16]	; (2f70 <_sbrk+0x1c>)
    2f60:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2f62:	18c3      	adds	r3, r0, r3
    2f64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    2f66:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2f68:	4902      	ldr	r1, [pc, #8]	; (2f74 <_sbrk+0x20>)
    2f6a:	4a01      	ldr	r2, [pc, #4]	; (2f70 <_sbrk+0x1c>)
    2f6c:	6011      	str	r1, [r2, #0]
    2f6e:	e7f6      	b.n	2f5e <_sbrk+0xa>
    2f70:	20000540 	.word	0x20000540
    2f74:	20007448 	.word	0x20007448

00002f78 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2f78:	0003      	movs	r3, r0
    2f7a:	3308      	adds	r3, #8
    2f7c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2f7e:	2201      	movs	r2, #1
    2f80:	4252      	negs	r2, r2
    2f82:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2f84:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2f86:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    2f88:	2300      	movs	r3, #0
    2f8a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    2f8c:	4770      	bx	lr

00002f8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2f8e:	2300      	movs	r3, #0
    2f90:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    2f92:	4770      	bx	lr

00002f94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    2f94:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    2f96:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2f98:	689a      	ldr	r2, [r3, #8]
    2f9a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2f9c:	689a      	ldr	r2, [r3, #8]
    2f9e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    2fa0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2fa2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2fa4:	6803      	ldr	r3, [r0, #0]
    2fa6:	3301      	adds	r3, #1
    2fa8:	6003      	str	r3, [r0, #0]
}
    2faa:	4770      	bx	lr

00002fac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    2fac:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2fae:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2fb0:	0002      	movs	r2, r0
    2fb2:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
    2fb4:	1c63      	adds	r3, r4, #1
    2fb6:	d102      	bne.n	2fbe <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
    2fb8:	6902      	ldr	r2, [r0, #16]
    2fba:	e004      	b.n	2fc6 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    2fbc:	001a      	movs	r2, r3
    2fbe:	6853      	ldr	r3, [r2, #4]
    2fc0:	681d      	ldr	r5, [r3, #0]
    2fc2:	42ac      	cmp	r4, r5
    2fc4:	d2fa      	bcs.n	2fbc <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2fc6:	6853      	ldr	r3, [r2, #4]
    2fc8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2fca:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    2fcc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    2fce:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2fd0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    2fd2:	6803      	ldr	r3, [r0, #0]
    2fd4:	3301      	adds	r3, #1
    2fd6:	6003      	str	r3, [r0, #0]
}
    2fd8:	bd30      	pop	{r4, r5, pc}

00002fda <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    2fda:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2fdc:	6842      	ldr	r2, [r0, #4]
    2fde:	6881      	ldr	r1, [r0, #8]
    2fe0:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2fe2:	6882      	ldr	r2, [r0, #8]
    2fe4:	6841      	ldr	r1, [r0, #4]
    2fe6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2fe8:	685a      	ldr	r2, [r3, #4]
    2fea:	4290      	cmp	r0, r2
    2fec:	d006      	beq.n	2ffc <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2fee:	2200      	movs	r2, #0
    2ff0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    2ff2:	681a      	ldr	r2, [r3, #0]
    2ff4:	3a01      	subs	r2, #1
    2ff6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2ff8:	6818      	ldr	r0, [r3, #0]
}
    2ffa:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2ffc:	6882      	ldr	r2, [r0, #8]
    2ffe:	605a      	str	r2, [r3, #4]
    3000:	e7f5      	b.n	2fee <uxListRemove+0x14>
	...

00003004 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    3004:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    3006:	2300      	movs	r3, #0
    3008:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    300a:	4b06      	ldr	r3, [pc, #24]	; (3024 <prvTaskExitError+0x20>)
    300c:	681b      	ldr	r3, [r3, #0]
    300e:	3301      	adds	r3, #1
    3010:	d001      	beq.n	3016 <prvTaskExitError+0x12>
    3012:	b672      	cpsid	i
    3014:	e7fe      	b.n	3014 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    3016:	b672      	cpsid	i
	while( ulDummy == 0 )
    3018:	9b01      	ldr	r3, [sp, #4]
    301a:	2b00      	cmp	r3, #0
    301c:	d0fc      	beq.n	3018 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    301e:	b002      	add	sp, #8
    3020:	4770      	bx	lr
    3022:	46c0      	nop			; (mov r8, r8)
    3024:	20000054 	.word	0x20000054
	...

00003030 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    3030:	4a0b      	ldr	r2, [pc, #44]	; (3060 <pxCurrentTCBConst2>)
    3032:	6813      	ldr	r3, [r2, #0]
    3034:	6818      	ldr	r0, [r3, #0]
    3036:	3020      	adds	r0, #32
    3038:	f380 8809 	msr	PSP, r0
    303c:	2002      	movs	r0, #2
    303e:	f380 8814 	msr	CONTROL, r0
    3042:	f3bf 8f6f 	isb	sy
    3046:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    3048:	46ae      	mov	lr, r5
    304a:	bc08      	pop	{r3}
    304c:	bc04      	pop	{r2}
    304e:	b662      	cpsie	i
    3050:	4718      	bx	r3
    3052:	46c0      	nop			; (mov r8, r8)
    3054:	46c0      	nop			; (mov r8, r8)
    3056:	46c0      	nop			; (mov r8, r8)
    3058:	46c0      	nop			; (mov r8, r8)
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	46c0      	nop			; (mov r8, r8)
    305e:	46c0      	nop			; (mov r8, r8)

00003060 <pxCurrentTCBConst2>:
    3060:	20003fe4 	.word	0x20003fe4

00003064 <pxPortInitialiseStack>:
{
    3064:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    3066:	1f03      	subs	r3, r0, #4
    3068:	2480      	movs	r4, #128	; 0x80
    306a:	0464      	lsls	r4, r4, #17
    306c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    306e:	3b04      	subs	r3, #4
    3070:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    3072:	3b04      	subs	r3, #4
    3074:	4902      	ldr	r1, [pc, #8]	; (3080 <pxPortInitialiseStack+0x1c>)
    3076:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    3078:	3b14      	subs	r3, #20
    307a:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    307c:	3840      	subs	r0, #64	; 0x40
}
    307e:	bd10      	pop	{r4, pc}
    3080:	00003005 	.word	0x00003005

00003084 <SVC_Handler>:
}
    3084:	4770      	bx	lr
	...

00003088 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    3088:	b570      	push	{r4, r5, r6, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    308a:	4b12      	ldr	r3, [pc, #72]	; (30d4 <xPortStartScheduler+0x4c>)
    308c:	6819      	ldr	r1, [r3, #0]
    308e:	22ff      	movs	r2, #255	; 0xff
    3090:	0412      	lsls	r2, r2, #16
    3092:	430a      	orrs	r2, r1
    3094:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    3096:	6819      	ldr	r1, [r3, #0]
    3098:	22ff      	movs	r2, #255	; 0xff
    309a:	0612      	lsls	r2, r2, #24
    309c:	430a      	orrs	r2, r1
    309e:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    30a0:	4d0d      	ldr	r5, [pc, #52]	; (30d8 <xPortStartScheduler+0x50>)
    30a2:	2400      	movs	r4, #0
    30a4:	602c      	str	r4, [r5, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    30a6:	4b0d      	ldr	r3, [pc, #52]	; (30dc <xPortStartScheduler+0x54>)
    30a8:	601c      	str	r4, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    30aa:	2000      	movs	r0, #0
    30ac:	4b0c      	ldr	r3, [pc, #48]	; (30e0 <xPortStartScheduler+0x58>)
    30ae:	4798      	blx	r3
    30b0:	21c8      	movs	r1, #200	; 0xc8
    30b2:	4b0c      	ldr	r3, [pc, #48]	; (30e4 <xPortStartScheduler+0x5c>)
    30b4:	4798      	blx	r3
    30b6:	3801      	subs	r0, #1
    30b8:	4b0b      	ldr	r3, [pc, #44]	; (30e8 <xPortStartScheduler+0x60>)
    30ba:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    30bc:	2307      	movs	r3, #7
    30be:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    30c0:	4b0a      	ldr	r3, [pc, #40]	; (30ec <xPortStartScheduler+0x64>)
    30c2:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    30c4:	4b0a      	ldr	r3, [pc, #40]	; (30f0 <xPortStartScheduler+0x68>)
    30c6:	4798      	blx	r3
	vTaskSwitchContext();
    30c8:	4b0a      	ldr	r3, [pc, #40]	; (30f4 <xPortStartScheduler+0x6c>)
    30ca:	4798      	blx	r3
	prvTaskExitError();
    30cc:	4b0a      	ldr	r3, [pc, #40]	; (30f8 <xPortStartScheduler+0x70>)
    30ce:	4798      	blx	r3
}
    30d0:	2000      	movs	r0, #0
    30d2:	bd70      	pop	{r4, r5, r6, pc}
    30d4:	e000ed20 	.word	0xe000ed20
    30d8:	e000e010 	.word	0xe000e010
    30dc:	e000e018 	.word	0xe000e018
    30e0:	00002c21 	.word	0x00002c21
    30e4:	00004569 	.word	0x00004569
    30e8:	e000e014 	.word	0xe000e014
    30ec:	20000054 	.word	0x20000054
    30f0:	00003031 	.word	0x00003031
    30f4:	00003ef1 	.word	0x00003ef1
    30f8:	00003005 	.word	0x00003005

000030fc <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    30fc:	2280      	movs	r2, #128	; 0x80
    30fe:	0552      	lsls	r2, r2, #21
    3100:	4b03      	ldr	r3, [pc, #12]	; (3110 <vPortYield+0x14>)
    3102:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    3104:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    3108:	f3bf 8f6f 	isb	sy
}
    310c:	4770      	bx	lr
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	e000ed04 	.word	0xe000ed04

00003114 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    3114:	b672      	cpsid	i
    uxCriticalNesting++;
    3116:	4a04      	ldr	r2, [pc, #16]	; (3128 <vPortEnterCritical+0x14>)
    3118:	6813      	ldr	r3, [r2, #0]
    311a:	3301      	adds	r3, #1
    311c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    311e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    3122:	f3bf 8f6f 	isb	sy
}
    3126:	4770      	bx	lr
    3128:	20000054 	.word	0x20000054

0000312c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    312c:	4b06      	ldr	r3, [pc, #24]	; (3148 <vPortExitCritical+0x1c>)
    312e:	681b      	ldr	r3, [r3, #0]
    3130:	2b00      	cmp	r3, #0
    3132:	d101      	bne.n	3138 <vPortExitCritical+0xc>
    3134:	b672      	cpsid	i
    3136:	e7fe      	b.n	3136 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    3138:	3b01      	subs	r3, #1
    313a:	4a03      	ldr	r2, [pc, #12]	; (3148 <vPortExitCritical+0x1c>)
    313c:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    313e:	2b00      	cmp	r3, #0
    3140:	d100      	bne.n	3144 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
    3142:	b662      	cpsie	i
}
    3144:	4770      	bx	lr
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	20000054 	.word	0x20000054

0000314c <ulSetInterruptMaskFromISR>:
	__asm volatile(
    314c:	f3ef 8010 	mrs	r0, PRIMASK
    3150:	b672      	cpsid	i
    3152:	4770      	bx	lr

00003154 <vClearInterruptMaskFromISR>:
	__asm volatile(
    3154:	f380 8810 	msr	PRIMASK, r0
    3158:	4770      	bx	lr
    315a:	0000      	movs	r0, r0
    315c:	0000      	movs	r0, r0
	...

00003160 <PendSV_Handler>:
	__asm volatile
    3160:	f3ef 8009 	mrs	r0, PSP
    3164:	4b0e      	ldr	r3, [pc, #56]	; (31a0 <pxCurrentTCBConst>)
    3166:	681a      	ldr	r2, [r3, #0]
    3168:	3820      	subs	r0, #32
    316a:	6010      	str	r0, [r2, #0]
    316c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    316e:	4644      	mov	r4, r8
    3170:	464d      	mov	r5, r9
    3172:	4656      	mov	r6, sl
    3174:	465f      	mov	r7, fp
    3176:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    3178:	b508      	push	{r3, lr}
    317a:	b672      	cpsid	i
    317c:	f000 feb8 	bl	3ef0 <vTaskSwitchContext>
    3180:	b662      	cpsie	i
    3182:	bc0c      	pop	{r2, r3}
    3184:	6811      	ldr	r1, [r2, #0]
    3186:	6808      	ldr	r0, [r1, #0]
    3188:	3010      	adds	r0, #16
    318a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    318c:	46a0      	mov	r8, r4
    318e:	46a9      	mov	r9, r5
    3190:	46b2      	mov	sl, r6
    3192:	46bb      	mov	fp, r7
    3194:	f380 8809 	msr	PSP, r0
    3198:	3820      	subs	r0, #32
    319a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    319c:	4718      	bx	r3
    319e:	46c0      	nop			; (mov r8, r8)

000031a0 <pxCurrentTCBConst>:
    31a0:	20003fe4 	.word	0x20003fe4

000031a4 <SysTick_Handler>:
{
    31a4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    31a6:	4b07      	ldr	r3, [pc, #28]	; (31c4 <SysTick_Handler+0x20>)
    31a8:	4798      	blx	r3
    31aa:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    31ac:	4b06      	ldr	r3, [pc, #24]	; (31c8 <SysTick_Handler+0x24>)
    31ae:	4798      	blx	r3
    31b0:	2800      	cmp	r0, #0
    31b2:	d003      	beq.n	31bc <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    31b4:	2280      	movs	r2, #128	; 0x80
    31b6:	0552      	lsls	r2, r2, #21
    31b8:	4b04      	ldr	r3, [pc, #16]	; (31cc <SysTick_Handler+0x28>)
    31ba:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    31bc:	0020      	movs	r0, r4
    31be:	4b04      	ldr	r3, [pc, #16]	; (31d0 <SysTick_Handler+0x2c>)
    31c0:	4798      	blx	r3
}
    31c2:	bd10      	pop	{r4, pc}
    31c4:	0000314d 	.word	0x0000314d
    31c8:	00003c91 	.word	0x00003c91
    31cc:	e000ed04 	.word	0xe000ed04
    31d0:	00003155 	.word	0x00003155

000031d4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    31d4:	b570      	push	{r4, r5, r6, lr}
    31d6:	0004      	movs	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    31d8:	0743      	lsls	r3, r0, #29
    31da:	d002      	beq.n	31e2 <pvPortMalloc+0xe>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    31dc:	2307      	movs	r3, #7
    31de:	439c      	bics	r4, r3
    31e0:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
    31e2:	4b11      	ldr	r3, [pc, #68]	; (3228 <pvPortMalloc+0x54>)
    31e4:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    31e6:	4b11      	ldr	r3, [pc, #68]	; (322c <pvPortMalloc+0x58>)
    31e8:	681b      	ldr	r3, [r3, #0]
    31ea:	2b00      	cmp	r3, #0
    31ec:	d010      	beq.n	3210 <pvPortMalloc+0x3c>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    31ee:	4b10      	ldr	r3, [pc, #64]	; (3230 <pvPortMalloc+0x5c>)
    31f0:	681b      	ldr	r3, [r3, #0]
    31f2:	18e4      	adds	r4, r4, r3
    31f4:	4a0f      	ldr	r2, [pc, #60]	; (3234 <pvPortMalloc+0x60>)
    31f6:	4294      	cmp	r4, r2
    31f8:	d811      	bhi.n	321e <pvPortMalloc+0x4a>
    31fa:	42a3      	cmp	r3, r4
    31fc:	d211      	bcs.n	3222 <pvPortMalloc+0x4e>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    31fe:	4a0b      	ldr	r2, [pc, #44]	; (322c <pvPortMalloc+0x58>)
    3200:	6815      	ldr	r5, [r2, #0]
    3202:	18ed      	adds	r5, r5, r3
			xNextFreeByte += xWantedSize;
    3204:	4b0a      	ldr	r3, [pc, #40]	; (3230 <pvPortMalloc+0x5c>)
    3206:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    3208:	4b0b      	ldr	r3, [pc, #44]	; (3238 <pvPortMalloc+0x64>)
    320a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    320c:	0028      	movs	r0, r5
    320e:	bd70      	pop	{r4, r5, r6, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    3210:	2207      	movs	r2, #7
    3212:	4b0a      	ldr	r3, [pc, #40]	; (323c <pvPortMalloc+0x68>)
    3214:	3308      	adds	r3, #8
    3216:	4393      	bics	r3, r2
    3218:	4a04      	ldr	r2, [pc, #16]	; (322c <pvPortMalloc+0x58>)
    321a:	6013      	str	r3, [r2, #0]
    321c:	e7e7      	b.n	31ee <pvPortMalloc+0x1a>
void *pvReturn = NULL;
    321e:	2500      	movs	r5, #0
    3220:	e7f2      	b.n	3208 <pvPortMalloc+0x34>
    3222:	2500      	movs	r5, #0
    3224:	e7f0      	b.n	3208 <pvPortMalloc+0x34>
    3226:	46c0      	nop			; (mov r8, r8)
    3228:	00003c75 	.word	0x00003c75
    322c:	20000544 	.word	0x20000544
    3230:	20003fe0 	.word	0x20003fe0
    3234:	00003a8f 	.word	0x00003a8f
    3238:	00003db1 	.word	0x00003db1
    323c:	20000548 	.word	0x20000548

00003240 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    3240:	2800      	cmp	r0, #0
    3242:	d001      	beq.n	3248 <vPortFree+0x8>
    3244:	b672      	cpsid	i
    3246:	e7fe      	b.n	3246 <vPortFree+0x6>
}
    3248:	4770      	bx	lr
	...

0000324c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    324c:	b510      	push	{r4, lr}
    324e:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    3250:	4b03      	ldr	r3, [pc, #12]	; (3260 <prvIsQueueEmpty+0x14>)
    3252:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    3254:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3256:	4b03      	ldr	r3, [pc, #12]	; (3264 <prvIsQueueEmpty+0x18>)
    3258:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    325a:	4260      	negs	r0, r4
    325c:	4160      	adcs	r0, r4

	return xReturn;
}
    325e:	bd10      	pop	{r4, pc}
    3260:	00003115 	.word	0x00003115
    3264:	0000312d 	.word	0x0000312d

00003268 <prvCopyDataToQueue>:
{
    3268:	b570      	push	{r4, r5, r6, lr}
    326a:	0004      	movs	r4, r0
    326c:	0016      	movs	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    326e:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    3270:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3272:	2a00      	cmp	r2, #0
    3274:	d10b      	bne.n	328e <prvCopyDataToQueue+0x26>
BaseType_t xReturn = pdFALSE;
    3276:	2000      	movs	r0, #0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3278:	6823      	ldr	r3, [r4, #0]
    327a:	4283      	cmp	r3, r0
    327c:	d104      	bne.n	3288 <prvCopyDataToQueue+0x20>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    327e:	6860      	ldr	r0, [r4, #4]
    3280:	4b16      	ldr	r3, [pc, #88]	; (32dc <prvCopyDataToQueue+0x74>)
    3282:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    3284:	2300      	movs	r3, #0
    3286:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    3288:	3501      	adds	r5, #1
    328a:	63a5      	str	r5, [r4, #56]	; 0x38
}
    328c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
    328e:	2e00      	cmp	r6, #0
    3290:	d10e      	bne.n	32b0 <prvCopyDataToQueue+0x48>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    3292:	6880      	ldr	r0, [r0, #8]
    3294:	4b12      	ldr	r3, [pc, #72]	; (32e0 <prvCopyDataToQueue+0x78>)
    3296:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3298:	68a3      	ldr	r3, [r4, #8]
    329a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    329c:	4694      	mov	ip, r2
    329e:	4463      	add	r3, ip
    32a0:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
    32a2:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    32a4:	6862      	ldr	r2, [r4, #4]
    32a6:	4293      	cmp	r3, r2
    32a8:	d3ee      	bcc.n	3288 <prvCopyDataToQueue+0x20>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    32aa:	6823      	ldr	r3, [r4, #0]
    32ac:	60a3      	str	r3, [r4, #8]
    32ae:	e7eb      	b.n	3288 <prvCopyDataToQueue+0x20>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    32b0:	68c0      	ldr	r0, [r0, #12]
    32b2:	4b0b      	ldr	r3, [pc, #44]	; (32e0 <prvCopyDataToQueue+0x78>)
    32b4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    32b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    32b8:	425b      	negs	r3, r3
    32ba:	68e2      	ldr	r2, [r4, #12]
    32bc:	18d2      	adds	r2, r2, r3
    32be:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    32c0:	6821      	ldr	r1, [r4, #0]
    32c2:	428a      	cmp	r2, r1
    32c4:	d203      	bcs.n	32ce <prvCopyDataToQueue+0x66>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    32c6:	6862      	ldr	r2, [r4, #4]
    32c8:	4694      	mov	ip, r2
    32ca:	4463      	add	r3, ip
    32cc:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    32ce:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    32d0:	2e02      	cmp	r6, #2
    32d2:	d1d9      	bne.n	3288 <prvCopyDataToQueue+0x20>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    32d4:	4285      	cmp	r5, r0
    32d6:	d0d7      	beq.n	3288 <prvCopyDataToQueue+0x20>
				--uxMessagesWaiting;
    32d8:	3d01      	subs	r5, #1
    32da:	e7d5      	b.n	3288 <prvCopyDataToQueue+0x20>
    32dc:	0000412d 	.word	0x0000412d
    32e0:	0000471d 	.word	0x0000471d

000032e4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    32e4:	b570      	push	{r4, r5, r6, lr}
    32e6:	b082      	sub	sp, #8
    32e8:	9001      	str	r0, [sp, #4]
    32ea:	000a      	movs	r2, r1
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    32ec:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    32ee:	2c00      	cmp	r4, #0
    32f0:	d005      	beq.n	32fe <prvNotifyQueueSetContainer+0x1a>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    32f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    32f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    32f6:	4299      	cmp	r1, r3
    32f8:	d303      	bcc.n	3302 <prvNotifyQueueSetContainer+0x1e>
    32fa:	b672      	cpsid	i
    32fc:	e7fe      	b.n	32fc <prvNotifyQueueSetContainer+0x18>
		configASSERT( pxQueueSetContainer );
    32fe:	b672      	cpsid	i
    3300:	e7fe      	b.n	3300 <prvNotifyQueueSetContainer+0x1c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    3302:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    3304:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    3306:	428b      	cmp	r3, r1
    3308:	d802      	bhi.n	3310 <prvNotifyQueueSetContainer+0x2c>
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    330a:	0030      	movs	r0, r6
    330c:	b002      	add	sp, #8
    330e:	bd70      	pop	{r4, r5, r6, pc}
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    3310:	2345      	movs	r3, #69	; 0x45
    3312:	5ce5      	ldrb	r5, [r4, r3]
    3314:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    3316:	a901      	add	r1, sp, #4
    3318:	0020      	movs	r0, r4
    331a:	4b0a      	ldr	r3, [pc, #40]	; (3344 <prvNotifyQueueSetContainer+0x60>)
    331c:	4798      	blx	r3
    331e:	0006      	movs	r6, r0
			if( cTxLock == queueUNLOCKED )
    3320:	1c6b      	adds	r3, r5, #1
    3322:	d10a      	bne.n	333a <prvNotifyQueueSetContainer+0x56>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    3324:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3326:	2b00      	cmp	r3, #0
    3328:	d0ef      	beq.n	330a <prvNotifyQueueSetContainer+0x26>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    332a:	0020      	movs	r0, r4
    332c:	3024      	adds	r0, #36	; 0x24
    332e:	4b06      	ldr	r3, [pc, #24]	; (3348 <prvNotifyQueueSetContainer+0x64>)
    3330:	4798      	blx	r3
    3332:	2800      	cmp	r0, #0
    3334:	d0e9      	beq.n	330a <prvNotifyQueueSetContainer+0x26>
						xReturn = pdTRUE;
    3336:	2601      	movs	r6, #1
    3338:	e7e7      	b.n	330a <prvNotifyQueueSetContainer+0x26>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    333a:	3501      	adds	r5, #1
    333c:	b26d      	sxtb	r5, r5
    333e:	2345      	movs	r3, #69	; 0x45
    3340:	54e5      	strb	r5, [r4, r3]
    3342:	e7e2      	b.n	330a <prvNotifyQueueSetContainer+0x26>
    3344:	00003269 	.word	0x00003269
    3348:	00003ff1 	.word	0x00003ff1

0000334c <prvCopyDataFromQueue>:
{
    334c:	b510      	push	{r4, lr}
    334e:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    3350:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3352:	2a00      	cmp	r2, #0
    3354:	d00b      	beq.n	336e <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3356:	68c3      	ldr	r3, [r0, #12]
    3358:	189b      	adds	r3, r3, r2
    335a:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    335c:	6841      	ldr	r1, [r0, #4]
    335e:	428b      	cmp	r3, r1
    3360:	d301      	bcc.n	3366 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3362:	6803      	ldr	r3, [r0, #0]
    3364:	60c3      	str	r3, [r0, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    3366:	68c1      	ldr	r1, [r0, #12]
    3368:	0020      	movs	r0, r4
    336a:	4b01      	ldr	r3, [pc, #4]	; (3370 <prvCopyDataFromQueue+0x24>)
    336c:	4798      	blx	r3
}
    336e:	bd10      	pop	{r4, pc}
    3370:	0000471d 	.word	0x0000471d

00003374 <prvUnlockQueue>:
{
    3374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3376:	0007      	movs	r7, r0
	taskENTER_CRITICAL();
    3378:	4b25      	ldr	r3, [pc, #148]	; (3410 <prvUnlockQueue+0x9c>)
    337a:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    337c:	2345      	movs	r3, #69	; 0x45
    337e:	5cfc      	ldrb	r4, [r7, r3]
    3380:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    3382:	2c00      	cmp	r4, #0
    3384:	dd1c      	ble.n	33c0 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    3386:	4e23      	ldr	r6, [pc, #140]	; (3414 <prvUnlockQueue+0xa0>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3388:	4d23      	ldr	r5, [pc, #140]	; (3418 <prvUnlockQueue+0xa4>)
    338a:	e00b      	b.n	33a4 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    338e:	2b00      	cmp	r3, #0
    3390:	d016      	beq.n	33c0 <prvUnlockQueue+0x4c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3392:	0038      	movs	r0, r7
    3394:	3024      	adds	r0, #36	; 0x24
    3396:	47a8      	blx	r5
    3398:	2800      	cmp	r0, #0
    339a:	d10e      	bne.n	33ba <prvUnlockQueue+0x46>
    339c:	3c01      	subs	r4, #1
    339e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
    33a0:	2c00      	cmp	r4, #0
    33a2:	d00d      	beq.n	33c0 <prvUnlockQueue+0x4c>
				if( pxQueue->pxQueueSetContainer != NULL )
    33a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    33a6:	2b00      	cmp	r3, #0
    33a8:	d0f0      	beq.n	338c <prvUnlockQueue+0x18>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    33aa:	2100      	movs	r1, #0
    33ac:	0038      	movs	r0, r7
    33ae:	47b0      	blx	r6
    33b0:	2800      	cmp	r0, #0
    33b2:	d0f3      	beq.n	339c <prvUnlockQueue+0x28>
						vTaskMissedYield();
    33b4:	4b19      	ldr	r3, [pc, #100]	; (341c <prvUnlockQueue+0xa8>)
    33b6:	4798      	blx	r3
    33b8:	e7f0      	b.n	339c <prvUnlockQueue+0x28>
							vTaskMissedYield();
    33ba:	4b18      	ldr	r3, [pc, #96]	; (341c <prvUnlockQueue+0xa8>)
    33bc:	4798      	blx	r3
    33be:	e7ed      	b.n	339c <prvUnlockQueue+0x28>
		pxQueue->cTxLock = queueUNLOCKED;
    33c0:	22ff      	movs	r2, #255	; 0xff
    33c2:	2345      	movs	r3, #69	; 0x45
    33c4:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    33c6:	4b16      	ldr	r3, [pc, #88]	; (3420 <prvUnlockQueue+0xac>)
    33c8:	4798      	blx	r3
	taskENTER_CRITICAL();
    33ca:	4b11      	ldr	r3, [pc, #68]	; (3410 <prvUnlockQueue+0x9c>)
    33cc:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    33ce:	2344      	movs	r3, #68	; 0x44
    33d0:	5cfc      	ldrb	r4, [r7, r3]
    33d2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    33d4:	2c00      	cmp	r4, #0
    33d6:	dd14      	ble.n	3402 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    33d8:	693b      	ldr	r3, [r7, #16]
    33da:	2b00      	cmp	r3, #0
    33dc:	d011      	beq.n	3402 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    33de:	003d      	movs	r5, r7
    33e0:	3510      	adds	r5, #16
    33e2:	4e0d      	ldr	r6, [pc, #52]	; (3418 <prvUnlockQueue+0xa4>)
    33e4:	e006      	b.n	33f4 <prvUnlockQueue+0x80>
    33e6:	3c01      	subs	r4, #1
    33e8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
    33ea:	2c00      	cmp	r4, #0
    33ec:	d009      	beq.n	3402 <prvUnlockQueue+0x8e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    33ee:	693b      	ldr	r3, [r7, #16]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d006      	beq.n	3402 <prvUnlockQueue+0x8e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    33f4:	0028      	movs	r0, r5
    33f6:	47b0      	blx	r6
    33f8:	2800      	cmp	r0, #0
    33fa:	d0f4      	beq.n	33e6 <prvUnlockQueue+0x72>
					vTaskMissedYield();
    33fc:	4b07      	ldr	r3, [pc, #28]	; (341c <prvUnlockQueue+0xa8>)
    33fe:	4798      	blx	r3
    3400:	e7f1      	b.n	33e6 <prvUnlockQueue+0x72>
		pxQueue->cRxLock = queueUNLOCKED;
    3402:	22ff      	movs	r2, #255	; 0xff
    3404:	2344      	movs	r3, #68	; 0x44
    3406:	54fa      	strb	r2, [r7, r3]
	taskEXIT_CRITICAL();
    3408:	4b05      	ldr	r3, [pc, #20]	; (3420 <prvUnlockQueue+0xac>)
    340a:	4798      	blx	r3
}
    340c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    340e:	46c0      	nop			; (mov r8, r8)
    3410:	00003115 	.word	0x00003115
    3414:	000032e5 	.word	0x000032e5
    3418:	00003ff1 	.word	0x00003ff1
    341c:	00004101 	.word	0x00004101
    3420:	0000312d 	.word	0x0000312d

00003424 <xQueueGenericReset>:
{
    3424:	b570      	push	{r4, r5, r6, lr}
    3426:	0004      	movs	r4, r0
    3428:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    342a:	2800      	cmp	r0, #0
    342c:	d021      	beq.n	3472 <xQueueGenericReset+0x4e>
	taskENTER_CRITICAL();
    342e:	4b17      	ldr	r3, [pc, #92]	; (348c <xQueueGenericReset+0x68>)
    3430:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    3432:	6822      	ldr	r2, [r4, #0]
    3434:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3438:	434b      	muls	r3, r1
    343a:	18d0      	adds	r0, r2, r3
    343c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    343e:	2000      	movs	r0, #0
    3440:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    3442:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    3444:	1a5b      	subs	r3, r3, r1
    3446:	18d3      	adds	r3, r2, r3
    3448:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    344a:	23ff      	movs	r3, #255	; 0xff
    344c:	2244      	movs	r2, #68	; 0x44
    344e:	54a3      	strb	r3, [r4, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    3450:	3201      	adds	r2, #1
    3452:	54a3      	strb	r3, [r4, r2]
		if( xNewQueue == pdFALSE )
    3454:	2d00      	cmp	r5, #0
    3456:	d111      	bne.n	347c <xQueueGenericReset+0x58>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3458:	6923      	ldr	r3, [r4, #16]
    345a:	2b00      	cmp	r3, #0
    345c:	d005      	beq.n	346a <xQueueGenericReset+0x46>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    345e:	0020      	movs	r0, r4
    3460:	3010      	adds	r0, #16
    3462:	4b0b      	ldr	r3, [pc, #44]	; (3490 <xQueueGenericReset+0x6c>)
    3464:	4798      	blx	r3
    3466:	2800      	cmp	r0, #0
    3468:	d105      	bne.n	3476 <xQueueGenericReset+0x52>
	taskEXIT_CRITICAL();
    346a:	4b0a      	ldr	r3, [pc, #40]	; (3494 <xQueueGenericReset+0x70>)
    346c:	4798      	blx	r3
}
    346e:	2001      	movs	r0, #1
    3470:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
    3472:	b672      	cpsid	i
    3474:	e7fe      	b.n	3474 <xQueueGenericReset+0x50>
					queueYIELD_IF_USING_PREEMPTION();
    3476:	4b08      	ldr	r3, [pc, #32]	; (3498 <xQueueGenericReset+0x74>)
    3478:	4798      	blx	r3
    347a:	e7f6      	b.n	346a <xQueueGenericReset+0x46>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    347c:	0020      	movs	r0, r4
    347e:	3010      	adds	r0, #16
    3480:	4d06      	ldr	r5, [pc, #24]	; (349c <xQueueGenericReset+0x78>)
    3482:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    3484:	0020      	movs	r0, r4
    3486:	3024      	adds	r0, #36	; 0x24
    3488:	47a8      	blx	r5
    348a:	e7ee      	b.n	346a <xQueueGenericReset+0x46>
    348c:	00003115 	.word	0x00003115
    3490:	00003ff1 	.word	0x00003ff1
    3494:	0000312d 	.word	0x0000312d
    3498:	000030fd 	.word	0x000030fd
    349c:	00002f79 	.word	0x00002f79

000034a0 <xQueueGenericCreate>:
	{
    34a0:	b570      	push	{r4, r5, r6, lr}
    34a2:	0006      	movs	r6, r0
    34a4:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    34a6:	2800      	cmp	r0, #0
    34a8:	d101      	bne.n	34ae <xQueueGenericCreate+0xe>
    34aa:	b672      	cpsid	i
    34ac:	e7fe      	b.n	34ac <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    34ae:	0008      	movs	r0, r1
    34b0:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    34b2:	304c      	adds	r0, #76	; 0x4c
    34b4:	4b0a      	ldr	r3, [pc, #40]	; (34e0 <xQueueGenericCreate+0x40>)
    34b6:	4798      	blx	r3
    34b8:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    34ba:	d00e      	beq.n	34da <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
    34bc:	2d00      	cmp	r5, #0
    34be:	d003      	beq.n	34c8 <xQueueGenericCreate+0x28>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    34c0:	0003      	movs	r3, r0
    34c2:	334c      	adds	r3, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    34c4:	6003      	str	r3, [r0, #0]
    34c6:	e000      	b.n	34ca <xQueueGenericCreate+0x2a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    34c8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
    34ca:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    34cc:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    34ce:	2101      	movs	r1, #1
    34d0:	0020      	movs	r0, r4
    34d2:	4b04      	ldr	r3, [pc, #16]	; (34e4 <xQueueGenericCreate+0x44>)
    34d4:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
    34d6:	2300      	movs	r3, #0
    34d8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    34da:	0020      	movs	r0, r4
    34dc:	bd70      	pop	{r4, r5, r6, pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	000031d5 	.word	0x000031d5
    34e4:	00003425 	.word	0x00003425

000034e8 <xQueueGenericSend>:
{
    34e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ea:	46ce      	mov	lr, r9
    34ec:	4647      	mov	r7, r8
    34ee:	b580      	push	{r7, lr}
    34f0:	b085      	sub	sp, #20
    34f2:	0004      	movs	r4, r0
    34f4:	000f      	movs	r7, r1
    34f6:	9201      	str	r2, [sp, #4]
    34f8:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    34fa:	2800      	cmp	r0, #0
    34fc:	d00c      	beq.n	3518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    34fe:	2900      	cmp	r1, #0
    3500:	d00c      	beq.n	351c <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3502:	2d02      	cmp	r5, #2
    3504:	d00f      	beq.n	3526 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    3506:	4b4e      	ldr	r3, [pc, #312]	; (3640 <xQueueGenericSend+0x158>)
    3508:	4798      	blx	r3
    350a:	2800      	cmp	r0, #0
    350c:	d110      	bne.n	3530 <xQueueGenericSend+0x48>
    350e:	9b01      	ldr	r3, [sp, #4]
    3510:	2b00      	cmp	r3, #0
    3512:	d011      	beq.n	3538 <xQueueGenericSend+0x50>
    3514:	b672      	cpsid	i
    3516:	e7fe      	b.n	3516 <xQueueGenericSend+0x2e>
	configASSERT( pxQueue );
    3518:	b672      	cpsid	i
    351a:	e7fe      	b.n	351a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    351c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    351e:	2b00      	cmp	r3, #0
    3520:	d0ef      	beq.n	3502 <xQueueGenericSend+0x1a>
    3522:	b672      	cpsid	i
    3524:	e7fe      	b.n	3524 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    3526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3528:	2b01      	cmp	r3, #1
    352a:	d0ec      	beq.n	3506 <xQueueGenericSend+0x1e>
    352c:	b672      	cpsid	i
    352e:	e7fe      	b.n	352e <xQueueGenericSend+0x46>
    3530:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    3532:	4b44      	ldr	r3, [pc, #272]	; (3644 <xQueueGenericSend+0x15c>)
    3534:	4698      	mov	r8, r3
    3536:	e04c      	b.n	35d2 <xQueueGenericSend+0xea>
    3538:	2600      	movs	r6, #0
    353a:	e7fa      	b.n	3532 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    353c:	002a      	movs	r2, r5
    353e:	0039      	movs	r1, r7
    3540:	0020      	movs	r0, r4
    3542:	4b41      	ldr	r3, [pc, #260]	; (3648 <xQueueGenericSend+0x160>)
    3544:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    3546:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3548:	2b00      	cmp	r3, #0
    354a:	d00f      	beq.n	356c <xQueueGenericSend+0x84>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    354c:	0029      	movs	r1, r5
    354e:	0020      	movs	r0, r4
    3550:	4b3e      	ldr	r3, [pc, #248]	; (364c <xQueueGenericSend+0x164>)
    3552:	4798      	blx	r3
    3554:	2800      	cmp	r0, #0
    3556:	d001      	beq.n	355c <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    3558:	4b3d      	ldr	r3, [pc, #244]	; (3650 <xQueueGenericSend+0x168>)
    355a:	4798      	blx	r3
				taskEXIT_CRITICAL();
    355c:	4b3d      	ldr	r3, [pc, #244]	; (3654 <xQueueGenericSend+0x16c>)
    355e:	4798      	blx	r3
				return pdPASS;
    3560:	2001      	movs	r0, #1
}
    3562:	b005      	add	sp, #20
    3564:	bc0c      	pop	{r2, r3}
    3566:	4690      	mov	r8, r2
    3568:	4699      	mov	r9, r3
    356a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    356c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    356e:	2b00      	cmp	r3, #0
    3570:	d008      	beq.n	3584 <xQueueGenericSend+0x9c>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3572:	0020      	movs	r0, r4
    3574:	3024      	adds	r0, #36	; 0x24
    3576:	4b38      	ldr	r3, [pc, #224]	; (3658 <xQueueGenericSend+0x170>)
    3578:	4798      	blx	r3
    357a:	2800      	cmp	r0, #0
    357c:	d0ee      	beq.n	355c <xQueueGenericSend+0x74>
								queueYIELD_IF_USING_PREEMPTION();
    357e:	4b34      	ldr	r3, [pc, #208]	; (3650 <xQueueGenericSend+0x168>)
    3580:	4798      	blx	r3
    3582:	e7eb      	b.n	355c <xQueueGenericSend+0x74>
						else if( xYieldRequired != pdFALSE )
    3584:	2800      	cmp	r0, #0
    3586:	d0e9      	beq.n	355c <xQueueGenericSend+0x74>
							queueYIELD_IF_USING_PREEMPTION();
    3588:	4b31      	ldr	r3, [pc, #196]	; (3650 <xQueueGenericSend+0x168>)
    358a:	4798      	blx	r3
    358c:	e7e6      	b.n	355c <xQueueGenericSend+0x74>
					taskEXIT_CRITICAL();
    358e:	4b31      	ldr	r3, [pc, #196]	; (3654 <xQueueGenericSend+0x16c>)
    3590:	4798      	blx	r3
					return errQUEUE_FULL;
    3592:	2000      	movs	r0, #0
    3594:	e7e5      	b.n	3562 <xQueueGenericSend+0x7a>
		prvLockQueue( pxQueue );
    3596:	4b2f      	ldr	r3, [pc, #188]	; (3654 <xQueueGenericSend+0x16c>)
    3598:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    359a:	a901      	add	r1, sp, #4
    359c:	a802      	add	r0, sp, #8
    359e:	4b2f      	ldr	r3, [pc, #188]	; (365c <xQueueGenericSend+0x174>)
    35a0:	4798      	blx	r3
    35a2:	2800      	cmp	r0, #0
    35a4:	d144      	bne.n	3630 <xQueueGenericSend+0x148>
	taskENTER_CRITICAL();
    35a6:	4b27      	ldr	r3, [pc, #156]	; (3644 <xQueueGenericSend+0x15c>)
    35a8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    35aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    35ac:	4699      	mov	r9, r3
    35ae:	6be6      	ldr	r6, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    35b0:	4b28      	ldr	r3, [pc, #160]	; (3654 <xQueueGenericSend+0x16c>)
    35b2:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    35b4:	45b1      	cmp	r9, r6
    35b6:	d135      	bne.n	3624 <xQueueGenericSend+0x13c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    35b8:	0020      	movs	r0, r4
    35ba:	3010      	adds	r0, #16
    35bc:	9901      	ldr	r1, [sp, #4]
    35be:	4b28      	ldr	r3, [pc, #160]	; (3660 <xQueueGenericSend+0x178>)
    35c0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    35c2:	0020      	movs	r0, r4
    35c4:	4b27      	ldr	r3, [pc, #156]	; (3664 <xQueueGenericSend+0x17c>)
    35c6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    35c8:	4b27      	ldr	r3, [pc, #156]	; (3668 <xQueueGenericSend+0x180>)
    35ca:	4798      	blx	r3
    35cc:	2800      	cmp	r0, #0
    35ce:	d026      	beq.n	361e <xQueueGenericSend+0x136>
    35d0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    35d2:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    35d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    35d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    35d8:	4293      	cmp	r3, r2
    35da:	d3af      	bcc.n	353c <xQueueGenericSend+0x54>
    35dc:	2d02      	cmp	r5, #2
    35de:	d0ad      	beq.n	353c <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
    35e0:	9b01      	ldr	r3, [sp, #4]
    35e2:	2b00      	cmp	r3, #0
    35e4:	d0d3      	beq.n	358e <xQueueGenericSend+0xa6>
				else if( xEntryTimeSet == pdFALSE )
    35e6:	2e00      	cmp	r6, #0
    35e8:	d102      	bne.n	35f0 <xQueueGenericSend+0x108>
					vTaskInternalSetTimeOutState( &xTimeOut );
    35ea:	a802      	add	r0, sp, #8
    35ec:	4b1f      	ldr	r3, [pc, #124]	; (366c <xQueueGenericSend+0x184>)
    35ee:	4798      	blx	r3
		taskEXIT_CRITICAL();
    35f0:	4b18      	ldr	r3, [pc, #96]	; (3654 <xQueueGenericSend+0x16c>)
    35f2:	4798      	blx	r3
		vTaskSuspendAll();
    35f4:	4b1e      	ldr	r3, [pc, #120]	; (3670 <xQueueGenericSend+0x188>)
    35f6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    35f8:	4b12      	ldr	r3, [pc, #72]	; (3644 <xQueueGenericSend+0x15c>)
    35fa:	4798      	blx	r3
    35fc:	2344      	movs	r3, #68	; 0x44
    35fe:	5ce3      	ldrb	r3, [r4, r3]
    3600:	b25b      	sxtb	r3, r3
    3602:	3301      	adds	r3, #1
    3604:	d102      	bne.n	360c <xQueueGenericSend+0x124>
    3606:	2200      	movs	r2, #0
    3608:	2344      	movs	r3, #68	; 0x44
    360a:	54e2      	strb	r2, [r4, r3]
    360c:	2345      	movs	r3, #69	; 0x45
    360e:	5ce3      	ldrb	r3, [r4, r3]
    3610:	b25b      	sxtb	r3, r3
    3612:	3301      	adds	r3, #1
    3614:	d1bf      	bne.n	3596 <xQueueGenericSend+0xae>
    3616:	2200      	movs	r2, #0
    3618:	2345      	movs	r3, #69	; 0x45
    361a:	54e2      	strb	r2, [r4, r3]
    361c:	e7bb      	b.n	3596 <xQueueGenericSend+0xae>
					portYIELD_WITHIN_API();
    361e:	4b0c      	ldr	r3, [pc, #48]	; (3650 <xQueueGenericSend+0x168>)
    3620:	4798      	blx	r3
    3622:	e7d5      	b.n	35d0 <xQueueGenericSend+0xe8>
				prvUnlockQueue( pxQueue );
    3624:	0020      	movs	r0, r4
    3626:	4b0f      	ldr	r3, [pc, #60]	; (3664 <xQueueGenericSend+0x17c>)
    3628:	4798      	blx	r3
				( void ) xTaskResumeAll();
    362a:	4b0f      	ldr	r3, [pc, #60]	; (3668 <xQueueGenericSend+0x180>)
    362c:	4798      	blx	r3
    362e:	e7cf      	b.n	35d0 <xQueueGenericSend+0xe8>
			prvUnlockQueue( pxQueue );
    3630:	0020      	movs	r0, r4
    3632:	4b0c      	ldr	r3, [pc, #48]	; (3664 <xQueueGenericSend+0x17c>)
    3634:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3636:	4b0c      	ldr	r3, [pc, #48]	; (3668 <xQueueGenericSend+0x180>)
    3638:	4798      	blx	r3
			return errQUEUE_FULL;
    363a:	2000      	movs	r0, #0
    363c:	e791      	b.n	3562 <xQueueGenericSend+0x7a>
    363e:	46c0      	nop			; (mov r8, r8)
    3640:	0000410d 	.word	0x0000410d
    3644:	00003115 	.word	0x00003115
    3648:	00003269 	.word	0x00003269
    364c:	000032e5 	.word	0x000032e5
    3650:	000030fd 	.word	0x000030fd
    3654:	0000312d 	.word	0x0000312d
    3658:	00003ff1 	.word	0x00003ff1
    365c:	00004091 	.word	0x00004091
    3660:	00003f8d 	.word	0x00003f8d
    3664:	00003375 	.word	0x00003375
    3668:	00003db1 	.word	0x00003db1
    366c:	00004079 	.word	0x00004079
    3670:	00003c75 	.word	0x00003c75

00003674 <xQueueGenericSendFromISR>:
{
    3674:	b5f0      	push	{r4, r5, r6, r7, lr}
    3676:	b083      	sub	sp, #12
    3678:	0004      	movs	r4, r0
    367a:	9101      	str	r1, [sp, #4]
    367c:	0016      	movs	r6, r2
    367e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
    3680:	2800      	cmp	r0, #0
    3682:	d012      	beq.n	36aa <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3684:	9b01      	ldr	r3, [sp, #4]
    3686:	2b00      	cmp	r3, #0
    3688:	d011      	beq.n	36ae <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    368a:	2d02      	cmp	r5, #2
    368c:	d014      	beq.n	36b8 <xQueueGenericSendFromISR+0x44>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    368e:	4b28      	ldr	r3, [pc, #160]	; (3730 <xQueueGenericSendFromISR+0xbc>)
    3690:	4798      	blx	r3
    3692:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    3694:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3696:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3698:	429a      	cmp	r2, r3
    369a:	d82f      	bhi.n	36fc <xQueueGenericSendFromISR+0x88>
			xReturn = errQUEUE_FULL;
    369c:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    369e:	9800      	ldr	r0, [sp, #0]
    36a0:	4b24      	ldr	r3, [pc, #144]	; (3734 <xQueueGenericSendFromISR+0xc0>)
    36a2:	4798      	blx	r3
}
    36a4:	0028      	movs	r0, r5
    36a6:	b003      	add	sp, #12
    36a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
    36aa:	b672      	cpsid	i
    36ac:	e7fe      	b.n	36ac <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    36ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
    36b0:	2b00      	cmp	r3, #0
    36b2:	d0ea      	beq.n	368a <xQueueGenericSendFromISR+0x16>
    36b4:	b672      	cpsid	i
    36b6:	e7fe      	b.n	36b6 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    36b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    36ba:	2b01      	cmp	r3, #1
    36bc:	d01a      	beq.n	36f4 <xQueueGenericSendFromISR+0x80>
    36be:	b672      	cpsid	i
    36c0:	e7fe      	b.n	36c0 <xQueueGenericSendFromISR+0x4c>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    36c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
			xReturn = pdPASS;
    36c4:	2501      	movs	r5, #1
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    36c6:	2b00      	cmp	r3, #0
    36c8:	d0e9      	beq.n	369e <xQueueGenericSendFromISR+0x2a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    36ca:	0020      	movs	r0, r4
    36cc:	3024      	adds	r0, #36	; 0x24
    36ce:	4b1a      	ldr	r3, [pc, #104]	; (3738 <xQueueGenericSendFromISR+0xc4>)
    36d0:	4798      	blx	r3
    36d2:	2800      	cmp	r0, #0
    36d4:	d0e3      	beq.n	369e <xQueueGenericSendFromISR+0x2a>
								if( pxHigherPriorityTaskWoken != NULL )
    36d6:	2e00      	cmp	r6, #0
    36d8:	d00a      	beq.n	36f0 <xQueueGenericSendFromISR+0x7c>
									*pxHigherPriorityTaskWoken = pdTRUE;
    36da:	2301      	movs	r3, #1
    36dc:	6033      	str	r3, [r6, #0]
    36de:	e7de      	b.n	369e <xQueueGenericSendFromISR+0x2a>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    36e0:	1c7b      	adds	r3, r7, #1
    36e2:	b25b      	sxtb	r3, r3
    36e4:	2245      	movs	r2, #69	; 0x45
    36e6:	54a3      	strb	r3, [r4, r2]
			xReturn = pdPASS;
    36e8:	2501      	movs	r5, #1
    36ea:	e7d8      	b.n	369e <xQueueGenericSendFromISR+0x2a>
    36ec:	2501      	movs	r5, #1
    36ee:	e7d6      	b.n	369e <xQueueGenericSendFromISR+0x2a>
    36f0:	2501      	movs	r5, #1
    36f2:	e7d4      	b.n	369e <xQueueGenericSendFromISR+0x2a>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    36f4:	4b0e      	ldr	r3, [pc, #56]	; (3730 <xQueueGenericSendFromISR+0xbc>)
    36f6:	4798      	blx	r3
    36f8:	9000      	str	r0, [sp, #0]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    36fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
    36fc:	2345      	movs	r3, #69	; 0x45
    36fe:	5ce7      	ldrb	r7, [r4, r3]
    3700:	b27f      	sxtb	r7, r7
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3702:	002a      	movs	r2, r5
    3704:	9901      	ldr	r1, [sp, #4]
    3706:	0020      	movs	r0, r4
    3708:	4b0c      	ldr	r3, [pc, #48]	; (373c <xQueueGenericSendFromISR+0xc8>)
    370a:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    370c:	1c7b      	adds	r3, r7, #1
    370e:	d1e7      	bne.n	36e0 <xQueueGenericSendFromISR+0x6c>
					if( pxQueue->pxQueueSetContainer != NULL )
    3710:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3712:	2b00      	cmp	r3, #0
    3714:	d0d5      	beq.n	36c2 <xQueueGenericSendFromISR+0x4e>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3716:	0029      	movs	r1, r5
    3718:	0020      	movs	r0, r4
    371a:	4b09      	ldr	r3, [pc, #36]	; (3740 <xQueueGenericSendFromISR+0xcc>)
    371c:	4798      	blx	r3
			xReturn = pdPASS;
    371e:	2501      	movs	r5, #1
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    3720:	2800      	cmp	r0, #0
    3722:	d0bc      	beq.n	369e <xQueueGenericSendFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
    3724:	2e00      	cmp	r6, #0
    3726:	d0e1      	beq.n	36ec <xQueueGenericSendFromISR+0x78>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3728:	2301      	movs	r3, #1
    372a:	6033      	str	r3, [r6, #0]
    372c:	e7b7      	b.n	369e <xQueueGenericSendFromISR+0x2a>
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	0000314d 	.word	0x0000314d
    3734:	00003155 	.word	0x00003155
    3738:	00003ff1 	.word	0x00003ff1
    373c:	00003269 	.word	0x00003269
    3740:	000032e5 	.word	0x000032e5

00003744 <xQueueReceive>:
{
    3744:	b5f0      	push	{r4, r5, r6, r7, lr}
    3746:	46c6      	mov	lr, r8
    3748:	b500      	push	{lr}
    374a:	b084      	sub	sp, #16
    374c:	0004      	movs	r4, r0
    374e:	000f      	movs	r7, r1
    3750:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    3752:	2800      	cmp	r0, #0
    3754:	d00a      	beq.n	376c <xQueueReceive+0x28>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3756:	2900      	cmp	r1, #0
    3758:	d00a      	beq.n	3770 <xQueueReceive+0x2c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    375a:	4b42      	ldr	r3, [pc, #264]	; (3864 <xQueueReceive+0x120>)
    375c:	4798      	blx	r3
    375e:	2800      	cmp	r0, #0
    3760:	d10b      	bne.n	377a <xQueueReceive+0x36>
    3762:	9b01      	ldr	r3, [sp, #4]
    3764:	2b00      	cmp	r3, #0
    3766:	d00c      	beq.n	3782 <xQueueReceive+0x3e>
    3768:	b672      	cpsid	i
    376a:	e7fe      	b.n	376a <xQueueReceive+0x26>
	configASSERT( ( pxQueue ) );
    376c:	b672      	cpsid	i
    376e:	e7fe      	b.n	376e <xQueueReceive+0x2a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    3770:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3772:	2b00      	cmp	r3, #0
    3774:	d0f1      	beq.n	375a <xQueueReceive+0x16>
    3776:	b672      	cpsid	i
    3778:	e7fe      	b.n	3778 <xQueueReceive+0x34>
    377a:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
    377c:	4b3a      	ldr	r3, [pc, #232]	; (3868 <xQueueReceive+0x124>)
    377e:	4698      	mov	r8, r3
    3780:	e02f      	b.n	37e2 <xQueueReceive+0x9e>
    3782:	2600      	movs	r6, #0
    3784:	e7fa      	b.n	377c <xQueueReceive+0x38>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3786:	0039      	movs	r1, r7
    3788:	0020      	movs	r0, r4
    378a:	4b38      	ldr	r3, [pc, #224]	; (386c <xQueueReceive+0x128>)
    378c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    378e:	3d01      	subs	r5, #1
    3790:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3792:	6923      	ldr	r3, [r4, #16]
    3794:	2b00      	cmp	r3, #0
    3796:	d007      	beq.n	37a8 <xQueueReceive+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3798:	0020      	movs	r0, r4
    379a:	3010      	adds	r0, #16
    379c:	4b34      	ldr	r3, [pc, #208]	; (3870 <xQueueReceive+0x12c>)
    379e:	4798      	blx	r3
    37a0:	2800      	cmp	r0, #0
    37a2:	d001      	beq.n	37a8 <xQueueReceive+0x64>
						queueYIELD_IF_USING_PREEMPTION();
    37a4:	4b33      	ldr	r3, [pc, #204]	; (3874 <xQueueReceive+0x130>)
    37a6:	4798      	blx	r3
				taskEXIT_CRITICAL();
    37a8:	4b33      	ldr	r3, [pc, #204]	; (3878 <xQueueReceive+0x134>)
    37aa:	4798      	blx	r3
				return pdPASS;
    37ac:	2001      	movs	r0, #1
}
    37ae:	b004      	add	sp, #16
    37b0:	bc04      	pop	{r2}
    37b2:	4690      	mov	r8, r2
    37b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
    37b6:	4b30      	ldr	r3, [pc, #192]	; (3878 <xQueueReceive+0x134>)
    37b8:	4798      	blx	r3
					return errQUEUE_EMPTY;
    37ba:	2000      	movs	r0, #0
    37bc:	e7f7      	b.n	37ae <xQueueReceive+0x6a>
					vTaskInternalSetTimeOutState( &xTimeOut );
    37be:	a802      	add	r0, sp, #8
    37c0:	4b2e      	ldr	r3, [pc, #184]	; (387c <xQueueReceive+0x138>)
    37c2:	4798      	blx	r3
    37c4:	e016      	b.n	37f4 <xQueueReceive+0xb0>
		prvLockQueue( pxQueue );
    37c6:	2200      	movs	r2, #0
    37c8:	2344      	movs	r3, #68	; 0x44
    37ca:	54e2      	strb	r2, [r4, r3]
    37cc:	e01d      	b.n	380a <xQueueReceive+0xc6>
    37ce:	2200      	movs	r2, #0
    37d0:	2345      	movs	r3, #69	; 0x45
    37d2:	54e2      	strb	r2, [r4, r3]
    37d4:	e01e      	b.n	3814 <xQueueReceive+0xd0>
				prvUnlockQueue( pxQueue );
    37d6:	0020      	movs	r0, r4
    37d8:	4b29      	ldr	r3, [pc, #164]	; (3880 <xQueueReceive+0x13c>)
    37da:	4798      	blx	r3
				( void ) xTaskResumeAll();
    37dc:	4b29      	ldr	r3, [pc, #164]	; (3884 <xQueueReceive+0x140>)
    37de:	4798      	blx	r3
    37e0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    37e2:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    37e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    37e6:	2d00      	cmp	r5, #0
    37e8:	d1cd      	bne.n	3786 <xQueueReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
    37ea:	9b01      	ldr	r3, [sp, #4]
    37ec:	2b00      	cmp	r3, #0
    37ee:	d0e2      	beq.n	37b6 <xQueueReceive+0x72>
				else if( xEntryTimeSet == pdFALSE )
    37f0:	2e00      	cmp	r6, #0
    37f2:	d0e4      	beq.n	37be <xQueueReceive+0x7a>
		taskEXIT_CRITICAL();
    37f4:	4b20      	ldr	r3, [pc, #128]	; (3878 <xQueueReceive+0x134>)
    37f6:	4798      	blx	r3
		vTaskSuspendAll();
    37f8:	4b23      	ldr	r3, [pc, #140]	; (3888 <xQueueReceive+0x144>)
    37fa:	4798      	blx	r3
		prvLockQueue( pxQueue );
    37fc:	4b1a      	ldr	r3, [pc, #104]	; (3868 <xQueueReceive+0x124>)
    37fe:	4798      	blx	r3
    3800:	2344      	movs	r3, #68	; 0x44
    3802:	5ce3      	ldrb	r3, [r4, r3]
    3804:	b25b      	sxtb	r3, r3
    3806:	3301      	adds	r3, #1
    3808:	d0dd      	beq.n	37c6 <xQueueReceive+0x82>
    380a:	2345      	movs	r3, #69	; 0x45
    380c:	5ce3      	ldrb	r3, [r4, r3]
    380e:	b25b      	sxtb	r3, r3
    3810:	3301      	adds	r3, #1
    3812:	d0dc      	beq.n	37ce <xQueueReceive+0x8a>
    3814:	4b18      	ldr	r3, [pc, #96]	; (3878 <xQueueReceive+0x134>)
    3816:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3818:	a901      	add	r1, sp, #4
    381a:	a802      	add	r0, sp, #8
    381c:	4b1b      	ldr	r3, [pc, #108]	; (388c <xQueueReceive+0x148>)
    381e:	4798      	blx	r3
    3820:	2800      	cmp	r0, #0
    3822:	d113      	bne.n	384c <xQueueReceive+0x108>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3824:	0020      	movs	r0, r4
    3826:	4b1a      	ldr	r3, [pc, #104]	; (3890 <xQueueReceive+0x14c>)
    3828:	4798      	blx	r3
    382a:	2800      	cmp	r0, #0
    382c:	d0d3      	beq.n	37d6 <xQueueReceive+0x92>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    382e:	0020      	movs	r0, r4
    3830:	3024      	adds	r0, #36	; 0x24
    3832:	9901      	ldr	r1, [sp, #4]
    3834:	4b17      	ldr	r3, [pc, #92]	; (3894 <xQueueReceive+0x150>)
    3836:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    3838:	0020      	movs	r0, r4
    383a:	4b11      	ldr	r3, [pc, #68]	; (3880 <xQueueReceive+0x13c>)
    383c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    383e:	4b11      	ldr	r3, [pc, #68]	; (3884 <xQueueReceive+0x140>)
    3840:	4798      	blx	r3
    3842:	2800      	cmp	r0, #0
    3844:	d1cc      	bne.n	37e0 <xQueueReceive+0x9c>
					portYIELD_WITHIN_API();
    3846:	4b0b      	ldr	r3, [pc, #44]	; (3874 <xQueueReceive+0x130>)
    3848:	4798      	blx	r3
    384a:	e7c9      	b.n	37e0 <xQueueReceive+0x9c>
			prvUnlockQueue( pxQueue );
    384c:	0020      	movs	r0, r4
    384e:	4b0c      	ldr	r3, [pc, #48]	; (3880 <xQueueReceive+0x13c>)
    3850:	4798      	blx	r3
			( void ) xTaskResumeAll();
    3852:	4b0c      	ldr	r3, [pc, #48]	; (3884 <xQueueReceive+0x140>)
    3854:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3856:	0020      	movs	r0, r4
    3858:	4b0d      	ldr	r3, [pc, #52]	; (3890 <xQueueReceive+0x14c>)
    385a:	4798      	blx	r3
    385c:	2800      	cmp	r0, #0
    385e:	d0bf      	beq.n	37e0 <xQueueReceive+0x9c>
				return errQUEUE_EMPTY;
    3860:	2000      	movs	r0, #0
    3862:	e7a4      	b.n	37ae <xQueueReceive+0x6a>
    3864:	0000410d 	.word	0x0000410d
    3868:	00003115 	.word	0x00003115
    386c:	0000334d 	.word	0x0000334d
    3870:	00003ff1 	.word	0x00003ff1
    3874:	000030fd 	.word	0x000030fd
    3878:	0000312d 	.word	0x0000312d
    387c:	00004079 	.word	0x00004079
    3880:	00003375 	.word	0x00003375
    3884:	00003db1 	.word	0x00003db1
    3888:	00003c75 	.word	0x00003c75
    388c:	00004091 	.word	0x00004091
    3890:	0000324d 	.word	0x0000324d
    3894:	00003f8d 	.word	0x00003f8d

00003898 <vQueueWaitForMessageRestricted>:
	{
    3898:	b570      	push	{r4, r5, r6, lr}
    389a:	0004      	movs	r4, r0
    389c:	000d      	movs	r5, r1
    389e:	0016      	movs	r6, r2
		prvLockQueue( pxQueue );
    38a0:	4b11      	ldr	r3, [pc, #68]	; (38e8 <vQueueWaitForMessageRestricted+0x50>)
    38a2:	4798      	blx	r3
    38a4:	2344      	movs	r3, #68	; 0x44
    38a6:	5ce3      	ldrb	r3, [r4, r3]
    38a8:	b25b      	sxtb	r3, r3
    38aa:	3301      	adds	r3, #1
    38ac:	d00d      	beq.n	38ca <vQueueWaitForMessageRestricted+0x32>
    38ae:	2345      	movs	r3, #69	; 0x45
    38b0:	5ce3      	ldrb	r3, [r4, r3]
    38b2:	b25b      	sxtb	r3, r3
    38b4:	3301      	adds	r3, #1
    38b6:	d00c      	beq.n	38d2 <vQueueWaitForMessageRestricted+0x3a>
    38b8:	4b0c      	ldr	r3, [pc, #48]	; (38ec <vQueueWaitForMessageRestricted+0x54>)
    38ba:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    38bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    38be:	2b00      	cmp	r3, #0
    38c0:	d00b      	beq.n	38da <vQueueWaitForMessageRestricted+0x42>
		prvUnlockQueue( pxQueue );
    38c2:	0020      	movs	r0, r4
    38c4:	4b0a      	ldr	r3, [pc, #40]	; (38f0 <vQueueWaitForMessageRestricted+0x58>)
    38c6:	4798      	blx	r3
	}
    38c8:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
    38ca:	2200      	movs	r2, #0
    38cc:	2344      	movs	r3, #68	; 0x44
    38ce:	54e2      	strb	r2, [r4, r3]
    38d0:	e7ed      	b.n	38ae <vQueueWaitForMessageRestricted+0x16>
    38d2:	2200      	movs	r2, #0
    38d4:	2345      	movs	r3, #69	; 0x45
    38d6:	54e2      	strb	r2, [r4, r3]
    38d8:	e7ee      	b.n	38b8 <vQueueWaitForMessageRestricted+0x20>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    38da:	0020      	movs	r0, r4
    38dc:	3024      	adds	r0, #36	; 0x24
    38de:	0032      	movs	r2, r6
    38e0:	0029      	movs	r1, r5
    38e2:	4b04      	ldr	r3, [pc, #16]	; (38f4 <vQueueWaitForMessageRestricted+0x5c>)
    38e4:	4798      	blx	r3
    38e6:	e7ec      	b.n	38c2 <vQueueWaitForMessageRestricted+0x2a>
    38e8:	00003115 	.word	0x00003115
    38ec:	0000312d 	.word	0x0000312d
    38f0:	00003375 	.word	0x00003375
    38f4:	00003fb9 	.word	0x00003fb9

000038f8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    38f8:	4b08      	ldr	r3, [pc, #32]	; (391c <prvResetNextTaskUnblockTime+0x24>)
    38fa:	681b      	ldr	r3, [r3, #0]
    38fc:	681b      	ldr	r3, [r3, #0]
    38fe:	2b00      	cmp	r3, #0
    3900:	d007      	beq.n	3912 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3902:	4b06      	ldr	r3, [pc, #24]	; (391c <prvResetNextTaskUnblockTime+0x24>)
    3904:	681b      	ldr	r3, [r3, #0]
    3906:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    3908:	68db      	ldr	r3, [r3, #12]
    390a:	685a      	ldr	r2, [r3, #4]
    390c:	4b04      	ldr	r3, [pc, #16]	; (3920 <prvResetNextTaskUnblockTime+0x28>)
    390e:	601a      	str	r2, [r3, #0]
	}
}
    3910:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    3912:	2201      	movs	r2, #1
    3914:	4252      	negs	r2, r2
    3916:	4b02      	ldr	r3, [pc, #8]	; (3920 <prvResetNextTaskUnblockTime+0x28>)
    3918:	601a      	str	r2, [r3, #0]
    391a:	e7f9      	b.n	3910 <prvResetNextTaskUnblockTime+0x18>
    391c:	20003fe8 	.word	0x20003fe8
    3920:	20004098 	.word	0x20004098

00003924 <prvIdleTask>:
{
    3924:	b5f0      	push	{r4, r5, r6, r7, lr}
    3926:	46d6      	mov	lr, sl
    3928:	464f      	mov	r7, r9
    392a:	4646      	mov	r6, r8
    392c:	b5c0      	push	{r6, r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    392e:	4b14      	ldr	r3, [pc, #80]	; (3980 <prvIdleTask+0x5c>)
    3930:	4699      	mov	r9, r3
			taskENTER_CRITICAL();
    3932:	4b14      	ldr	r3, [pc, #80]	; (3984 <prvIdleTask+0x60>)
    3934:	4698      	mov	r8, r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3936:	4f14      	ldr	r7, [pc, #80]	; (3988 <prvIdleTask+0x64>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3938:	4b14      	ldr	r3, [pc, #80]	; (398c <prvIdleTask+0x68>)
    393a:	469a      	mov	sl, r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    393c:	464b      	mov	r3, r9
    393e:	681b      	ldr	r3, [r3, #0]
    3940:	2b00      	cmp	r3, #0
    3942:	d016      	beq.n	3972 <prvIdleTask+0x4e>
			taskENTER_CRITICAL();
    3944:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3946:	68fb      	ldr	r3, [r7, #12]
    3948:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    394a:	1d28      	adds	r0, r5, #4
    394c:	47d0      	blx	sl
				--uxCurrentNumberOfTasks;
    394e:	4a10      	ldr	r2, [pc, #64]	; (3990 <prvIdleTask+0x6c>)
    3950:	6813      	ldr	r3, [r2, #0]
    3952:	3b01      	subs	r3, #1
    3954:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    3956:	4c0a      	ldr	r4, [pc, #40]	; (3980 <prvIdleTask+0x5c>)
    3958:	6823      	ldr	r3, [r4, #0]
    395a:	3b01      	subs	r3, #1
    395c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    395e:	4b0d      	ldr	r3, [pc, #52]	; (3994 <prvIdleTask+0x70>)
    3960:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    3962:	6b28      	ldr	r0, [r5, #48]	; 0x30
    3964:	4e0c      	ldr	r6, [pc, #48]	; (3998 <prvIdleTask+0x74>)
    3966:	47b0      	blx	r6
			vPortFree( pxTCB );
    3968:	0028      	movs	r0, r5
    396a:	47b0      	blx	r6
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    396c:	6823      	ldr	r3, [r4, #0]
    396e:	2b00      	cmp	r3, #0
    3970:	d1e8      	bne.n	3944 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    3972:	4b0a      	ldr	r3, [pc, #40]	; (399c <prvIdleTask+0x78>)
    3974:	681b      	ldr	r3, [r3, #0]
    3976:	2b01      	cmp	r3, #1
    3978:	d9e0      	bls.n	393c <prvIdleTask+0x18>
				taskYIELD();
    397a:	4b09      	ldr	r3, [pc, #36]	; (39a0 <prvIdleTask+0x7c>)
    397c:	4798      	blx	r3
    397e:	e7dd      	b.n	393c <prvIdleTask+0x18>
    3980:	20004058 	.word	0x20004058
    3984:	00003115 	.word	0x00003115
    3988:	200040cc 	.word	0x200040cc
    398c:	00002fdb 	.word	0x00002fdb
    3990:	20004054 	.word	0x20004054
    3994:	0000312d 	.word	0x0000312d
    3998:	00003241 	.word	0x00003241
    399c:	20003ff0 	.word	0x20003ff0
    39a0:	000030fd 	.word	0x000030fd

000039a4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    39a4:	b570      	push	{r4, r5, r6, lr}
    39a6:	0004      	movs	r4, r0
    39a8:	000d      	movs	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    39aa:	4b17      	ldr	r3, [pc, #92]	; (3a08 <prvAddCurrentTaskToDelayedList+0x64>)
    39ac:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    39ae:	4b17      	ldr	r3, [pc, #92]	; (3a0c <prvAddCurrentTaskToDelayedList+0x68>)
    39b0:	6818      	ldr	r0, [r3, #0]
    39b2:	3004      	adds	r0, #4
    39b4:	4b16      	ldr	r3, [pc, #88]	; (3a10 <prvAddCurrentTaskToDelayedList+0x6c>)
    39b6:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    39b8:	1c63      	adds	r3, r4, #1
    39ba:	d013      	beq.n	39e4 <prvAddCurrentTaskToDelayedList+0x40>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    39bc:	1934      	adds	r4, r6, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    39be:	4b13      	ldr	r3, [pc, #76]	; (3a0c <prvAddCurrentTaskToDelayedList+0x68>)
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    39c4:	42a6      	cmp	r6, r4
    39c6:	d816      	bhi.n	39f6 <prvAddCurrentTaskToDelayedList+0x52>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    39c8:	4b12      	ldr	r3, [pc, #72]	; (3a14 <prvAddCurrentTaskToDelayedList+0x70>)
    39ca:	6818      	ldr	r0, [r3, #0]
    39cc:	4b0f      	ldr	r3, [pc, #60]	; (3a0c <prvAddCurrentTaskToDelayedList+0x68>)
    39ce:	6819      	ldr	r1, [r3, #0]
    39d0:	3104      	adds	r1, #4
    39d2:	4b11      	ldr	r3, [pc, #68]	; (3a18 <prvAddCurrentTaskToDelayedList+0x74>)
    39d4:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    39d6:	4b11      	ldr	r3, [pc, #68]	; (3a1c <prvAddCurrentTaskToDelayedList+0x78>)
    39d8:	681b      	ldr	r3, [r3, #0]
    39da:	429c      	cmp	r4, r3
    39dc:	d212      	bcs.n	3a04 <prvAddCurrentTaskToDelayedList+0x60>
				{
					xNextTaskUnblockTime = xTimeToWake;
    39de:	4b0f      	ldr	r3, [pc, #60]	; (3a1c <prvAddCurrentTaskToDelayedList+0x78>)
    39e0:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    39e2:	e00f      	b.n	3a04 <prvAddCurrentTaskToDelayedList+0x60>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    39e4:	2d00      	cmp	r5, #0
    39e6:	d0e9      	beq.n	39bc <prvAddCurrentTaskToDelayedList+0x18>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    39e8:	4b08      	ldr	r3, [pc, #32]	; (3a0c <prvAddCurrentTaskToDelayedList+0x68>)
    39ea:	6819      	ldr	r1, [r3, #0]
    39ec:	3104      	adds	r1, #4
    39ee:	480c      	ldr	r0, [pc, #48]	; (3a20 <prvAddCurrentTaskToDelayedList+0x7c>)
    39f0:	4b0c      	ldr	r3, [pc, #48]	; (3a24 <prvAddCurrentTaskToDelayedList+0x80>)
    39f2:	4798      	blx	r3
    39f4:	e006      	b.n	3a04 <prvAddCurrentTaskToDelayedList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    39f6:	4b0c      	ldr	r3, [pc, #48]	; (3a28 <prvAddCurrentTaskToDelayedList+0x84>)
    39f8:	6818      	ldr	r0, [r3, #0]
    39fa:	4b04      	ldr	r3, [pc, #16]	; (3a0c <prvAddCurrentTaskToDelayedList+0x68>)
    39fc:	6819      	ldr	r1, [r3, #0]
    39fe:	3104      	adds	r1, #4
    3a00:	4b05      	ldr	r3, [pc, #20]	; (3a18 <prvAddCurrentTaskToDelayedList+0x74>)
    3a02:	4798      	blx	r3
}
    3a04:	bd70      	pop	{r4, r5, r6, pc}
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	200040e0 	.word	0x200040e0
    3a0c:	20003fe4 	.word	0x20003fe4
    3a10:	00002fdb 	.word	0x00002fdb
    3a14:	20003fe8 	.word	0x20003fe8
    3a18:	00002fad 	.word	0x00002fad
    3a1c:	20004098 	.word	0x20004098
    3a20:	200040b8 	.word	0x200040b8
    3a24:	00002f95 	.word	0x00002f95
    3a28:	20003fec 	.word	0x20003fec

00003a2c <xTaskCreate>:
	{
    3a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a2e:	46c6      	mov	lr, r8
    3a30:	b500      	push	{lr}
    3a32:	b084      	sub	sp, #16
    3a34:	9001      	str	r0, [sp, #4]
    3a36:	000d      	movs	r5, r1
    3a38:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3a3a:	0097      	lsls	r7, r2, #2
    3a3c:	0038      	movs	r0, r7
    3a3e:	4b5b      	ldr	r3, [pc, #364]	; (3bac <xTaskCreate+0x180>)
    3a40:	4798      	blx	r3
    3a42:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    3a44:	d100      	bne.n	3a48 <xTaskCreate+0x1c>
    3a46:	e081      	b.n	3b4c <xTaskCreate+0x120>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    3a48:	204c      	movs	r0, #76	; 0x4c
    3a4a:	4b58      	ldr	r3, [pc, #352]	; (3bac <xTaskCreate+0x180>)
    3a4c:	4798      	blx	r3
    3a4e:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    3a50:	d100      	bne.n	3a54 <xTaskCreate+0x28>
    3a52:	e078      	b.n	3b46 <xTaskCreate+0x11a>
					pxNewTCB->pxStack = pxStack;
    3a54:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    3a56:	1f38      	subs	r0, r7, #4
    3a58:	1830      	adds	r0, r6, r0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    3a5a:	2307      	movs	r3, #7
    3a5c:	4398      	bics	r0, r3
    3a5e:	4680      	mov	r8, r0
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3a60:	782a      	ldrb	r2, [r5, #0]
    3a62:	332d      	adds	r3, #45	; 0x2d
    3a64:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
    3a66:	782b      	ldrb	r3, [r5, #0]
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d00d      	beq.n	3a88 <xTaskCreate+0x5c>
    3a6c:	3501      	adds	r5, #1
    3a6e:	0023      	movs	r3, r4
    3a70:	3335      	adds	r3, #53	; 0x35
    3a72:	0020      	movs	r0, r4
    3a74:	303c      	adds	r0, #60	; 0x3c
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    3a76:	782a      	ldrb	r2, [r5, #0]
    3a78:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
    3a7a:	782a      	ldrb	r2, [r5, #0]
    3a7c:	2a00      	cmp	r2, #0
    3a7e:	d003      	beq.n	3a88 <xTaskCreate+0x5c>
    3a80:	3501      	adds	r5, #1
    3a82:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    3a84:	4283      	cmp	r3, r0
    3a86:	d1f6      	bne.n	3a76 <xTaskCreate+0x4a>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    3a88:	2200      	movs	r2, #0
    3a8a:	233b      	movs	r3, #59	; 0x3b
    3a8c:	54e2      	strb	r2, [r4, r3]
    3a8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    3a90:	2f04      	cmp	r7, #4
    3a92:	d900      	bls.n	3a96 <xTaskCreate+0x6a>
    3a94:	2704      	movs	r7, #4
	pxNewTCB->uxPriority = uxPriority;
    3a96:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    3a98:	63e7      	str	r7, [r4, #60]	; 0x3c
		pxNewTCB->uxMutexesHeld = 0;
    3a9a:	2600      	movs	r6, #0
    3a9c:	6426      	str	r6, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    3a9e:	1d23      	adds	r3, r4, #4
    3aa0:	9303      	str	r3, [sp, #12]
    3aa2:	0018      	movs	r0, r3
    3aa4:	4d42      	ldr	r5, [pc, #264]	; (3bb0 <xTaskCreate+0x184>)
    3aa6:	47a8      	blx	r5
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    3aa8:	0020      	movs	r0, r4
    3aaa:	3018      	adds	r0, #24
    3aac:	47a8      	blx	r5
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    3aae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3ab0:	2305      	movs	r3, #5
    3ab2:	1bdb      	subs	r3, r3, r7
    3ab4:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    3ab6:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    3ab8:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    3aba:	2348      	movs	r3, #72	; 0x48
    3abc:	54e6      	strb	r6, [r4, r3]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3abe:	9a02      	ldr	r2, [sp, #8]
    3ac0:	9901      	ldr	r1, [sp, #4]
    3ac2:	4640      	mov	r0, r8
    3ac4:	4b3b      	ldr	r3, [pc, #236]	; (3bb4 <xTaskCreate+0x188>)
    3ac6:	4798      	blx	r3
    3ac8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    3aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3acc:	2b00      	cmp	r3, #0
    3ace:	d000      	beq.n	3ad2 <xTaskCreate+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    3ad0:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    3ad2:	4b39      	ldr	r3, [pc, #228]	; (3bb8 <xTaskCreate+0x18c>)
    3ad4:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    3ad6:	4a39      	ldr	r2, [pc, #228]	; (3bbc <xTaskCreate+0x190>)
    3ad8:	6813      	ldr	r3, [r2, #0]
    3ada:	3301      	adds	r3, #1
    3adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    3ade:	4b38      	ldr	r3, [pc, #224]	; (3bc0 <xTaskCreate+0x194>)
    3ae0:	681b      	ldr	r3, [r3, #0]
    3ae2:	2b00      	cmp	r3, #0
    3ae4:	d035      	beq.n	3b52 <xTaskCreate+0x126>
			if( xSchedulerRunning == pdFALSE )
    3ae6:	4b37      	ldr	r3, [pc, #220]	; (3bc4 <xTaskCreate+0x198>)
    3ae8:	681b      	ldr	r3, [r3, #0]
    3aea:	2b00      	cmp	r3, #0
    3aec:	d107      	bne.n	3afe <xTaskCreate+0xd2>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    3aee:	4b34      	ldr	r3, [pc, #208]	; (3bc0 <xTaskCreate+0x194>)
    3af0:	681b      	ldr	r3, [r3, #0]
    3af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3af4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3af6:	4293      	cmp	r3, r2
    3af8:	d801      	bhi.n	3afe <xTaskCreate+0xd2>
					pxCurrentTCB = pxNewTCB;
    3afa:	4b31      	ldr	r3, [pc, #196]	; (3bc0 <xTaskCreate+0x194>)
    3afc:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
    3afe:	4a32      	ldr	r2, [pc, #200]	; (3bc8 <xTaskCreate+0x19c>)
    3b00:	6813      	ldr	r3, [r2, #0]
    3b02:	3301      	adds	r3, #1
    3b04:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
    3b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3b08:	4a30      	ldr	r2, [pc, #192]	; (3bcc <xTaskCreate+0x1a0>)
    3b0a:	6812      	ldr	r2, [r2, #0]
    3b0c:	4293      	cmp	r3, r2
    3b0e:	d901      	bls.n	3b14 <xTaskCreate+0xe8>
    3b10:	4a2e      	ldr	r2, [pc, #184]	; (3bcc <xTaskCreate+0x1a0>)
    3b12:	6013      	str	r3, [r2, #0]
    3b14:	0098      	lsls	r0, r3, #2
    3b16:	18c0      	adds	r0, r0, r3
    3b18:	0080      	lsls	r0, r0, #2
    3b1a:	4b2d      	ldr	r3, [pc, #180]	; (3bd0 <xTaskCreate+0x1a4>)
    3b1c:	1818      	adds	r0, r3, r0
    3b1e:	9903      	ldr	r1, [sp, #12]
    3b20:	4b2c      	ldr	r3, [pc, #176]	; (3bd4 <xTaskCreate+0x1a8>)
    3b22:	4798      	blx	r3
	taskEXIT_CRITICAL();
    3b24:	4b2c      	ldr	r3, [pc, #176]	; (3bd8 <xTaskCreate+0x1ac>)
    3b26:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    3b28:	4b26      	ldr	r3, [pc, #152]	; (3bc4 <xTaskCreate+0x198>)
    3b2a:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
    3b2c:	2001      	movs	r0, #1
	if( xSchedulerRunning != pdFALSE )
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d005      	beq.n	3b3e <xTaskCreate+0x112>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    3b32:	4b23      	ldr	r3, [pc, #140]	; (3bc0 <xTaskCreate+0x194>)
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3b38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3b3a:	429a      	cmp	r2, r3
    3b3c:	d331      	bcc.n	3ba2 <xTaskCreate+0x176>
	}
    3b3e:	b004      	add	sp, #16
    3b40:	bc04      	pop	{r2}
    3b42:	4690      	mov	r8, r2
    3b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    3b46:	0030      	movs	r0, r6
    3b48:	4b24      	ldr	r3, [pc, #144]	; (3bdc <xTaskCreate+0x1b0>)
    3b4a:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3b4c:	2001      	movs	r0, #1
    3b4e:	4240      	negs	r0, r0
    3b50:	e7f5      	b.n	3b3e <xTaskCreate+0x112>
			pxCurrentTCB = pxNewTCB;
    3b52:	4b1b      	ldr	r3, [pc, #108]	; (3bc0 <xTaskCreate+0x194>)
    3b54:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    3b56:	6813      	ldr	r3, [r2, #0]
    3b58:	2b01      	cmp	r3, #1
    3b5a:	d1d0      	bne.n	3afe <xTaskCreate+0xd2>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3b5c:	4f1c      	ldr	r7, [pc, #112]	; (3bd0 <xTaskCreate+0x1a4>)
    3b5e:	0038      	movs	r0, r7
    3b60:	4e1f      	ldr	r6, [pc, #124]	; (3be0 <xTaskCreate+0x1b4>)
    3b62:	47b0      	blx	r6
    3b64:	0038      	movs	r0, r7
    3b66:	3014      	adds	r0, #20
    3b68:	47b0      	blx	r6
    3b6a:	0038      	movs	r0, r7
    3b6c:	3028      	adds	r0, #40	; 0x28
    3b6e:	47b0      	blx	r6
    3b70:	0038      	movs	r0, r7
    3b72:	303c      	adds	r0, #60	; 0x3c
    3b74:	47b0      	blx	r6
    3b76:	0038      	movs	r0, r7
    3b78:	3050      	adds	r0, #80	; 0x50
    3b7a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
    3b7c:	4b19      	ldr	r3, [pc, #100]	; (3be4 <xTaskCreate+0x1b8>)
    3b7e:	4698      	mov	r8, r3
    3b80:	0018      	movs	r0, r3
    3b82:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
    3b84:	4f18      	ldr	r7, [pc, #96]	; (3be8 <xTaskCreate+0x1bc>)
    3b86:	0038      	movs	r0, r7
    3b88:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
    3b8a:	4818      	ldr	r0, [pc, #96]	; (3bec <xTaskCreate+0x1c0>)
    3b8c:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
    3b8e:	4818      	ldr	r0, [pc, #96]	; (3bf0 <xTaskCreate+0x1c4>)
    3b90:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
    3b92:	4818      	ldr	r0, [pc, #96]	; (3bf4 <xTaskCreate+0x1c8>)
    3b94:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
    3b96:	4b18      	ldr	r3, [pc, #96]	; (3bf8 <xTaskCreate+0x1cc>)
    3b98:	4642      	mov	r2, r8
    3b9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3b9c:	4b17      	ldr	r3, [pc, #92]	; (3bfc <xTaskCreate+0x1d0>)
    3b9e:	601f      	str	r7, [r3, #0]
    3ba0:	e7ad      	b.n	3afe <xTaskCreate+0xd2>
			taskYIELD_IF_USING_PREEMPTION();
    3ba2:	4b17      	ldr	r3, [pc, #92]	; (3c00 <xTaskCreate+0x1d4>)
    3ba4:	4798      	blx	r3
			xReturn = pdPASS;
    3ba6:	2001      	movs	r0, #1
    3ba8:	e7c9      	b.n	3b3e <xTaskCreate+0x112>
    3baa:	46c0      	nop			; (mov r8, r8)
    3bac:	000031d5 	.word	0x000031d5
    3bb0:	00002f8f 	.word	0x00002f8f
    3bb4:	00003065 	.word	0x00003065
    3bb8:	00003115 	.word	0x00003115
    3bbc:	20004054 	.word	0x20004054
    3bc0:	20003fe4 	.word	0x20003fe4
    3bc4:	200040b4 	.word	0x200040b4
    3bc8:	20004064 	.word	0x20004064
    3bcc:	20004068 	.word	0x20004068
    3bd0:	20003ff0 	.word	0x20003ff0
    3bd4:	00002f95 	.word	0x00002f95
    3bd8:	0000312d 	.word	0x0000312d
    3bdc:	00003241 	.word	0x00003241
    3be0:	00002f79 	.word	0x00002f79
    3be4:	2000406c 	.word	0x2000406c
    3be8:	20004080 	.word	0x20004080
    3bec:	200040a0 	.word	0x200040a0
    3bf0:	200040cc 	.word	0x200040cc
    3bf4:	200040b8 	.word	0x200040b8
    3bf8:	20003fe8 	.word	0x20003fe8
    3bfc:	20003fec 	.word	0x20003fec
    3c00:	000030fd 	.word	0x000030fd

00003c04 <vTaskStartScheduler>:
{
    3c04:	b510      	push	{r4, lr}
    3c06:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
    3c08:	4b11      	ldr	r3, [pc, #68]	; (3c50 <vTaskStartScheduler+0x4c>)
    3c0a:	9301      	str	r3, [sp, #4]
    3c0c:	2300      	movs	r3, #0
    3c0e:	9300      	str	r3, [sp, #0]
    3c10:	2264      	movs	r2, #100	; 0x64
    3c12:	4910      	ldr	r1, [pc, #64]	; (3c54 <vTaskStartScheduler+0x50>)
    3c14:	4810      	ldr	r0, [pc, #64]	; (3c58 <vTaskStartScheduler+0x54>)
    3c16:	4c11      	ldr	r4, [pc, #68]	; (3c5c <vTaskStartScheduler+0x58>)
    3c18:	47a0      	blx	r4
		if( xReturn == pdPASS )
    3c1a:	2801      	cmp	r0, #1
    3c1c:	d003      	beq.n	3c26 <vTaskStartScheduler+0x22>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    3c1e:	1c43      	adds	r3, r0, #1
    3c20:	d013      	beq.n	3c4a <vTaskStartScheduler+0x46>
}
    3c22:	b002      	add	sp, #8
    3c24:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    3c26:	4b0e      	ldr	r3, [pc, #56]	; (3c60 <vTaskStartScheduler+0x5c>)
    3c28:	4798      	blx	r3
	if( xReturn == pdPASS )
    3c2a:	2801      	cmp	r0, #1
    3c2c:	d1f7      	bne.n	3c1e <vTaskStartScheduler+0x1a>
		portDISABLE_INTERRUPTS();
    3c2e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    3c30:	2201      	movs	r2, #1
    3c32:	4252      	negs	r2, r2
    3c34:	4b0b      	ldr	r3, [pc, #44]	; (3c64 <vTaskStartScheduler+0x60>)
    3c36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    3c38:	3202      	adds	r2, #2
    3c3a:	4b0b      	ldr	r3, [pc, #44]	; (3c68 <vTaskStartScheduler+0x64>)
    3c3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    3c3e:	2200      	movs	r2, #0
    3c40:	4b0a      	ldr	r3, [pc, #40]	; (3c6c <vTaskStartScheduler+0x68>)
    3c42:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    3c44:	4b0a      	ldr	r3, [pc, #40]	; (3c70 <vTaskStartScheduler+0x6c>)
    3c46:	4798      	blx	r3
    3c48:	e7eb      	b.n	3c22 <vTaskStartScheduler+0x1e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    3c4a:	b672      	cpsid	i
    3c4c:	e7fe      	b.n	3c4c <vTaskStartScheduler+0x48>
    3c4e:	46c0      	nop			; (mov r8, r8)
    3c50:	20004094 	.word	0x20004094
    3c54:	00005440 	.word	0x00005440
    3c58:	00003925 	.word	0x00003925
    3c5c:	00003a2d 	.word	0x00003a2d
    3c60:	00004251 	.word	0x00004251
    3c64:	20004098 	.word	0x20004098
    3c68:	200040b4 	.word	0x200040b4
    3c6c:	200040e0 	.word	0x200040e0
    3c70:	00003089 	.word	0x00003089

00003c74 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    3c74:	4a02      	ldr	r2, [pc, #8]	; (3c80 <vTaskSuspendAll+0xc>)
    3c76:	6813      	ldr	r3, [r2, #0]
    3c78:	3301      	adds	r3, #1
    3c7a:	6013      	str	r3, [r2, #0]
}
    3c7c:	4770      	bx	lr
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	20004060 	.word	0x20004060

00003c84 <xTaskGetTickCount>:
		xTicks = xTickCount;
    3c84:	4b01      	ldr	r3, [pc, #4]	; (3c8c <xTaskGetTickCount+0x8>)
    3c86:	6818      	ldr	r0, [r3, #0]
}
    3c88:	4770      	bx	lr
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	200040e0 	.word	0x200040e0

00003c90 <xTaskIncrementTick>:
{
    3c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c92:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3c94:	4b38      	ldr	r3, [pc, #224]	; (3d78 <xTaskIncrementTick+0xe8>)
    3c96:	681b      	ldr	r3, [r3, #0]
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d160      	bne.n	3d5e <xTaskIncrementTick+0xce>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    3c9c:	4b37      	ldr	r3, [pc, #220]	; (3d7c <xTaskIncrementTick+0xec>)
    3c9e:	681d      	ldr	r5, [r3, #0]
    3ca0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
    3ca2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    3ca4:	2d00      	cmp	r5, #0
    3ca6:	d112      	bne.n	3cce <xTaskIncrementTick+0x3e>
			taskSWITCH_DELAYED_LISTS();
    3ca8:	4b35      	ldr	r3, [pc, #212]	; (3d80 <xTaskIncrementTick+0xf0>)
    3caa:	681b      	ldr	r3, [r3, #0]
    3cac:	681b      	ldr	r3, [r3, #0]
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d001      	beq.n	3cb6 <xTaskIncrementTick+0x26>
    3cb2:	b672      	cpsid	i
    3cb4:	e7fe      	b.n	3cb4 <xTaskIncrementTick+0x24>
    3cb6:	4a32      	ldr	r2, [pc, #200]	; (3d80 <xTaskIncrementTick+0xf0>)
    3cb8:	6811      	ldr	r1, [r2, #0]
    3cba:	4b32      	ldr	r3, [pc, #200]	; (3d84 <xTaskIncrementTick+0xf4>)
    3cbc:	6818      	ldr	r0, [r3, #0]
    3cbe:	6010      	str	r0, [r2, #0]
    3cc0:	6019      	str	r1, [r3, #0]
    3cc2:	4a31      	ldr	r2, [pc, #196]	; (3d88 <xTaskIncrementTick+0xf8>)
    3cc4:	6813      	ldr	r3, [r2, #0]
    3cc6:	3301      	adds	r3, #1
    3cc8:	6013      	str	r3, [r2, #0]
    3cca:	4b30      	ldr	r3, [pc, #192]	; (3d8c <xTaskIncrementTick+0xfc>)
    3ccc:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    3cce:	4b30      	ldr	r3, [pc, #192]	; (3d90 <xTaskIncrementTick+0x100>)
    3cd0:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
    3cd2:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    3cd4:	429d      	cmp	r5, r3
    3cd6:	d333      	bcc.n	3d40 <xTaskIncrementTick+0xb0>
    3cd8:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3cda:	4f29      	ldr	r7, [pc, #164]	; (3d80 <xTaskIncrementTick+0xf0>)
    3cdc:	683b      	ldr	r3, [r7, #0]
    3cde:	681b      	ldr	r3, [r3, #0]
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d029      	beq.n	3d38 <xTaskIncrementTick+0xa8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3ce4:	4b26      	ldr	r3, [pc, #152]	; (3d80 <xTaskIncrementTick+0xf0>)
    3ce6:	681b      	ldr	r3, [r3, #0]
    3ce8:	68db      	ldr	r3, [r3, #12]
    3cea:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    3cec:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
    3cee:	429d      	cmp	r5, r3
    3cf0:	d332      	bcc.n	3d58 <xTaskIncrementTick+0xc8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3cf2:	1d33      	adds	r3, r6, #4
    3cf4:	9301      	str	r3, [sp, #4]
    3cf6:	0018      	movs	r0, r3
    3cf8:	4b26      	ldr	r3, [pc, #152]	; (3d94 <xTaskIncrementTick+0x104>)
    3cfa:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3cfc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d003      	beq.n	3d0a <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3d02:	0030      	movs	r0, r6
    3d04:	3018      	adds	r0, #24
    3d06:	4b23      	ldr	r3, [pc, #140]	; (3d94 <xTaskIncrementTick+0x104>)
    3d08:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3d0a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3d0c:	4a22      	ldr	r2, [pc, #136]	; (3d98 <xTaskIncrementTick+0x108>)
    3d0e:	6812      	ldr	r2, [r2, #0]
    3d10:	4293      	cmp	r3, r2
    3d12:	d901      	bls.n	3d18 <xTaskIncrementTick+0x88>
    3d14:	4a20      	ldr	r2, [pc, #128]	; (3d98 <xTaskIncrementTick+0x108>)
    3d16:	6013      	str	r3, [r2, #0]
    3d18:	0098      	lsls	r0, r3, #2
    3d1a:	18c0      	adds	r0, r0, r3
    3d1c:	0080      	lsls	r0, r0, #2
    3d1e:	4b1f      	ldr	r3, [pc, #124]	; (3d9c <xTaskIncrementTick+0x10c>)
    3d20:	1818      	adds	r0, r3, r0
    3d22:	9901      	ldr	r1, [sp, #4]
    3d24:	4b1e      	ldr	r3, [pc, #120]	; (3da0 <xTaskIncrementTick+0x110>)
    3d26:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3d28:	4b1e      	ldr	r3, [pc, #120]	; (3da4 <xTaskIncrementTick+0x114>)
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    3d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3d30:	429a      	cmp	r2, r3
    3d32:	d3d3      	bcc.n	3cdc <xTaskIncrementTick+0x4c>
							xSwitchRequired = pdTRUE;
    3d34:	2401      	movs	r4, #1
    3d36:	e7d1      	b.n	3cdc <xTaskIncrementTick+0x4c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3d38:	2201      	movs	r2, #1
    3d3a:	4252      	negs	r2, r2
    3d3c:	4b14      	ldr	r3, [pc, #80]	; (3d90 <xTaskIncrementTick+0x100>)
    3d3e:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    3d40:	4b18      	ldr	r3, [pc, #96]	; (3da4 <xTaskIncrementTick+0x114>)
    3d42:	681b      	ldr	r3, [r3, #0]
    3d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3d46:	0093      	lsls	r3, r2, #2
    3d48:	189b      	adds	r3, r3, r2
    3d4a:	009b      	lsls	r3, r3, #2
    3d4c:	4a13      	ldr	r2, [pc, #76]	; (3d9c <xTaskIncrementTick+0x10c>)
    3d4e:	589b      	ldr	r3, [r3, r2]
    3d50:	2b01      	cmp	r3, #1
    3d52:	d909      	bls.n	3d68 <xTaskIncrementTick+0xd8>
				xSwitchRequired = pdTRUE;
    3d54:	2401      	movs	r4, #1
    3d56:	e007      	b.n	3d68 <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
    3d58:	4a0d      	ldr	r2, [pc, #52]	; (3d90 <xTaskIncrementTick+0x100>)
    3d5a:	6013      	str	r3, [r2, #0]
						break;
    3d5c:	e7f0      	b.n	3d40 <xTaskIncrementTick+0xb0>
		++uxPendedTicks;
    3d5e:	4a12      	ldr	r2, [pc, #72]	; (3da8 <xTaskIncrementTick+0x118>)
    3d60:	6813      	ldr	r3, [r2, #0]
    3d62:	3301      	adds	r3, #1
    3d64:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
    3d66:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
    3d68:	4b10      	ldr	r3, [pc, #64]	; (3dac <xTaskIncrementTick+0x11c>)
    3d6a:	681b      	ldr	r3, [r3, #0]
    3d6c:	2b00      	cmp	r3, #0
    3d6e:	d000      	beq.n	3d72 <xTaskIncrementTick+0xe2>
			xSwitchRequired = pdTRUE;
    3d70:	2401      	movs	r4, #1
}
    3d72:	0020      	movs	r0, r4
    3d74:	b003      	add	sp, #12
    3d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d78:	20004060 	.word	0x20004060
    3d7c:	200040e0 	.word	0x200040e0
    3d80:	20003fe8 	.word	0x20003fe8
    3d84:	20003fec 	.word	0x20003fec
    3d88:	2000409c 	.word	0x2000409c
    3d8c:	000038f9 	.word	0x000038f9
    3d90:	20004098 	.word	0x20004098
    3d94:	00002fdb 	.word	0x00002fdb
    3d98:	20004068 	.word	0x20004068
    3d9c:	20003ff0 	.word	0x20003ff0
    3da0:	00002f95 	.word	0x00002f95
    3da4:	20003fe4 	.word	0x20003fe4
    3da8:	2000405c 	.word	0x2000405c
    3dac:	200040e4 	.word	0x200040e4

00003db0 <xTaskResumeAll>:
{
    3db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    3db2:	4b30      	ldr	r3, [pc, #192]	; (3e74 <xTaskResumeAll+0xc4>)
    3db4:	681b      	ldr	r3, [r3, #0]
    3db6:	2b00      	cmp	r3, #0
    3db8:	d101      	bne.n	3dbe <xTaskResumeAll+0xe>
    3dba:	b672      	cpsid	i
    3dbc:	e7fe      	b.n	3dbc <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    3dbe:	4b2e      	ldr	r3, [pc, #184]	; (3e78 <xTaskResumeAll+0xc8>)
    3dc0:	4798      	blx	r3
		--uxSchedulerSuspended;
    3dc2:	4b2c      	ldr	r3, [pc, #176]	; (3e74 <xTaskResumeAll+0xc4>)
    3dc4:	681a      	ldr	r2, [r3, #0]
    3dc6:	3a01      	subs	r2, #1
    3dc8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3dca:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    3dcc:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3dce:	2b00      	cmp	r3, #0
    3dd0:	d103      	bne.n	3dda <xTaskResumeAll+0x2a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    3dd2:	4b2a      	ldr	r3, [pc, #168]	; (3e7c <xTaskResumeAll+0xcc>)
    3dd4:	681b      	ldr	r3, [r3, #0]
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	d103      	bne.n	3de2 <xTaskResumeAll+0x32>
	taskEXIT_CRITICAL();
    3dda:	4b29      	ldr	r3, [pc, #164]	; (3e80 <xTaskResumeAll+0xd0>)
    3ddc:	4798      	blx	r3
}
    3dde:	0020      	movs	r0, r4
    3de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3de2:	4d28      	ldr	r5, [pc, #160]	; (3e84 <xTaskResumeAll+0xd4>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3de4:	002f      	movs	r7, r5
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3de6:	682b      	ldr	r3, [r5, #0]
    3de8:	2b00      	cmp	r3, #0
    3dea:	d022      	beq.n	3e32 <xTaskResumeAll+0x82>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    3dec:	68fb      	ldr	r3, [r7, #12]
    3dee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3df0:	0020      	movs	r0, r4
    3df2:	3018      	adds	r0, #24
    3df4:	4b24      	ldr	r3, [pc, #144]	; (3e88 <xTaskResumeAll+0xd8>)
    3df6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3df8:	1d26      	adds	r6, r4, #4
    3dfa:	0030      	movs	r0, r6
    3dfc:	4b22      	ldr	r3, [pc, #136]	; (3e88 <xTaskResumeAll+0xd8>)
    3dfe:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    3e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3e02:	4a22      	ldr	r2, [pc, #136]	; (3e8c <xTaskResumeAll+0xdc>)
    3e04:	6812      	ldr	r2, [r2, #0]
    3e06:	4293      	cmp	r3, r2
    3e08:	d901      	bls.n	3e0e <xTaskResumeAll+0x5e>
    3e0a:	4a20      	ldr	r2, [pc, #128]	; (3e8c <xTaskResumeAll+0xdc>)
    3e0c:	6013      	str	r3, [r2, #0]
    3e0e:	0098      	lsls	r0, r3, #2
    3e10:	18c0      	adds	r0, r0, r3
    3e12:	0080      	lsls	r0, r0, #2
    3e14:	4b1e      	ldr	r3, [pc, #120]	; (3e90 <xTaskResumeAll+0xe0>)
    3e16:	1818      	adds	r0, r3, r0
    3e18:	0031      	movs	r1, r6
    3e1a:	4b1e      	ldr	r3, [pc, #120]	; (3e94 <xTaskResumeAll+0xe4>)
    3e1c:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3e1e:	4b1e      	ldr	r3, [pc, #120]	; (3e98 <xTaskResumeAll+0xe8>)
    3e20:	681b      	ldr	r3, [r3, #0]
    3e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3e24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3e26:	429a      	cmp	r2, r3
    3e28:	d3dd      	bcc.n	3de6 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
    3e2a:	2201      	movs	r2, #1
    3e2c:	4b1b      	ldr	r3, [pc, #108]	; (3e9c <xTaskResumeAll+0xec>)
    3e2e:	601a      	str	r2, [r3, #0]
    3e30:	e7d9      	b.n	3de6 <xTaskResumeAll+0x36>
				if( pxTCB != NULL )
    3e32:	2c00      	cmp	r4, #0
    3e34:	d001      	beq.n	3e3a <xTaskResumeAll+0x8a>
					prvResetNextTaskUnblockTime();
    3e36:	4b1a      	ldr	r3, [pc, #104]	; (3ea0 <xTaskResumeAll+0xf0>)
    3e38:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    3e3a:	4b1a      	ldr	r3, [pc, #104]	; (3ea4 <xTaskResumeAll+0xf4>)
    3e3c:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    3e3e:	2c00      	cmp	r4, #0
    3e40:	d00e      	beq.n	3e60 <xTaskResumeAll+0xb0>
							if( xTaskIncrementTick() != pdFALSE )
    3e42:	4f19      	ldr	r7, [pc, #100]	; (3ea8 <xTaskResumeAll+0xf8>)
								xYieldPending = pdTRUE;
    3e44:	4e15      	ldr	r6, [pc, #84]	; (3e9c <xTaskResumeAll+0xec>)
    3e46:	2501      	movs	r5, #1
    3e48:	e002      	b.n	3e50 <xTaskResumeAll+0xa0>
							--uxPendedCounts;
    3e4a:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    3e4c:	2c00      	cmp	r4, #0
    3e4e:	d004      	beq.n	3e5a <xTaskResumeAll+0xaa>
							if( xTaskIncrementTick() != pdFALSE )
    3e50:	47b8      	blx	r7
    3e52:	2800      	cmp	r0, #0
    3e54:	d0f9      	beq.n	3e4a <xTaskResumeAll+0x9a>
								xYieldPending = pdTRUE;
    3e56:	6035      	str	r5, [r6, #0]
    3e58:	e7f7      	b.n	3e4a <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
    3e5a:	2200      	movs	r2, #0
    3e5c:	4b11      	ldr	r3, [pc, #68]	; (3ea4 <xTaskResumeAll+0xf4>)
    3e5e:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
    3e60:	4b0e      	ldr	r3, [pc, #56]	; (3e9c <xTaskResumeAll+0xec>)
    3e62:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
    3e64:	2400      	movs	r4, #0
				if( xYieldPending != pdFALSE )
    3e66:	2b00      	cmp	r3, #0
    3e68:	d0b7      	beq.n	3dda <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
    3e6a:	4b10      	ldr	r3, [pc, #64]	; (3eac <xTaskResumeAll+0xfc>)
    3e6c:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    3e6e:	3401      	adds	r4, #1
    3e70:	e7b3      	b.n	3dda <xTaskResumeAll+0x2a>
    3e72:	46c0      	nop			; (mov r8, r8)
    3e74:	20004060 	.word	0x20004060
    3e78:	00003115 	.word	0x00003115
    3e7c:	20004054 	.word	0x20004054
    3e80:	0000312d 	.word	0x0000312d
    3e84:	200040a0 	.word	0x200040a0
    3e88:	00002fdb 	.word	0x00002fdb
    3e8c:	20004068 	.word	0x20004068
    3e90:	20003ff0 	.word	0x20003ff0
    3e94:	00002f95 	.word	0x00002f95
    3e98:	20003fe4 	.word	0x20003fe4
    3e9c:	200040e4 	.word	0x200040e4
    3ea0:	000038f9 	.word	0x000038f9
    3ea4:	2000405c 	.word	0x2000405c
    3ea8:	00003c91 	.word	0x00003c91
    3eac:	000030fd 	.word	0x000030fd

00003eb0 <vTaskDelay>:
	{
    3eb0:	b510      	push	{r4, lr}
    3eb2:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    3eb4:	d00f      	beq.n	3ed6 <vTaskDelay+0x26>
			configASSERT( uxSchedulerSuspended == 0 );
    3eb6:	4b09      	ldr	r3, [pc, #36]	; (3edc <vTaskDelay+0x2c>)
    3eb8:	681b      	ldr	r3, [r3, #0]
    3eba:	2b00      	cmp	r3, #0
    3ebc:	d001      	beq.n	3ec2 <vTaskDelay+0x12>
    3ebe:	b672      	cpsid	i
    3ec0:	e7fe      	b.n	3ec0 <vTaskDelay+0x10>
			vTaskSuspendAll();
    3ec2:	4b07      	ldr	r3, [pc, #28]	; (3ee0 <vTaskDelay+0x30>)
    3ec4:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3ec6:	2100      	movs	r1, #0
    3ec8:	0020      	movs	r0, r4
    3eca:	4b06      	ldr	r3, [pc, #24]	; (3ee4 <vTaskDelay+0x34>)
    3ecc:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    3ece:	4b06      	ldr	r3, [pc, #24]	; (3ee8 <vTaskDelay+0x38>)
    3ed0:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    3ed2:	2800      	cmp	r0, #0
    3ed4:	d101      	bne.n	3eda <vTaskDelay+0x2a>
			portYIELD_WITHIN_API();
    3ed6:	4b05      	ldr	r3, [pc, #20]	; (3eec <vTaskDelay+0x3c>)
    3ed8:	4798      	blx	r3
	}
    3eda:	bd10      	pop	{r4, pc}
    3edc:	20004060 	.word	0x20004060
    3ee0:	00003c75 	.word	0x00003c75
    3ee4:	000039a5 	.word	0x000039a5
    3ee8:	00003db1 	.word	0x00003db1
    3eec:	000030fd 	.word	0x000030fd

00003ef0 <vTaskSwitchContext>:
{
    3ef0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3ef2:	4b21      	ldr	r3, [pc, #132]	; (3f78 <vTaskSwitchContext+0x88>)
    3ef4:	681b      	ldr	r3, [r3, #0]
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	d118      	bne.n	3f2c <vTaskSwitchContext+0x3c>
		xYieldPending = pdFALSE;
    3efa:	2200      	movs	r2, #0
    3efc:	4b1f      	ldr	r3, [pc, #124]	; (3f7c <vTaskSwitchContext+0x8c>)
    3efe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3f00:	4b1f      	ldr	r3, [pc, #124]	; (3f80 <vTaskSwitchContext+0x90>)
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	009a      	lsls	r2, r3, #2
    3f06:	18d2      	adds	r2, r2, r3
    3f08:	0092      	lsls	r2, r2, #2
    3f0a:	491e      	ldr	r1, [pc, #120]	; (3f84 <vTaskSwitchContext+0x94>)
    3f0c:	5852      	ldr	r2, [r2, r1]
    3f0e:	2a00      	cmp	r2, #0
    3f10:	d110      	bne.n	3f34 <vTaskSwitchContext+0x44>
    3f12:	2b00      	cmp	r3, #0
    3f14:	d008      	beq.n	3f28 <vTaskSwitchContext+0x38>
    3f16:	3b01      	subs	r3, #1
    3f18:	009a      	lsls	r2, r3, #2
    3f1a:	18d2      	adds	r2, r2, r3
    3f1c:	0092      	lsls	r2, r2, #2
    3f1e:	5852      	ldr	r2, [r2, r1]
    3f20:	2a00      	cmp	r2, #0
    3f22:	d107      	bne.n	3f34 <vTaskSwitchContext+0x44>
    3f24:	2b00      	cmp	r3, #0
    3f26:	d1f6      	bne.n	3f16 <vTaskSwitchContext+0x26>
    3f28:	b672      	cpsid	i
    3f2a:	e7fe      	b.n	3f2a <vTaskSwitchContext+0x3a>
		xYieldPending = pdTRUE;
    3f2c:	2201      	movs	r2, #1
    3f2e:	4b13      	ldr	r3, [pc, #76]	; (3f7c <vTaskSwitchContext+0x8c>)
    3f30:	601a      	str	r2, [r3, #0]
}
    3f32:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3f34:	4813      	ldr	r0, [pc, #76]	; (3f84 <vTaskSwitchContext+0x94>)
    3f36:	009a      	lsls	r2, r3, #2
    3f38:	18d1      	adds	r1, r2, r3
    3f3a:	0089      	lsls	r1, r1, #2
    3f3c:	1841      	adds	r1, r0, r1
    3f3e:	684c      	ldr	r4, [r1, #4]
    3f40:	6864      	ldr	r4, [r4, #4]
    3f42:	604c      	str	r4, [r1, #4]
    3f44:	18d2      	adds	r2, r2, r3
    3f46:	0092      	lsls	r2, r2, #2
    3f48:	3208      	adds	r2, #8
    3f4a:	1882      	adds	r2, r0, r2
    3f4c:	4294      	cmp	r4, r2
    3f4e:	d00b      	beq.n	3f68 <vTaskSwitchContext+0x78>
    3f50:	009a      	lsls	r2, r3, #2
    3f52:	18d2      	adds	r2, r2, r3
    3f54:	0092      	lsls	r2, r2, #2
    3f56:	490b      	ldr	r1, [pc, #44]	; (3f84 <vTaskSwitchContext+0x94>)
    3f58:	188a      	adds	r2, r1, r2
    3f5a:	6852      	ldr	r2, [r2, #4]
    3f5c:	68d1      	ldr	r1, [r2, #12]
    3f5e:	4a0a      	ldr	r2, [pc, #40]	; (3f88 <vTaskSwitchContext+0x98>)
    3f60:	6011      	str	r1, [r2, #0]
    3f62:	4a07      	ldr	r2, [pc, #28]	; (3f80 <vTaskSwitchContext+0x90>)
    3f64:	6013      	str	r3, [r2, #0]
}
    3f66:	e7e4      	b.n	3f32 <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3f68:	6860      	ldr	r0, [r4, #4]
    3f6a:	009a      	lsls	r2, r3, #2
    3f6c:	18d2      	adds	r2, r2, r3
    3f6e:	0092      	lsls	r2, r2, #2
    3f70:	4904      	ldr	r1, [pc, #16]	; (3f84 <vTaskSwitchContext+0x94>)
    3f72:	188a      	adds	r2, r1, r2
    3f74:	6050      	str	r0, [r2, #4]
    3f76:	e7eb      	b.n	3f50 <vTaskSwitchContext+0x60>
    3f78:	20004060 	.word	0x20004060
    3f7c:	200040e4 	.word	0x200040e4
    3f80:	20004068 	.word	0x20004068
    3f84:	20003ff0 	.word	0x20003ff0
    3f88:	20003fe4 	.word	0x20003fe4

00003f8c <vTaskPlaceOnEventList>:
{
    3f8c:	b510      	push	{r4, lr}
    3f8e:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    3f90:	2800      	cmp	r0, #0
    3f92:	d101      	bne.n	3f98 <vTaskPlaceOnEventList+0xc>
    3f94:	b672      	cpsid	i
    3f96:	e7fe      	b.n	3f96 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3f98:	4b04      	ldr	r3, [pc, #16]	; (3fac <vTaskPlaceOnEventList+0x20>)
    3f9a:	6819      	ldr	r1, [r3, #0]
    3f9c:	3118      	adds	r1, #24
    3f9e:	4b04      	ldr	r3, [pc, #16]	; (3fb0 <vTaskPlaceOnEventList+0x24>)
    3fa0:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3fa2:	2101      	movs	r1, #1
    3fa4:	0020      	movs	r0, r4
    3fa6:	4b03      	ldr	r3, [pc, #12]	; (3fb4 <vTaskPlaceOnEventList+0x28>)
    3fa8:	4798      	blx	r3
}
    3faa:	bd10      	pop	{r4, pc}
    3fac:	20003fe4 	.word	0x20003fe4
    3fb0:	00002fad 	.word	0x00002fad
    3fb4:	000039a5 	.word	0x000039a5

00003fb8 <vTaskPlaceOnEventListRestricted>:
	{
    3fb8:	b570      	push	{r4, r5, r6, lr}
    3fba:	000c      	movs	r4, r1
    3fbc:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    3fbe:	2800      	cmp	r0, #0
    3fc0:	d00d      	beq.n	3fde <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3fc2:	4b08      	ldr	r3, [pc, #32]	; (3fe4 <vTaskPlaceOnEventListRestricted+0x2c>)
    3fc4:	6819      	ldr	r1, [r3, #0]
    3fc6:	3118      	adds	r1, #24
    3fc8:	4b07      	ldr	r3, [pc, #28]	; (3fe8 <vTaskPlaceOnEventListRestricted+0x30>)
    3fca:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    3fcc:	2d00      	cmp	r5, #0
    3fce:	d001      	beq.n	3fd4 <vTaskPlaceOnEventListRestricted+0x1c>
			xTicksToWait = portMAX_DELAY;
    3fd0:	2401      	movs	r4, #1
    3fd2:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    3fd4:	0029      	movs	r1, r5
    3fd6:	0020      	movs	r0, r4
    3fd8:	4b04      	ldr	r3, [pc, #16]	; (3fec <vTaskPlaceOnEventListRestricted+0x34>)
    3fda:	4798      	blx	r3
	}
    3fdc:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
    3fde:	b672      	cpsid	i
    3fe0:	e7fe      	b.n	3fe0 <vTaskPlaceOnEventListRestricted+0x28>
    3fe2:	46c0      	nop			; (mov r8, r8)
    3fe4:	20003fe4 	.word	0x20003fe4
    3fe8:	00002f95 	.word	0x00002f95
    3fec:	000039a5 	.word	0x000039a5

00003ff0 <xTaskRemoveFromEventList>:
{
    3ff0:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3ff2:	68c3      	ldr	r3, [r0, #12]
    3ff4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    3ff6:	2c00      	cmp	r4, #0
    3ff8:	d027      	beq.n	404a <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3ffa:	0025      	movs	r5, r4
    3ffc:	3518      	adds	r5, #24
    3ffe:	0028      	movs	r0, r5
    4000:	4b15      	ldr	r3, [pc, #84]	; (4058 <xTaskRemoveFromEventList+0x68>)
    4002:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4004:	4b15      	ldr	r3, [pc, #84]	; (405c <xTaskRemoveFromEventList+0x6c>)
    4006:	681b      	ldr	r3, [r3, #0]
    4008:	2b00      	cmp	r3, #0
    400a:	d120      	bne.n	404e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    400c:	1d25      	adds	r5, r4, #4
    400e:	0028      	movs	r0, r5
    4010:	4b11      	ldr	r3, [pc, #68]	; (4058 <xTaskRemoveFromEventList+0x68>)
    4012:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    4014:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4016:	4a12      	ldr	r2, [pc, #72]	; (4060 <xTaskRemoveFromEventList+0x70>)
    4018:	6812      	ldr	r2, [r2, #0]
    401a:	4293      	cmp	r3, r2
    401c:	d901      	bls.n	4022 <xTaskRemoveFromEventList+0x32>
    401e:	4a10      	ldr	r2, [pc, #64]	; (4060 <xTaskRemoveFromEventList+0x70>)
    4020:	6013      	str	r3, [r2, #0]
    4022:	0098      	lsls	r0, r3, #2
    4024:	18c0      	adds	r0, r0, r3
    4026:	0080      	lsls	r0, r0, #2
    4028:	4b0e      	ldr	r3, [pc, #56]	; (4064 <xTaskRemoveFromEventList+0x74>)
    402a:	1818      	adds	r0, r3, r0
    402c:	0029      	movs	r1, r5
    402e:	4b0e      	ldr	r3, [pc, #56]	; (4068 <xTaskRemoveFromEventList+0x78>)
    4030:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    4032:	4b0e      	ldr	r3, [pc, #56]	; (406c <xTaskRemoveFromEventList+0x7c>)
    4034:	681b      	ldr	r3, [r3, #0]
    4036:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
    403a:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    403c:	429a      	cmp	r2, r3
    403e:	d903      	bls.n	4048 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
    4040:	2201      	movs	r2, #1
    4042:	4b0b      	ldr	r3, [pc, #44]	; (4070 <xTaskRemoveFromEventList+0x80>)
    4044:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
    4046:	3001      	adds	r0, #1
}
    4048:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
    404a:	b672      	cpsid	i
    404c:	e7fe      	b.n	404c <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    404e:	0029      	movs	r1, r5
    4050:	4808      	ldr	r0, [pc, #32]	; (4074 <xTaskRemoveFromEventList+0x84>)
    4052:	4b05      	ldr	r3, [pc, #20]	; (4068 <xTaskRemoveFromEventList+0x78>)
    4054:	4798      	blx	r3
    4056:	e7ec      	b.n	4032 <xTaskRemoveFromEventList+0x42>
    4058:	00002fdb 	.word	0x00002fdb
    405c:	20004060 	.word	0x20004060
    4060:	20004068 	.word	0x20004068
    4064:	20003ff0 	.word	0x20003ff0
    4068:	00002f95 	.word	0x00002f95
    406c:	20003fe4 	.word	0x20003fe4
    4070:	200040e4 	.word	0x200040e4
    4074:	200040a0 	.word	0x200040a0

00004078 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4078:	4b03      	ldr	r3, [pc, #12]	; (4088 <vTaskInternalSetTimeOutState+0x10>)
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    407e:	4b03      	ldr	r3, [pc, #12]	; (408c <vTaskInternalSetTimeOutState+0x14>)
    4080:	681b      	ldr	r3, [r3, #0]
    4082:	6043      	str	r3, [r0, #4]
}
    4084:	4770      	bx	lr
    4086:	46c0      	nop			; (mov r8, r8)
    4088:	2000409c 	.word	0x2000409c
    408c:	200040e0 	.word	0x200040e0

00004090 <xTaskCheckForTimeOut>:
{
    4090:	b570      	push	{r4, r5, r6, lr}
    4092:	0006      	movs	r6, r0
    4094:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
    4096:	2800      	cmp	r0, #0
    4098:	d01b      	beq.n	40d2 <xTaskCheckForTimeOut+0x42>
	configASSERT( pxTicksToWait );
    409a:	2900      	cmp	r1, #0
    409c:	d01b      	beq.n	40d6 <xTaskCheckForTimeOut+0x46>
	taskENTER_CRITICAL();
    409e:	4b13      	ldr	r3, [pc, #76]	; (40ec <xTaskCheckForTimeOut+0x5c>)
    40a0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    40a2:	4b13      	ldr	r3, [pc, #76]	; (40f0 <xTaskCheckForTimeOut+0x60>)
    40a4:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    40a6:	6871      	ldr	r1, [r6, #4]
			if( *pxTicksToWait == portMAX_DELAY )
    40a8:	682b      	ldr	r3, [r5, #0]
    40aa:	1c58      	adds	r0, r3, #1
    40ac:	d01c      	beq.n	40e8 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    40ae:	4811      	ldr	r0, [pc, #68]	; (40f4 <xTaskCheckForTimeOut+0x64>)
    40b0:	6800      	ldr	r0, [r0, #0]
    40b2:	6834      	ldr	r4, [r6, #0]
    40b4:	4284      	cmp	r4, r0
    40b6:	d002      	beq.n	40be <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
    40b8:	2401      	movs	r4, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    40ba:	428a      	cmp	r2, r1
    40bc:	d205      	bcs.n	40ca <xTaskCheckForTimeOut+0x3a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    40be:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    40c0:	429a      	cmp	r2, r3
    40c2:	d30a      	bcc.n	40da <xTaskCheckForTimeOut+0x4a>
			*pxTicksToWait = 0;
    40c4:	2300      	movs	r3, #0
    40c6:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
    40c8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    40ca:	4b0b      	ldr	r3, [pc, #44]	; (40f8 <xTaskCheckForTimeOut+0x68>)
    40cc:	4798      	blx	r3
}
    40ce:	0020      	movs	r0, r4
    40d0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxTimeOut );
    40d2:	b672      	cpsid	i
    40d4:	e7fe      	b.n	40d4 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
    40d6:	b672      	cpsid	i
    40d8:	e7fe      	b.n	40d8 <xTaskCheckForTimeOut+0x48>
			*pxTicksToWait -= xElapsedTime;
    40da:	1a9b      	subs	r3, r3, r2
    40dc:	602b      	str	r3, [r5, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    40de:	0030      	movs	r0, r6
    40e0:	4b06      	ldr	r3, [pc, #24]	; (40fc <xTaskCheckForTimeOut+0x6c>)
    40e2:	4798      	blx	r3
			xReturn = pdFALSE;
    40e4:	2400      	movs	r4, #0
    40e6:	e7f0      	b.n	40ca <xTaskCheckForTimeOut+0x3a>
				xReturn = pdFALSE;
    40e8:	2400      	movs	r4, #0
    40ea:	e7ee      	b.n	40ca <xTaskCheckForTimeOut+0x3a>
    40ec:	00003115 	.word	0x00003115
    40f0:	200040e0 	.word	0x200040e0
    40f4:	2000409c 	.word	0x2000409c
    40f8:	0000312d 	.word	0x0000312d
    40fc:	00004079 	.word	0x00004079

00004100 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4100:	2201      	movs	r2, #1
    4102:	4b01      	ldr	r3, [pc, #4]	; (4108 <vTaskMissedYield+0x8>)
    4104:	601a      	str	r2, [r3, #0]
}
    4106:	4770      	bx	lr
    4108:	200040e4 	.word	0x200040e4

0000410c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    410c:	4b05      	ldr	r3, [pc, #20]	; (4124 <xTaskGetSchedulerState+0x18>)
    410e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
    4110:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    4112:	2b00      	cmp	r3, #0
    4114:	d004      	beq.n	4120 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    4116:	4b04      	ldr	r3, [pc, #16]	; (4128 <xTaskGetSchedulerState+0x1c>)
    4118:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    411a:	4243      	negs	r3, r0
    411c:	4158      	adcs	r0, r3
    411e:	0040      	lsls	r0, r0, #1
	}
    4120:	4770      	bx	lr
    4122:	46c0      	nop			; (mov r8, r8)
    4124:	200040b4 	.word	0x200040b4
    4128:	20004060 	.word	0x20004060

0000412c <xTaskPriorityDisinherit>:
	{
    412c:	b570      	push	{r4, r5, r6, lr}
    412e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    4130:	d02c      	beq.n	418c <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
    4132:	4b18      	ldr	r3, [pc, #96]	; (4194 <xTaskPriorityDisinherit+0x68>)
    4134:	681b      	ldr	r3, [r3, #0]
    4136:	4298      	cmp	r0, r3
    4138:	d001      	beq.n	413e <xTaskPriorityDisinherit+0x12>
    413a:	b672      	cpsid	i
    413c:	e7fe      	b.n	413c <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
    413e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4140:	2b00      	cmp	r3, #0
    4142:	d101      	bne.n	4148 <xTaskPriorityDisinherit+0x1c>
    4144:	b672      	cpsid	i
    4146:	e7fe      	b.n	4146 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
    4148:	3b01      	subs	r3, #1
    414a:	6403      	str	r3, [r0, #64]	; 0x40
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    414c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    414e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    4150:	428a      	cmp	r2, r1
    4152:	d01d      	beq.n	4190 <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
    4154:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    4156:	2b00      	cmp	r3, #0
    4158:	d117      	bne.n	418a <xTaskPriorityDisinherit+0x5e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    415a:	1d25      	adds	r5, r4, #4
    415c:	0028      	movs	r0, r5
    415e:	4b0e      	ldr	r3, [pc, #56]	; (4198 <xTaskPriorityDisinherit+0x6c>)
    4160:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4162:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4164:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4166:	2205      	movs	r2, #5
    4168:	1ad2      	subs	r2, r2, r3
    416a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    416c:	4a0b      	ldr	r2, [pc, #44]	; (419c <xTaskPriorityDisinherit+0x70>)
    416e:	6812      	ldr	r2, [r2, #0]
    4170:	4293      	cmp	r3, r2
    4172:	d901      	bls.n	4178 <xTaskPriorityDisinherit+0x4c>
    4174:	4a09      	ldr	r2, [pc, #36]	; (419c <xTaskPriorityDisinherit+0x70>)
    4176:	6013      	str	r3, [r2, #0]
    4178:	009a      	lsls	r2, r3, #2
    417a:	18d3      	adds	r3, r2, r3
    417c:	009b      	lsls	r3, r3, #2
    417e:	4808      	ldr	r0, [pc, #32]	; (41a0 <xTaskPriorityDisinherit+0x74>)
    4180:	18c0      	adds	r0, r0, r3
    4182:	0029      	movs	r1, r5
    4184:	4b07      	ldr	r3, [pc, #28]	; (41a4 <xTaskPriorityDisinherit+0x78>)
    4186:	4798      	blx	r3
					xReturn = pdTRUE;
    4188:	2001      	movs	r0, #1
	}
    418a:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
    418c:	2000      	movs	r0, #0
    418e:	e7fc      	b.n	418a <xTaskPriorityDisinherit+0x5e>
    4190:	2000      	movs	r0, #0
    4192:	e7fa      	b.n	418a <xTaskPriorityDisinherit+0x5e>
    4194:	20003fe4 	.word	0x20003fe4
    4198:	00002fdb 	.word	0x00002fdb
    419c:	20004068 	.word	0x20004068
    41a0:	20003ff0 	.word	0x20003ff0
    41a4:	00002f95 	.word	0x00002f95

000041a8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    41a8:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    41aa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    41ac:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
    41ae:	4291      	cmp	r1, r2
    41b0:	d80b      	bhi.n	41ca <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    41b2:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    41b4:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    41b6:	6983      	ldr	r3, [r0, #24]
    41b8:	429a      	cmp	r2, r3
    41ba:	d211      	bcs.n	41e0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    41bc:	1d01      	adds	r1, r0, #4
    41be:	4b09      	ldr	r3, [pc, #36]	; (41e4 <prvInsertTimerInActiveList+0x3c>)
    41c0:	6818      	ldr	r0, [r3, #0]
    41c2:	4b09      	ldr	r3, [pc, #36]	; (41e8 <prvInsertTimerInActiveList+0x40>)
    41c4:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    41c6:	2400      	movs	r4, #0
    41c8:	e00a      	b.n	41e0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    41ca:	429a      	cmp	r2, r3
    41cc:	d202      	bcs.n	41d4 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    41ce:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    41d0:	4299      	cmp	r1, r3
    41d2:	d205      	bcs.n	41e0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    41d4:	1d01      	adds	r1, r0, #4
    41d6:	4b05      	ldr	r3, [pc, #20]	; (41ec <prvInsertTimerInActiveList+0x44>)
    41d8:	6818      	ldr	r0, [r3, #0]
    41da:	4b03      	ldr	r3, [pc, #12]	; (41e8 <prvInsertTimerInActiveList+0x40>)
    41dc:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    41de:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
    41e0:	0020      	movs	r0, r4
    41e2:	bd10      	pop	{r4, pc}
    41e4:	200040ec 	.word	0x200040ec
    41e8:	00002fad 	.word	0x00002fad
    41ec:	200040e8 	.word	0x200040e8

000041f0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    41f0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    41f2:	4b0e      	ldr	r3, [pc, #56]	; (422c <prvCheckForValidListAndQueue+0x3c>)
    41f4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    41f6:	4b0e      	ldr	r3, [pc, #56]	; (4230 <prvCheckForValidListAndQueue+0x40>)
    41f8:	681b      	ldr	r3, [r3, #0]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d002      	beq.n	4204 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    41fe:	4b0d      	ldr	r3, [pc, #52]	; (4234 <prvCheckForValidListAndQueue+0x44>)
    4200:	4798      	blx	r3
}
    4202:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
    4204:	4d0c      	ldr	r5, [pc, #48]	; (4238 <prvCheckForValidListAndQueue+0x48>)
    4206:	0028      	movs	r0, r5
    4208:	4e0c      	ldr	r6, [pc, #48]	; (423c <prvCheckForValidListAndQueue+0x4c>)
    420a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
    420c:	4c0c      	ldr	r4, [pc, #48]	; (4240 <prvCheckForValidListAndQueue+0x50>)
    420e:	0020      	movs	r0, r4
    4210:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
    4212:	4b0c      	ldr	r3, [pc, #48]	; (4244 <prvCheckForValidListAndQueue+0x54>)
    4214:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    4216:	4b0c      	ldr	r3, [pc, #48]	; (4248 <prvCheckForValidListAndQueue+0x58>)
    4218:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    421a:	2200      	movs	r2, #0
    421c:	210c      	movs	r1, #12
    421e:	2002      	movs	r0, #2
    4220:	4b0a      	ldr	r3, [pc, #40]	; (424c <prvCheckForValidListAndQueue+0x5c>)
    4222:	4798      	blx	r3
    4224:	4b02      	ldr	r3, [pc, #8]	; (4230 <prvCheckForValidListAndQueue+0x40>)
    4226:	6018      	str	r0, [r3, #0]
    4228:	e7e9      	b.n	41fe <prvCheckForValidListAndQueue+0xe>
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	00003115 	.word	0x00003115
    4230:	2000411c 	.word	0x2000411c
    4234:	0000312d 	.word	0x0000312d
    4238:	200040f0 	.word	0x200040f0
    423c:	00002f79 	.word	0x00002f79
    4240:	20004104 	.word	0x20004104
    4244:	200040e8 	.word	0x200040e8
    4248:	200040ec 	.word	0x200040ec
    424c:	000034a1 	.word	0x000034a1

00004250 <xTimerCreateTimerTask>:
{
    4250:	b510      	push	{r4, lr}
    4252:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    4254:	4b0a      	ldr	r3, [pc, #40]	; (4280 <xTimerCreateTimerTask+0x30>)
    4256:	4798      	blx	r3
	if( xTimerQueue != NULL )
    4258:	4b0a      	ldr	r3, [pc, #40]	; (4284 <xTimerCreateTimerTask+0x34>)
    425a:	681b      	ldr	r3, [r3, #0]
    425c:	2b00      	cmp	r3, #0
    425e:	d00d      	beq.n	427c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate(	prvTimerTask,
    4260:	4b09      	ldr	r3, [pc, #36]	; (4288 <xTimerCreateTimerTask+0x38>)
    4262:	9301      	str	r3, [sp, #4]
    4264:	2302      	movs	r3, #2
    4266:	9300      	str	r3, [sp, #0]
    4268:	2300      	movs	r3, #0
    426a:	2250      	movs	r2, #80	; 0x50
    426c:	4907      	ldr	r1, [pc, #28]	; (428c <xTimerCreateTimerTask+0x3c>)
    426e:	4808      	ldr	r0, [pc, #32]	; (4290 <xTimerCreateTimerTask+0x40>)
    4270:	4c08      	ldr	r4, [pc, #32]	; (4294 <xTimerCreateTimerTask+0x44>)
    4272:	47a0      	blx	r4
	configASSERT( xReturn );
    4274:	2800      	cmp	r0, #0
    4276:	d001      	beq.n	427c <xTimerCreateTimerTask+0x2c>
}
    4278:	b002      	add	sp, #8
    427a:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
    427c:	b672      	cpsid	i
    427e:	e7fe      	b.n	427e <xTimerCreateTimerTask+0x2e>
    4280:	000041f1 	.word	0x000041f1
    4284:	2000411c 	.word	0x2000411c
    4288:	20004120 	.word	0x20004120
    428c:	00005470 	.word	0x00005470
    4290:	000043bd 	.word	0x000043bd
    4294:	00003a2d 	.word	0x00003a2d

00004298 <xTimerGenericCommand>:
{
    4298:	b530      	push	{r4, r5, lr}
    429a:	b085      	sub	sp, #20
    429c:	0004      	movs	r4, r0
    429e:	001d      	movs	r5, r3
	configASSERT( xTimer );
    42a0:	2800      	cmp	r0, #0
    42a2:	d014      	beq.n	42ce <xTimerGenericCommand+0x36>
	if( xTimerQueue != NULL )
    42a4:	4b13      	ldr	r3, [pc, #76]	; (42f4 <xTimerGenericCommand+0x5c>)
    42a6:	6818      	ldr	r0, [r3, #0]
    42a8:	2800      	cmp	r0, #0
    42aa:	d021      	beq.n	42f0 <xTimerGenericCommand+0x58>
		xMessage.xMessageID = xCommandID;
    42ac:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    42ae:	9202      	str	r2, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    42b0:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    42b2:	2905      	cmp	r1, #5
    42b4:	dc15      	bgt.n	42e2 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    42b6:	4b10      	ldr	r3, [pc, #64]	; (42f8 <xTimerGenericCommand+0x60>)
    42b8:	4798      	blx	r3
    42ba:	2802      	cmp	r0, #2
    42bc:	d009      	beq.n	42d2 <xTimerGenericCommand+0x3a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    42be:	4b0d      	ldr	r3, [pc, #52]	; (42f4 <xTimerGenericCommand+0x5c>)
    42c0:	6818      	ldr	r0, [r3, #0]
    42c2:	2300      	movs	r3, #0
    42c4:	2200      	movs	r2, #0
    42c6:	a901      	add	r1, sp, #4
    42c8:	4c0c      	ldr	r4, [pc, #48]	; (42fc <xTimerGenericCommand+0x64>)
    42ca:	47a0      	blx	r4
    42cc:	e00e      	b.n	42ec <xTimerGenericCommand+0x54>
	configASSERT( xTimer );
    42ce:	b672      	cpsid	i
    42d0:	e7fe      	b.n	42d0 <xTimerGenericCommand+0x38>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    42d2:	4b08      	ldr	r3, [pc, #32]	; (42f4 <xTimerGenericCommand+0x5c>)
    42d4:	6818      	ldr	r0, [r3, #0]
    42d6:	2300      	movs	r3, #0
    42d8:	9a08      	ldr	r2, [sp, #32]
    42da:	a901      	add	r1, sp, #4
    42dc:	4c07      	ldr	r4, [pc, #28]	; (42fc <xTimerGenericCommand+0x64>)
    42de:	47a0      	blx	r4
    42e0:	e004      	b.n	42ec <xTimerGenericCommand+0x54>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    42e2:	2300      	movs	r3, #0
    42e4:	002a      	movs	r2, r5
    42e6:	a901      	add	r1, sp, #4
    42e8:	4c05      	ldr	r4, [pc, #20]	; (4300 <xTimerGenericCommand+0x68>)
    42ea:	47a0      	blx	r4
}
    42ec:	b005      	add	sp, #20
    42ee:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
    42f0:	2000      	movs	r0, #0
	return xReturn;
    42f2:	e7fb      	b.n	42ec <xTimerGenericCommand+0x54>
    42f4:	2000411c 	.word	0x2000411c
    42f8:	0000410d 	.word	0x0000410d
    42fc:	000034e9 	.word	0x000034e9
    4300:	00003675 	.word	0x00003675

00004304 <prvSampleTimeNow>:
{
    4304:	b5f0      	push	{r4, r5, r6, r7, lr}
    4306:	46d6      	mov	lr, sl
    4308:	464f      	mov	r7, r9
    430a:	4646      	mov	r6, r8
    430c:	b5c0      	push	{r6, r7, lr}
    430e:	b082      	sub	sp, #8
    4310:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    4312:	4b23      	ldr	r3, [pc, #140]	; (43a0 <prvSampleTimeNow+0x9c>)
    4314:	4798      	blx	r3
    4316:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
    4318:	4b22      	ldr	r3, [pc, #136]	; (43a4 <prvSampleTimeNow+0xa0>)
    431a:	681b      	ldr	r3, [r3, #0]
    431c:	4298      	cmp	r0, r3
    431e:	d317      	bcc.n	4350 <prvSampleTimeNow+0x4c>
		*pxTimerListsWereSwitched = pdFALSE;
    4320:	2300      	movs	r3, #0
    4322:	4642      	mov	r2, r8
    4324:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
    4326:	4b1f      	ldr	r3, [pc, #124]	; (43a4 <prvSampleTimeNow+0xa0>)
    4328:	4652      	mov	r2, sl
    432a:	601a      	str	r2, [r3, #0]
}
    432c:	4650      	mov	r0, sl
    432e:	b002      	add	sp, #8
    4330:	bc1c      	pop	{r2, r3, r4}
    4332:	4690      	mov	r8, r2
    4334:	4699      	mov	r9, r3
    4336:	46a2      	mov	sl, r4
    4338:	bdf0      	pop	{r4, r5, r6, r7, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    433a:	2300      	movs	r3, #0
    433c:	9300      	str	r3, [sp, #0]
    433e:	003a      	movs	r2, r7
    4340:	2100      	movs	r1, #0
    4342:	0020      	movs	r0, r4
    4344:	4c18      	ldr	r4, [pc, #96]	; (43a8 <prvSampleTimeNow+0xa4>)
    4346:	47a0      	blx	r4
				configASSERT( xResult );
    4348:	2800      	cmp	r0, #0
    434a:	d104      	bne.n	4356 <prvSampleTimeNow+0x52>
    434c:	b672      	cpsid	i
    434e:	e7fe      	b.n	434e <prvSampleTimeNow+0x4a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4350:	4d16      	ldr	r5, [pc, #88]	; (43ac <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4352:	4b17      	ldr	r3, [pc, #92]	; (43b0 <prvSampleTimeNow+0xac>)
    4354:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    4356:	682b      	ldr	r3, [r5, #0]
    4358:	681a      	ldr	r2, [r3, #0]
    435a:	2a00      	cmp	r2, #0
    435c:	d017      	beq.n	438e <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    435e:	68db      	ldr	r3, [r3, #12]
    4360:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4362:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4364:	1d26      	adds	r6, r4, #4
    4366:	0030      	movs	r0, r6
    4368:	47c8      	blx	r9
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    436a:	0020      	movs	r0, r4
    436c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    436e:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4370:	69e3      	ldr	r3, [r4, #28]
    4372:	2b01      	cmp	r3, #1
    4374:	d1ef      	bne.n	4356 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    4376:	69a3      	ldr	r3, [r4, #24]
    4378:	18fb      	adds	r3, r7, r3
			if( xReloadTime > xNextExpireTime )
    437a:	429f      	cmp	r7, r3
    437c:	d2dd      	bcs.n	433a <prvSampleTimeNow+0x36>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    437e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4380:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    4382:	4b0a      	ldr	r3, [pc, #40]	; (43ac <prvSampleTimeNow+0xa8>)
    4384:	6818      	ldr	r0, [r3, #0]
    4386:	0031      	movs	r1, r6
    4388:	4b0a      	ldr	r3, [pc, #40]	; (43b4 <prvSampleTimeNow+0xb0>)
    438a:	4798      	blx	r3
    438c:	e7e3      	b.n	4356 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
    438e:	4a0a      	ldr	r2, [pc, #40]	; (43b8 <prvSampleTimeNow+0xb4>)
    4390:	4906      	ldr	r1, [pc, #24]	; (43ac <prvSampleTimeNow+0xa8>)
    4392:	6810      	ldr	r0, [r2, #0]
    4394:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
    4396:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    4398:	2301      	movs	r3, #1
    439a:	4642      	mov	r2, r8
    439c:	6013      	str	r3, [r2, #0]
    439e:	e7c2      	b.n	4326 <prvSampleTimeNow+0x22>
    43a0:	00003c85 	.word	0x00003c85
    43a4:	20004118 	.word	0x20004118
    43a8:	00004299 	.word	0x00004299
    43ac:	200040e8 	.word	0x200040e8
    43b0:	00002fdb 	.word	0x00002fdb
    43b4:	00002fad 	.word	0x00002fad
    43b8:	200040ec 	.word	0x200040ec

000043bc <prvTimerTask>:
{
    43bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    43be:	b089      	sub	sp, #36	; 0x24
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    43c0:	4f52      	ldr	r7, [pc, #328]	; (450c <prvTimerTask+0x150>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    43c2:	4b53      	ldr	r3, [pc, #332]	; (4510 <prvTimerTask+0x154>)
    43c4:	681b      	ldr	r3, [r3, #0]
    43c6:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    43c8:	2a00      	cmp	r2, #0
    43ca:	d00e      	beq.n	43ea <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    43cc:	68db      	ldr	r3, [r3, #12]
    43ce:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
    43d0:	4b50      	ldr	r3, [pc, #320]	; (4514 <prvTimerTask+0x158>)
    43d2:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    43d4:	a805      	add	r0, sp, #20
    43d6:	4b50      	ldr	r3, [pc, #320]	; (4518 <prvTimerTask+0x15c>)
    43d8:	4798      	blx	r3
    43da:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    43dc:	9b05      	ldr	r3, [sp, #20]
    43de:	2b00      	cmp	r3, #0
    43e0:	d15f      	bne.n	44a2 <prvTimerTask+0xe6>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    43e2:	42a0      	cmp	r0, r4
    43e4:	d236      	bcs.n	4454 <prvTimerTask+0x98>
    43e6:	2200      	movs	r2, #0
    43e8:	e00f      	b.n	440a <prvTimerTask+0x4e>
	vTaskSuspendAll();
    43ea:	4b4a      	ldr	r3, [pc, #296]	; (4514 <prvTimerTask+0x158>)
    43ec:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    43ee:	a805      	add	r0, sp, #20
    43f0:	4b49      	ldr	r3, [pc, #292]	; (4518 <prvTimerTask+0x15c>)
    43f2:	4798      	blx	r3
    43f4:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
    43f6:	9b05      	ldr	r3, [sp, #20]
    43f8:	2b00      	cmp	r3, #0
    43fa:	d152      	bne.n	44a2 <prvTimerTask+0xe6>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    43fc:	4b47      	ldr	r3, [pc, #284]	; (451c <prvTimerTask+0x160>)
    43fe:	681b      	ldr	r3, [r3, #0]
    4400:	681b      	ldr	r3, [r3, #0]
    4402:	425a      	negs	r2, r3
    4404:	415a      	adcs	r2, r3
    4406:	b2d2      	uxtb	r2, r2
    4408:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    440a:	1b61      	subs	r1, r4, r5
    440c:	4b44      	ldr	r3, [pc, #272]	; (4520 <prvTimerTask+0x164>)
    440e:	6818      	ldr	r0, [r3, #0]
    4410:	4b44      	ldr	r3, [pc, #272]	; (4524 <prvTimerTask+0x168>)
    4412:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    4414:	4b44      	ldr	r3, [pc, #272]	; (4528 <prvTimerTask+0x16c>)
    4416:	4798      	blx	r3
    4418:	2800      	cmp	r0, #0
    441a:	d03f      	beq.n	449c <prvTimerTask+0xe0>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    441c:	4d40      	ldr	r5, [pc, #256]	; (4520 <prvTimerTask+0x164>)
    441e:	4c43      	ldr	r4, [pc, #268]	; (452c <prvTimerTask+0x170>)
    4420:	2200      	movs	r2, #0
    4422:	a905      	add	r1, sp, #20
    4424:	6828      	ldr	r0, [r5, #0]
    4426:	47a0      	blx	r4
    4428:	2800      	cmp	r0, #0
    442a:	d0ca      	beq.n	43c2 <prvTimerTask+0x6>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    442c:	9b05      	ldr	r3, [sp, #20]
    442e:	9303      	str	r3, [sp, #12]
    4430:	2b00      	cmp	r3, #0
    4432:	dbf5      	blt.n	4420 <prvTimerTask+0x64>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4434:	9e07      	ldr	r6, [sp, #28]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    4436:	6973      	ldr	r3, [r6, #20]
    4438:	2b00      	cmp	r3, #0
    443a:	d001      	beq.n	4440 <prvTimerTask+0x84>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    443c:	1d30      	adds	r0, r6, #4
    443e:	47b8      	blx	r7
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    4440:	a804      	add	r0, sp, #16
    4442:	4b35      	ldr	r3, [pc, #212]	; (4518 <prvTimerTask+0x15c>)
    4444:	4798      	blx	r3
			switch( xMessage.xMessageID )
    4446:	9b05      	ldr	r3, [sp, #20]
    4448:	2b09      	cmp	r3, #9
    444a:	d8e9      	bhi.n	4420 <prvTimerTask+0x64>
    444c:	009b      	lsls	r3, r3, #2
    444e:	4a38      	ldr	r2, [pc, #224]	; (4530 <prvTimerTask+0x174>)
    4450:	58d3      	ldr	r3, [r2, r3]
    4452:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
    4454:	4b34      	ldr	r3, [pc, #208]	; (4528 <prvTimerTask+0x16c>)
    4456:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    4458:	4b2d      	ldr	r3, [pc, #180]	; (4510 <prvTimerTask+0x154>)
    445a:	681b      	ldr	r3, [r3, #0]
    445c:	68db      	ldr	r3, [r3, #12]
    445e:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    4460:	1d30      	adds	r0, r6, #4
    4462:	4b2a      	ldr	r3, [pc, #168]	; (450c <prvTimerTask+0x150>)
    4464:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    4466:	69f3      	ldr	r3, [r6, #28]
    4468:	2b01      	cmp	r3, #1
    446a:	d003      	beq.n	4474 <prvTimerTask+0xb8>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    446c:	6a73      	ldr	r3, [r6, #36]	; 0x24
    446e:	0030      	movs	r0, r6
    4470:	4798      	blx	r3
    4472:	e7d3      	b.n	441c <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    4474:	69b3      	ldr	r3, [r6, #24]
    4476:	18e1      	adds	r1, r4, r3
    4478:	0023      	movs	r3, r4
    447a:	002a      	movs	r2, r5
    447c:	0030      	movs	r0, r6
    447e:	4d2d      	ldr	r5, [pc, #180]	; (4534 <prvTimerTask+0x178>)
    4480:	47a8      	blx	r5
    4482:	2800      	cmp	r0, #0
    4484:	d0f2      	beq.n	446c <prvTimerTask+0xb0>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4486:	2300      	movs	r3, #0
    4488:	9300      	str	r3, [sp, #0]
    448a:	0022      	movs	r2, r4
    448c:	2100      	movs	r1, #0
    448e:	0030      	movs	r0, r6
    4490:	4c29      	ldr	r4, [pc, #164]	; (4538 <prvTimerTask+0x17c>)
    4492:	47a0      	blx	r4
			configASSERT( xResult );
    4494:	2800      	cmp	r0, #0
    4496:	d1e9      	bne.n	446c <prvTimerTask+0xb0>
    4498:	b672      	cpsid	i
    449a:	e7fe      	b.n	449a <prvTimerTask+0xde>
					portYIELD_WITHIN_API();
    449c:	4b27      	ldr	r3, [pc, #156]	; (453c <prvTimerTask+0x180>)
    449e:	4798      	blx	r3
    44a0:	e7bc      	b.n	441c <prvTimerTask+0x60>
			( void ) xTaskResumeAll();
    44a2:	4b21      	ldr	r3, [pc, #132]	; (4528 <prvTimerTask+0x16c>)
    44a4:	4798      	blx	r3
    44a6:	e7b9      	b.n	441c <prvTimerTask+0x60>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    44a8:	9b06      	ldr	r3, [sp, #24]
    44aa:	69b2      	ldr	r2, [r6, #24]
    44ac:	4694      	mov	ip, r2
    44ae:	4463      	add	r3, ip
    44b0:	0019      	movs	r1, r3
    44b2:	9b06      	ldr	r3, [sp, #24]
    44b4:	0002      	movs	r2, r0
    44b6:	0030      	movs	r0, r6
    44b8:	4c1e      	ldr	r4, [pc, #120]	; (4534 <prvTimerTask+0x178>)
    44ba:	47a0      	blx	r4
    44bc:	2800      	cmp	r0, #0
    44be:	d0ae      	beq.n	441e <prvTimerTask+0x62>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    44c0:	0030      	movs	r0, r6
    44c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    44c4:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    44c6:	69f3      	ldr	r3, [r6, #28]
    44c8:	2b01      	cmp	r3, #1
    44ca:	d1a8      	bne.n	441e <prvTimerTask+0x62>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    44cc:	9b06      	ldr	r3, [sp, #24]
    44ce:	69b1      	ldr	r1, [r6, #24]
    44d0:	468c      	mov	ip, r1
    44d2:	4463      	add	r3, ip
    44d4:	001a      	movs	r2, r3
    44d6:	2300      	movs	r3, #0
    44d8:	9300      	str	r3, [sp, #0]
    44da:	2100      	movs	r1, #0
    44dc:	0030      	movs	r0, r6
    44de:	4c16      	ldr	r4, [pc, #88]	; (4538 <prvTimerTask+0x17c>)
    44e0:	47a0      	blx	r4
							configASSERT( xResult );
    44e2:	2800      	cmp	r0, #0
    44e4:	d19b      	bne.n	441e <prvTimerTask+0x62>
    44e6:	b672      	cpsid	i
    44e8:	e7fe      	b.n	44e8 <prvTimerTask+0x12c>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    44ea:	9906      	ldr	r1, [sp, #24]
    44ec:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    44ee:	2900      	cmp	r1, #0
    44f0:	d006      	beq.n	4500 <prvTimerTask+0x144>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    44f2:	1841      	adds	r1, r0, r1
    44f4:	0003      	movs	r3, r0
    44f6:	0002      	movs	r2, r0
    44f8:	0030      	movs	r0, r6
    44fa:	4c0e      	ldr	r4, [pc, #56]	; (4534 <prvTimerTask+0x178>)
    44fc:	47a0      	blx	r4
    44fe:	e78e      	b.n	441e <prvTimerTask+0x62>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    4500:	b672      	cpsid	i
    4502:	e7fe      	b.n	4502 <prvTimerTask+0x146>
						vPortFree( pxTimer );
    4504:	0030      	movs	r0, r6
    4506:	4b0e      	ldr	r3, [pc, #56]	; (4540 <prvTimerTask+0x184>)
    4508:	4798      	blx	r3
    450a:	e788      	b.n	441e <prvTimerTask+0x62>
    450c:	00002fdb 	.word	0x00002fdb
    4510:	200040e8 	.word	0x200040e8
    4514:	00003c75 	.word	0x00003c75
    4518:	00004305 	.word	0x00004305
    451c:	200040ec 	.word	0x200040ec
    4520:	2000411c 	.word	0x2000411c
    4524:	00003899 	.word	0x00003899
    4528:	00003db1 	.word	0x00003db1
    452c:	00003745 	.word	0x00003745
    4530:	00005448 	.word	0x00005448
    4534:	000041a9 	.word	0x000041a9
    4538:	00004299 	.word	0x00004299
    453c:	000030fd 	.word	0x000030fd
    4540:	00003241 	.word	0x00003241

00004544 <main>:

#include "TestTasks.h"


int main (void)
{
    4544:	b510      	push	{r4, lr}
	system_init();
    4546:	4b04      	ldr	r3, [pc, #16]	; (4558 <main+0x14>)
    4548:	4798      	blx	r3
	delay_init();  
    454a:	4b04      	ldr	r3, [pc, #16]	; (455c <main+0x18>)
    454c:	4798      	blx	r3

	testTasks_init();
    454e:	4b04      	ldr	r3, [pc, #16]	; (4560 <main+0x1c>)
    4550:	4798      	blx	r3

	// ..and let FreeRTOS run tasks!
	vTaskStartScheduler();
    4552:	4b04      	ldr	r3, [pc, #16]	; (4564 <main+0x20>)
    4554:	4798      	blx	r3
    4556:	e7fe      	b.n	4556 <main+0x12>
    4558:	00002e61 	.word	0x00002e61
    455c:	000019a9 	.word	0x000019a9
    4560:	0000171d 	.word	0x0000171d
    4564:	00003c05 	.word	0x00003c05

00004568 <__udivsi3>:
    4568:	2200      	movs	r2, #0
    456a:	0843      	lsrs	r3, r0, #1
    456c:	428b      	cmp	r3, r1
    456e:	d374      	bcc.n	465a <__udivsi3+0xf2>
    4570:	0903      	lsrs	r3, r0, #4
    4572:	428b      	cmp	r3, r1
    4574:	d35f      	bcc.n	4636 <__udivsi3+0xce>
    4576:	0a03      	lsrs	r3, r0, #8
    4578:	428b      	cmp	r3, r1
    457a:	d344      	bcc.n	4606 <__udivsi3+0x9e>
    457c:	0b03      	lsrs	r3, r0, #12
    457e:	428b      	cmp	r3, r1
    4580:	d328      	bcc.n	45d4 <__udivsi3+0x6c>
    4582:	0c03      	lsrs	r3, r0, #16
    4584:	428b      	cmp	r3, r1
    4586:	d30d      	bcc.n	45a4 <__udivsi3+0x3c>
    4588:	22ff      	movs	r2, #255	; 0xff
    458a:	0209      	lsls	r1, r1, #8
    458c:	ba12      	rev	r2, r2
    458e:	0c03      	lsrs	r3, r0, #16
    4590:	428b      	cmp	r3, r1
    4592:	d302      	bcc.n	459a <__udivsi3+0x32>
    4594:	1212      	asrs	r2, r2, #8
    4596:	0209      	lsls	r1, r1, #8
    4598:	d065      	beq.n	4666 <__udivsi3+0xfe>
    459a:	0b03      	lsrs	r3, r0, #12
    459c:	428b      	cmp	r3, r1
    459e:	d319      	bcc.n	45d4 <__udivsi3+0x6c>
    45a0:	e000      	b.n	45a4 <__udivsi3+0x3c>
    45a2:	0a09      	lsrs	r1, r1, #8
    45a4:	0bc3      	lsrs	r3, r0, #15
    45a6:	428b      	cmp	r3, r1
    45a8:	d301      	bcc.n	45ae <__udivsi3+0x46>
    45aa:	03cb      	lsls	r3, r1, #15
    45ac:	1ac0      	subs	r0, r0, r3
    45ae:	4152      	adcs	r2, r2
    45b0:	0b83      	lsrs	r3, r0, #14
    45b2:	428b      	cmp	r3, r1
    45b4:	d301      	bcc.n	45ba <__udivsi3+0x52>
    45b6:	038b      	lsls	r3, r1, #14
    45b8:	1ac0      	subs	r0, r0, r3
    45ba:	4152      	adcs	r2, r2
    45bc:	0b43      	lsrs	r3, r0, #13
    45be:	428b      	cmp	r3, r1
    45c0:	d301      	bcc.n	45c6 <__udivsi3+0x5e>
    45c2:	034b      	lsls	r3, r1, #13
    45c4:	1ac0      	subs	r0, r0, r3
    45c6:	4152      	adcs	r2, r2
    45c8:	0b03      	lsrs	r3, r0, #12
    45ca:	428b      	cmp	r3, r1
    45cc:	d301      	bcc.n	45d2 <__udivsi3+0x6a>
    45ce:	030b      	lsls	r3, r1, #12
    45d0:	1ac0      	subs	r0, r0, r3
    45d2:	4152      	adcs	r2, r2
    45d4:	0ac3      	lsrs	r3, r0, #11
    45d6:	428b      	cmp	r3, r1
    45d8:	d301      	bcc.n	45de <__udivsi3+0x76>
    45da:	02cb      	lsls	r3, r1, #11
    45dc:	1ac0      	subs	r0, r0, r3
    45de:	4152      	adcs	r2, r2
    45e0:	0a83      	lsrs	r3, r0, #10
    45e2:	428b      	cmp	r3, r1
    45e4:	d301      	bcc.n	45ea <__udivsi3+0x82>
    45e6:	028b      	lsls	r3, r1, #10
    45e8:	1ac0      	subs	r0, r0, r3
    45ea:	4152      	adcs	r2, r2
    45ec:	0a43      	lsrs	r3, r0, #9
    45ee:	428b      	cmp	r3, r1
    45f0:	d301      	bcc.n	45f6 <__udivsi3+0x8e>
    45f2:	024b      	lsls	r3, r1, #9
    45f4:	1ac0      	subs	r0, r0, r3
    45f6:	4152      	adcs	r2, r2
    45f8:	0a03      	lsrs	r3, r0, #8
    45fa:	428b      	cmp	r3, r1
    45fc:	d301      	bcc.n	4602 <__udivsi3+0x9a>
    45fe:	020b      	lsls	r3, r1, #8
    4600:	1ac0      	subs	r0, r0, r3
    4602:	4152      	adcs	r2, r2
    4604:	d2cd      	bcs.n	45a2 <__udivsi3+0x3a>
    4606:	09c3      	lsrs	r3, r0, #7
    4608:	428b      	cmp	r3, r1
    460a:	d301      	bcc.n	4610 <__udivsi3+0xa8>
    460c:	01cb      	lsls	r3, r1, #7
    460e:	1ac0      	subs	r0, r0, r3
    4610:	4152      	adcs	r2, r2
    4612:	0983      	lsrs	r3, r0, #6
    4614:	428b      	cmp	r3, r1
    4616:	d301      	bcc.n	461c <__udivsi3+0xb4>
    4618:	018b      	lsls	r3, r1, #6
    461a:	1ac0      	subs	r0, r0, r3
    461c:	4152      	adcs	r2, r2
    461e:	0943      	lsrs	r3, r0, #5
    4620:	428b      	cmp	r3, r1
    4622:	d301      	bcc.n	4628 <__udivsi3+0xc0>
    4624:	014b      	lsls	r3, r1, #5
    4626:	1ac0      	subs	r0, r0, r3
    4628:	4152      	adcs	r2, r2
    462a:	0903      	lsrs	r3, r0, #4
    462c:	428b      	cmp	r3, r1
    462e:	d301      	bcc.n	4634 <__udivsi3+0xcc>
    4630:	010b      	lsls	r3, r1, #4
    4632:	1ac0      	subs	r0, r0, r3
    4634:	4152      	adcs	r2, r2
    4636:	08c3      	lsrs	r3, r0, #3
    4638:	428b      	cmp	r3, r1
    463a:	d301      	bcc.n	4640 <__udivsi3+0xd8>
    463c:	00cb      	lsls	r3, r1, #3
    463e:	1ac0      	subs	r0, r0, r3
    4640:	4152      	adcs	r2, r2
    4642:	0883      	lsrs	r3, r0, #2
    4644:	428b      	cmp	r3, r1
    4646:	d301      	bcc.n	464c <__udivsi3+0xe4>
    4648:	008b      	lsls	r3, r1, #2
    464a:	1ac0      	subs	r0, r0, r3
    464c:	4152      	adcs	r2, r2
    464e:	0843      	lsrs	r3, r0, #1
    4650:	428b      	cmp	r3, r1
    4652:	d301      	bcc.n	4658 <__udivsi3+0xf0>
    4654:	004b      	lsls	r3, r1, #1
    4656:	1ac0      	subs	r0, r0, r3
    4658:	4152      	adcs	r2, r2
    465a:	1a41      	subs	r1, r0, r1
    465c:	d200      	bcs.n	4660 <__udivsi3+0xf8>
    465e:	4601      	mov	r1, r0
    4660:	4152      	adcs	r2, r2
    4662:	4610      	mov	r0, r2
    4664:	4770      	bx	lr
    4666:	e7ff      	b.n	4668 <__udivsi3+0x100>
    4668:	b501      	push	{r0, lr}
    466a:	2000      	movs	r0, #0
    466c:	f000 f806 	bl	467c <__aeabi_idiv0>
    4670:	bd02      	pop	{r1, pc}
    4672:	46c0      	nop			; (mov r8, r8)

00004674 <__aeabi_uidivmod>:
    4674:	2900      	cmp	r1, #0
    4676:	d0f7      	beq.n	4668 <__udivsi3+0x100>
    4678:	e776      	b.n	4568 <__udivsi3>
    467a:	4770      	bx	lr

0000467c <__aeabi_idiv0>:
    467c:	4770      	bx	lr
    467e:	46c0      	nop			; (mov r8, r8)

00004680 <__aeabi_lmul>:
    4680:	b5f0      	push	{r4, r5, r6, r7, lr}
    4682:	46ce      	mov	lr, r9
    4684:	4647      	mov	r7, r8
    4686:	0415      	lsls	r5, r2, #16
    4688:	0c2d      	lsrs	r5, r5, #16
    468a:	002e      	movs	r6, r5
    468c:	b580      	push	{r7, lr}
    468e:	0407      	lsls	r7, r0, #16
    4690:	0c14      	lsrs	r4, r2, #16
    4692:	0c3f      	lsrs	r7, r7, #16
    4694:	4699      	mov	r9, r3
    4696:	0c03      	lsrs	r3, r0, #16
    4698:	437e      	muls	r6, r7
    469a:	435d      	muls	r5, r3
    469c:	4367      	muls	r7, r4
    469e:	4363      	muls	r3, r4
    46a0:	197f      	adds	r7, r7, r5
    46a2:	0c34      	lsrs	r4, r6, #16
    46a4:	19e4      	adds	r4, r4, r7
    46a6:	469c      	mov	ip, r3
    46a8:	42a5      	cmp	r5, r4
    46aa:	d903      	bls.n	46b4 <__aeabi_lmul+0x34>
    46ac:	2380      	movs	r3, #128	; 0x80
    46ae:	025b      	lsls	r3, r3, #9
    46b0:	4698      	mov	r8, r3
    46b2:	44c4      	add	ip, r8
    46b4:	464b      	mov	r3, r9
    46b6:	4351      	muls	r1, r2
    46b8:	4343      	muls	r3, r0
    46ba:	0436      	lsls	r6, r6, #16
    46bc:	0c36      	lsrs	r6, r6, #16
    46be:	0c25      	lsrs	r5, r4, #16
    46c0:	0424      	lsls	r4, r4, #16
    46c2:	4465      	add	r5, ip
    46c4:	19a4      	adds	r4, r4, r6
    46c6:	1859      	adds	r1, r3, r1
    46c8:	1949      	adds	r1, r1, r5
    46ca:	0020      	movs	r0, r4
    46cc:	bc0c      	pop	{r2, r3}
    46ce:	4690      	mov	r8, r2
    46d0:	4699      	mov	r9, r3
    46d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000046d4 <__libc_init_array>:
    46d4:	b570      	push	{r4, r5, r6, lr}
    46d6:	2600      	movs	r6, #0
    46d8:	4d0c      	ldr	r5, [pc, #48]	; (470c <__libc_init_array+0x38>)
    46da:	4c0d      	ldr	r4, [pc, #52]	; (4710 <__libc_init_array+0x3c>)
    46dc:	1b64      	subs	r4, r4, r5
    46de:	10a4      	asrs	r4, r4, #2
    46e0:	42a6      	cmp	r6, r4
    46e2:	d109      	bne.n	46f8 <__libc_init_array+0x24>
    46e4:	2600      	movs	r6, #0
    46e6:	f000 ff11 	bl	550c <_init>
    46ea:	4d0a      	ldr	r5, [pc, #40]	; (4714 <__libc_init_array+0x40>)
    46ec:	4c0a      	ldr	r4, [pc, #40]	; (4718 <__libc_init_array+0x44>)
    46ee:	1b64      	subs	r4, r4, r5
    46f0:	10a4      	asrs	r4, r4, #2
    46f2:	42a6      	cmp	r6, r4
    46f4:	d105      	bne.n	4702 <__libc_init_array+0x2e>
    46f6:	bd70      	pop	{r4, r5, r6, pc}
    46f8:	00b3      	lsls	r3, r6, #2
    46fa:	58eb      	ldr	r3, [r5, r3]
    46fc:	4798      	blx	r3
    46fe:	3601      	adds	r6, #1
    4700:	e7ee      	b.n	46e0 <__libc_init_array+0xc>
    4702:	00b3      	lsls	r3, r6, #2
    4704:	58eb      	ldr	r3, [r5, r3]
    4706:	4798      	blx	r3
    4708:	3601      	adds	r6, #1
    470a:	e7f2      	b.n	46f2 <__libc_init_array+0x1e>
    470c:	00005518 	.word	0x00005518
    4710:	00005518 	.word	0x00005518
    4714:	00005518 	.word	0x00005518
    4718:	0000551c 	.word	0x0000551c

0000471c <memcpy>:
    471c:	2300      	movs	r3, #0
    471e:	b510      	push	{r4, lr}
    4720:	429a      	cmp	r2, r3
    4722:	d100      	bne.n	4726 <memcpy+0xa>
    4724:	bd10      	pop	{r4, pc}
    4726:	5ccc      	ldrb	r4, [r1, r3]
    4728:	54c4      	strb	r4, [r0, r3]
    472a:	3301      	adds	r3, #1
    472c:	e7f8      	b.n	4720 <memcpy+0x4>

0000472e <memset>:
    472e:	0003      	movs	r3, r0
    4730:	1882      	adds	r2, r0, r2
    4732:	4293      	cmp	r3, r2
    4734:	d100      	bne.n	4738 <memset+0xa>
    4736:	4770      	bx	lr
    4738:	7019      	strb	r1, [r3, #0]
    473a:	3301      	adds	r3, #1
    473c:	e7f9      	b.n	4732 <memset+0x4>
	...

00004740 <_free_r>:
    4740:	b570      	push	{r4, r5, r6, lr}
    4742:	0005      	movs	r5, r0
    4744:	2900      	cmp	r1, #0
    4746:	d010      	beq.n	476a <_free_r+0x2a>
    4748:	1f0c      	subs	r4, r1, #4
    474a:	6823      	ldr	r3, [r4, #0]
    474c:	2b00      	cmp	r3, #0
    474e:	da00      	bge.n	4752 <_free_r+0x12>
    4750:	18e4      	adds	r4, r4, r3
    4752:	0028      	movs	r0, r5
    4754:	f000 f8fc 	bl	4950 <__malloc_lock>
    4758:	4a1d      	ldr	r2, [pc, #116]	; (47d0 <_free_r+0x90>)
    475a:	6813      	ldr	r3, [r2, #0]
    475c:	2b00      	cmp	r3, #0
    475e:	d105      	bne.n	476c <_free_r+0x2c>
    4760:	6063      	str	r3, [r4, #4]
    4762:	6014      	str	r4, [r2, #0]
    4764:	0028      	movs	r0, r5
    4766:	f000 f8f4 	bl	4952 <__malloc_unlock>
    476a:	bd70      	pop	{r4, r5, r6, pc}
    476c:	42a3      	cmp	r3, r4
    476e:	d909      	bls.n	4784 <_free_r+0x44>
    4770:	6821      	ldr	r1, [r4, #0]
    4772:	1860      	adds	r0, r4, r1
    4774:	4283      	cmp	r3, r0
    4776:	d1f3      	bne.n	4760 <_free_r+0x20>
    4778:	6818      	ldr	r0, [r3, #0]
    477a:	685b      	ldr	r3, [r3, #4]
    477c:	1841      	adds	r1, r0, r1
    477e:	6021      	str	r1, [r4, #0]
    4780:	e7ee      	b.n	4760 <_free_r+0x20>
    4782:	0013      	movs	r3, r2
    4784:	685a      	ldr	r2, [r3, #4]
    4786:	2a00      	cmp	r2, #0
    4788:	d001      	beq.n	478e <_free_r+0x4e>
    478a:	42a2      	cmp	r2, r4
    478c:	d9f9      	bls.n	4782 <_free_r+0x42>
    478e:	6819      	ldr	r1, [r3, #0]
    4790:	1858      	adds	r0, r3, r1
    4792:	42a0      	cmp	r0, r4
    4794:	d10b      	bne.n	47ae <_free_r+0x6e>
    4796:	6820      	ldr	r0, [r4, #0]
    4798:	1809      	adds	r1, r1, r0
    479a:	1858      	adds	r0, r3, r1
    479c:	6019      	str	r1, [r3, #0]
    479e:	4282      	cmp	r2, r0
    47a0:	d1e0      	bne.n	4764 <_free_r+0x24>
    47a2:	6810      	ldr	r0, [r2, #0]
    47a4:	6852      	ldr	r2, [r2, #4]
    47a6:	1841      	adds	r1, r0, r1
    47a8:	6019      	str	r1, [r3, #0]
    47aa:	605a      	str	r2, [r3, #4]
    47ac:	e7da      	b.n	4764 <_free_r+0x24>
    47ae:	42a0      	cmp	r0, r4
    47b0:	d902      	bls.n	47b8 <_free_r+0x78>
    47b2:	230c      	movs	r3, #12
    47b4:	602b      	str	r3, [r5, #0]
    47b6:	e7d5      	b.n	4764 <_free_r+0x24>
    47b8:	6821      	ldr	r1, [r4, #0]
    47ba:	1860      	adds	r0, r4, r1
    47bc:	4282      	cmp	r2, r0
    47be:	d103      	bne.n	47c8 <_free_r+0x88>
    47c0:	6810      	ldr	r0, [r2, #0]
    47c2:	6852      	ldr	r2, [r2, #4]
    47c4:	1841      	adds	r1, r0, r1
    47c6:	6021      	str	r1, [r4, #0]
    47c8:	6062      	str	r2, [r4, #4]
    47ca:	605c      	str	r4, [r3, #4]
    47cc:	e7ca      	b.n	4764 <_free_r+0x24>
    47ce:	46c0      	nop			; (mov r8, r8)
    47d0:	20004124 	.word	0x20004124

000047d4 <_malloc_r>:
    47d4:	2303      	movs	r3, #3
    47d6:	b570      	push	{r4, r5, r6, lr}
    47d8:	1ccd      	adds	r5, r1, #3
    47da:	439d      	bics	r5, r3
    47dc:	3508      	adds	r5, #8
    47de:	0006      	movs	r6, r0
    47e0:	2d0c      	cmp	r5, #12
    47e2:	d21e      	bcs.n	4822 <_malloc_r+0x4e>
    47e4:	250c      	movs	r5, #12
    47e6:	42a9      	cmp	r1, r5
    47e8:	d81d      	bhi.n	4826 <_malloc_r+0x52>
    47ea:	0030      	movs	r0, r6
    47ec:	f000 f8b0 	bl	4950 <__malloc_lock>
    47f0:	4a25      	ldr	r2, [pc, #148]	; (4888 <_malloc_r+0xb4>)
    47f2:	6814      	ldr	r4, [r2, #0]
    47f4:	0021      	movs	r1, r4
    47f6:	2900      	cmp	r1, #0
    47f8:	d119      	bne.n	482e <_malloc_r+0x5a>
    47fa:	4c24      	ldr	r4, [pc, #144]	; (488c <_malloc_r+0xb8>)
    47fc:	6823      	ldr	r3, [r4, #0]
    47fe:	2b00      	cmp	r3, #0
    4800:	d103      	bne.n	480a <_malloc_r+0x36>
    4802:	0030      	movs	r0, r6
    4804:	f000 f844 	bl	4890 <_sbrk_r>
    4808:	6020      	str	r0, [r4, #0]
    480a:	0029      	movs	r1, r5
    480c:	0030      	movs	r0, r6
    480e:	f000 f83f 	bl	4890 <_sbrk_r>
    4812:	1c43      	adds	r3, r0, #1
    4814:	d12c      	bne.n	4870 <_malloc_r+0x9c>
    4816:	230c      	movs	r3, #12
    4818:	0030      	movs	r0, r6
    481a:	6033      	str	r3, [r6, #0]
    481c:	f000 f899 	bl	4952 <__malloc_unlock>
    4820:	e003      	b.n	482a <_malloc_r+0x56>
    4822:	2d00      	cmp	r5, #0
    4824:	dadf      	bge.n	47e6 <_malloc_r+0x12>
    4826:	230c      	movs	r3, #12
    4828:	6033      	str	r3, [r6, #0]
    482a:	2000      	movs	r0, #0
    482c:	bd70      	pop	{r4, r5, r6, pc}
    482e:	680b      	ldr	r3, [r1, #0]
    4830:	1b5b      	subs	r3, r3, r5
    4832:	d41a      	bmi.n	486a <_malloc_r+0x96>
    4834:	2b0b      	cmp	r3, #11
    4836:	d903      	bls.n	4840 <_malloc_r+0x6c>
    4838:	600b      	str	r3, [r1, #0]
    483a:	18cc      	adds	r4, r1, r3
    483c:	6025      	str	r5, [r4, #0]
    483e:	e003      	b.n	4848 <_malloc_r+0x74>
    4840:	428c      	cmp	r4, r1
    4842:	d10e      	bne.n	4862 <_malloc_r+0x8e>
    4844:	6863      	ldr	r3, [r4, #4]
    4846:	6013      	str	r3, [r2, #0]
    4848:	0030      	movs	r0, r6
    484a:	f000 f882 	bl	4952 <__malloc_unlock>
    484e:	0020      	movs	r0, r4
    4850:	2207      	movs	r2, #7
    4852:	300b      	adds	r0, #11
    4854:	1d23      	adds	r3, r4, #4
    4856:	4390      	bics	r0, r2
    4858:	1ac3      	subs	r3, r0, r3
    485a:	d0e7      	beq.n	482c <_malloc_r+0x58>
    485c:	425a      	negs	r2, r3
    485e:	50e2      	str	r2, [r4, r3]
    4860:	e7e4      	b.n	482c <_malloc_r+0x58>
    4862:	684b      	ldr	r3, [r1, #4]
    4864:	6063      	str	r3, [r4, #4]
    4866:	000c      	movs	r4, r1
    4868:	e7ee      	b.n	4848 <_malloc_r+0x74>
    486a:	000c      	movs	r4, r1
    486c:	6849      	ldr	r1, [r1, #4]
    486e:	e7c2      	b.n	47f6 <_malloc_r+0x22>
    4870:	2303      	movs	r3, #3
    4872:	1cc4      	adds	r4, r0, #3
    4874:	439c      	bics	r4, r3
    4876:	42a0      	cmp	r0, r4
    4878:	d0e0      	beq.n	483c <_malloc_r+0x68>
    487a:	1a21      	subs	r1, r4, r0
    487c:	0030      	movs	r0, r6
    487e:	f000 f807 	bl	4890 <_sbrk_r>
    4882:	1c43      	adds	r3, r0, #1
    4884:	d1da      	bne.n	483c <_malloc_r+0x68>
    4886:	e7c6      	b.n	4816 <_malloc_r+0x42>
    4888:	20004124 	.word	0x20004124
    488c:	20004128 	.word	0x20004128

00004890 <_sbrk_r>:
    4890:	2300      	movs	r3, #0
    4892:	b570      	push	{r4, r5, r6, lr}
    4894:	4c06      	ldr	r4, [pc, #24]	; (48b0 <_sbrk_r+0x20>)
    4896:	0005      	movs	r5, r0
    4898:	0008      	movs	r0, r1
    489a:	6023      	str	r3, [r4, #0]
    489c:	f7fe fb5a 	bl	2f54 <_sbrk>
    48a0:	1c43      	adds	r3, r0, #1
    48a2:	d103      	bne.n	48ac <_sbrk_r+0x1c>
    48a4:	6823      	ldr	r3, [r4, #0]
    48a6:	2b00      	cmp	r3, #0
    48a8:	d000      	beq.n	48ac <_sbrk_r+0x1c>
    48aa:	602b      	str	r3, [r5, #0]
    48ac:	bd70      	pop	{r4, r5, r6, pc}
    48ae:	46c0      	nop			; (mov r8, r8)
    48b0:	20005440 	.word	0x20005440

000048b4 <siprintf>:
    48b4:	b40e      	push	{r1, r2, r3}
    48b6:	b510      	push	{r4, lr}
    48b8:	b09d      	sub	sp, #116	; 0x74
    48ba:	a902      	add	r1, sp, #8
    48bc:	9002      	str	r0, [sp, #8]
    48be:	6108      	str	r0, [r1, #16]
    48c0:	480b      	ldr	r0, [pc, #44]	; (48f0 <siprintf+0x3c>)
    48c2:	2482      	movs	r4, #130	; 0x82
    48c4:	6088      	str	r0, [r1, #8]
    48c6:	6148      	str	r0, [r1, #20]
    48c8:	2001      	movs	r0, #1
    48ca:	4240      	negs	r0, r0
    48cc:	ab1f      	add	r3, sp, #124	; 0x7c
    48ce:	81c8      	strh	r0, [r1, #14]
    48d0:	4808      	ldr	r0, [pc, #32]	; (48f4 <siprintf+0x40>)
    48d2:	cb04      	ldmia	r3!, {r2}
    48d4:	00a4      	lsls	r4, r4, #2
    48d6:	6800      	ldr	r0, [r0, #0]
    48d8:	9301      	str	r3, [sp, #4]
    48da:	818c      	strh	r4, [r1, #12]
    48dc:	f000 f89c 	bl	4a18 <_svfiprintf_r>
    48e0:	2300      	movs	r3, #0
    48e2:	9a02      	ldr	r2, [sp, #8]
    48e4:	7013      	strb	r3, [r2, #0]
    48e6:	b01d      	add	sp, #116	; 0x74
    48e8:	bc10      	pop	{r4}
    48ea:	bc08      	pop	{r3}
    48ec:	b003      	add	sp, #12
    48ee:	4718      	bx	r3
    48f0:	7fffffff 	.word	0x7fffffff
    48f4:	20000058 	.word	0x20000058

000048f8 <strlen>:
    48f8:	2300      	movs	r3, #0
    48fa:	5cc2      	ldrb	r2, [r0, r3]
    48fc:	3301      	adds	r3, #1
    48fe:	2a00      	cmp	r2, #0
    4900:	d1fb      	bne.n	48fa <strlen+0x2>
    4902:	1e58      	subs	r0, r3, #1
    4904:	4770      	bx	lr
	...

00004908 <_vsiprintf_r>:
    4908:	b530      	push	{r4, r5, lr}
    490a:	b09b      	sub	sp, #108	; 0x6c
    490c:	9100      	str	r1, [sp, #0]
    490e:	9104      	str	r1, [sp, #16]
    4910:	4908      	ldr	r1, [pc, #32]	; (4934 <_vsiprintf_r+0x2c>)
    4912:	466d      	mov	r5, sp
    4914:	9102      	str	r1, [sp, #8]
    4916:	9105      	str	r1, [sp, #20]
    4918:	2101      	movs	r1, #1
    491a:	2482      	movs	r4, #130	; 0x82
    491c:	4249      	negs	r1, r1
    491e:	81e9      	strh	r1, [r5, #14]
    4920:	00a4      	lsls	r4, r4, #2
    4922:	4669      	mov	r1, sp
    4924:	81ac      	strh	r4, [r5, #12]
    4926:	f000 f877 	bl	4a18 <_svfiprintf_r>
    492a:	2300      	movs	r3, #0
    492c:	9a00      	ldr	r2, [sp, #0]
    492e:	7013      	strb	r3, [r2, #0]
    4930:	b01b      	add	sp, #108	; 0x6c
    4932:	bd30      	pop	{r4, r5, pc}
    4934:	7fffffff 	.word	0x7fffffff

00004938 <vsiprintf>:
    4938:	b510      	push	{r4, lr}
    493a:	0013      	movs	r3, r2
    493c:	000a      	movs	r2, r1
    493e:	0001      	movs	r1, r0
    4940:	4802      	ldr	r0, [pc, #8]	; (494c <vsiprintf+0x14>)
    4942:	6800      	ldr	r0, [r0, #0]
    4944:	f7ff ffe0 	bl	4908 <_vsiprintf_r>
    4948:	bd10      	pop	{r4, pc}
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	20000058 	.word	0x20000058

00004950 <__malloc_lock>:
    4950:	4770      	bx	lr

00004952 <__malloc_unlock>:
    4952:	4770      	bx	lr

00004954 <__ssputs_r>:
    4954:	b5f0      	push	{r4, r5, r6, r7, lr}
    4956:	688e      	ldr	r6, [r1, #8]
    4958:	b085      	sub	sp, #20
    495a:	0007      	movs	r7, r0
    495c:	000c      	movs	r4, r1
    495e:	9203      	str	r2, [sp, #12]
    4960:	9301      	str	r3, [sp, #4]
    4962:	429e      	cmp	r6, r3
    4964:	d839      	bhi.n	49da <__ssputs_r+0x86>
    4966:	2390      	movs	r3, #144	; 0x90
    4968:	898a      	ldrh	r2, [r1, #12]
    496a:	00db      	lsls	r3, r3, #3
    496c:	421a      	tst	r2, r3
    496e:	d034      	beq.n	49da <__ssputs_r+0x86>
    4970:	2503      	movs	r5, #3
    4972:	6909      	ldr	r1, [r1, #16]
    4974:	6823      	ldr	r3, [r4, #0]
    4976:	1a5b      	subs	r3, r3, r1
    4978:	9302      	str	r3, [sp, #8]
    497a:	6963      	ldr	r3, [r4, #20]
    497c:	9802      	ldr	r0, [sp, #8]
    497e:	435d      	muls	r5, r3
    4980:	0feb      	lsrs	r3, r5, #31
    4982:	195d      	adds	r5, r3, r5
    4984:	9b01      	ldr	r3, [sp, #4]
    4986:	106d      	asrs	r5, r5, #1
    4988:	3301      	adds	r3, #1
    498a:	181b      	adds	r3, r3, r0
    498c:	42ab      	cmp	r3, r5
    498e:	d900      	bls.n	4992 <__ssputs_r+0x3e>
    4990:	001d      	movs	r5, r3
    4992:	0553      	lsls	r3, r2, #21
    4994:	d532      	bpl.n	49fc <__ssputs_r+0xa8>
    4996:	0029      	movs	r1, r5
    4998:	0038      	movs	r0, r7
    499a:	f7ff ff1b 	bl	47d4 <_malloc_r>
    499e:	1e06      	subs	r6, r0, #0
    49a0:	d109      	bne.n	49b6 <__ssputs_r+0x62>
    49a2:	230c      	movs	r3, #12
    49a4:	603b      	str	r3, [r7, #0]
    49a6:	2340      	movs	r3, #64	; 0x40
    49a8:	2001      	movs	r0, #1
    49aa:	89a2      	ldrh	r2, [r4, #12]
    49ac:	4240      	negs	r0, r0
    49ae:	4313      	orrs	r3, r2
    49b0:	81a3      	strh	r3, [r4, #12]
    49b2:	b005      	add	sp, #20
    49b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49b6:	9a02      	ldr	r2, [sp, #8]
    49b8:	6921      	ldr	r1, [r4, #16]
    49ba:	f7ff feaf 	bl	471c <memcpy>
    49be:	89a3      	ldrh	r3, [r4, #12]
    49c0:	4a14      	ldr	r2, [pc, #80]	; (4a14 <__ssputs_r+0xc0>)
    49c2:	401a      	ands	r2, r3
    49c4:	2380      	movs	r3, #128	; 0x80
    49c6:	4313      	orrs	r3, r2
    49c8:	81a3      	strh	r3, [r4, #12]
    49ca:	9b02      	ldr	r3, [sp, #8]
    49cc:	6126      	str	r6, [r4, #16]
    49ce:	18f6      	adds	r6, r6, r3
    49d0:	6026      	str	r6, [r4, #0]
    49d2:	6165      	str	r5, [r4, #20]
    49d4:	9e01      	ldr	r6, [sp, #4]
    49d6:	1aed      	subs	r5, r5, r3
    49d8:	60a5      	str	r5, [r4, #8]
    49da:	9b01      	ldr	r3, [sp, #4]
    49dc:	42b3      	cmp	r3, r6
    49de:	d200      	bcs.n	49e2 <__ssputs_r+0x8e>
    49e0:	001e      	movs	r6, r3
    49e2:	0032      	movs	r2, r6
    49e4:	9903      	ldr	r1, [sp, #12]
    49e6:	6820      	ldr	r0, [r4, #0]
    49e8:	f000 faad 	bl	4f46 <memmove>
    49ec:	68a3      	ldr	r3, [r4, #8]
    49ee:	2000      	movs	r0, #0
    49f0:	1b9b      	subs	r3, r3, r6
    49f2:	60a3      	str	r3, [r4, #8]
    49f4:	6823      	ldr	r3, [r4, #0]
    49f6:	199e      	adds	r6, r3, r6
    49f8:	6026      	str	r6, [r4, #0]
    49fa:	e7da      	b.n	49b2 <__ssputs_r+0x5e>
    49fc:	002a      	movs	r2, r5
    49fe:	0038      	movs	r0, r7
    4a00:	f000 fab3 	bl	4f6a <_realloc_r>
    4a04:	1e06      	subs	r6, r0, #0
    4a06:	d1e0      	bne.n	49ca <__ssputs_r+0x76>
    4a08:	6921      	ldr	r1, [r4, #16]
    4a0a:	0038      	movs	r0, r7
    4a0c:	f7ff fe98 	bl	4740 <_free_r>
    4a10:	e7c7      	b.n	49a2 <__ssputs_r+0x4e>
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	fffffb7f 	.word	0xfffffb7f

00004a18 <_svfiprintf_r>:
    4a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a1a:	b09f      	sub	sp, #124	; 0x7c
    4a1c:	9002      	str	r0, [sp, #8]
    4a1e:	9305      	str	r3, [sp, #20]
    4a20:	898b      	ldrh	r3, [r1, #12]
    4a22:	000f      	movs	r7, r1
    4a24:	0016      	movs	r6, r2
    4a26:	061b      	lsls	r3, r3, #24
    4a28:	d511      	bpl.n	4a4e <_svfiprintf_r+0x36>
    4a2a:	690b      	ldr	r3, [r1, #16]
    4a2c:	2b00      	cmp	r3, #0
    4a2e:	d10e      	bne.n	4a4e <_svfiprintf_r+0x36>
    4a30:	2140      	movs	r1, #64	; 0x40
    4a32:	f7ff fecf 	bl	47d4 <_malloc_r>
    4a36:	6038      	str	r0, [r7, #0]
    4a38:	6138      	str	r0, [r7, #16]
    4a3a:	2800      	cmp	r0, #0
    4a3c:	d105      	bne.n	4a4a <_svfiprintf_r+0x32>
    4a3e:	230c      	movs	r3, #12
    4a40:	9a02      	ldr	r2, [sp, #8]
    4a42:	3801      	subs	r0, #1
    4a44:	6013      	str	r3, [r2, #0]
    4a46:	b01f      	add	sp, #124	; 0x7c
    4a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a4a:	2340      	movs	r3, #64	; 0x40
    4a4c:	617b      	str	r3, [r7, #20]
    4a4e:	2300      	movs	r3, #0
    4a50:	ad06      	add	r5, sp, #24
    4a52:	616b      	str	r3, [r5, #20]
    4a54:	3320      	adds	r3, #32
    4a56:	766b      	strb	r3, [r5, #25]
    4a58:	3310      	adds	r3, #16
    4a5a:	76ab      	strb	r3, [r5, #26]
    4a5c:	0034      	movs	r4, r6
    4a5e:	7823      	ldrb	r3, [r4, #0]
    4a60:	2b00      	cmp	r3, #0
    4a62:	d147      	bne.n	4af4 <_svfiprintf_r+0xdc>
    4a64:	1ba3      	subs	r3, r4, r6
    4a66:	9304      	str	r3, [sp, #16]
    4a68:	d00d      	beq.n	4a86 <_svfiprintf_r+0x6e>
    4a6a:	1ba3      	subs	r3, r4, r6
    4a6c:	0032      	movs	r2, r6
    4a6e:	0039      	movs	r1, r7
    4a70:	9802      	ldr	r0, [sp, #8]
    4a72:	f7ff ff6f 	bl	4954 <__ssputs_r>
    4a76:	1c43      	adds	r3, r0, #1
    4a78:	d100      	bne.n	4a7c <_svfiprintf_r+0x64>
    4a7a:	e0b5      	b.n	4be8 <_svfiprintf_r+0x1d0>
    4a7c:	696a      	ldr	r2, [r5, #20]
    4a7e:	9b04      	ldr	r3, [sp, #16]
    4a80:	4694      	mov	ip, r2
    4a82:	4463      	add	r3, ip
    4a84:	616b      	str	r3, [r5, #20]
    4a86:	7823      	ldrb	r3, [r4, #0]
    4a88:	2b00      	cmp	r3, #0
    4a8a:	d100      	bne.n	4a8e <_svfiprintf_r+0x76>
    4a8c:	e0ac      	b.n	4be8 <_svfiprintf_r+0x1d0>
    4a8e:	2201      	movs	r2, #1
    4a90:	2300      	movs	r3, #0
    4a92:	4252      	negs	r2, r2
    4a94:	606a      	str	r2, [r5, #4]
    4a96:	a902      	add	r1, sp, #8
    4a98:	3254      	adds	r2, #84	; 0x54
    4a9a:	1852      	adds	r2, r2, r1
    4a9c:	3401      	adds	r4, #1
    4a9e:	602b      	str	r3, [r5, #0]
    4aa0:	60eb      	str	r3, [r5, #12]
    4aa2:	60ab      	str	r3, [r5, #8]
    4aa4:	7013      	strb	r3, [r2, #0]
    4aa6:	65ab      	str	r3, [r5, #88]	; 0x58
    4aa8:	4e58      	ldr	r6, [pc, #352]	; (4c0c <_svfiprintf_r+0x1f4>)
    4aaa:	2205      	movs	r2, #5
    4aac:	7821      	ldrb	r1, [r4, #0]
    4aae:	0030      	movs	r0, r6
    4ab0:	f000 fa3e 	bl	4f30 <memchr>
    4ab4:	1c62      	adds	r2, r4, #1
    4ab6:	2800      	cmp	r0, #0
    4ab8:	d120      	bne.n	4afc <_svfiprintf_r+0xe4>
    4aba:	6829      	ldr	r1, [r5, #0]
    4abc:	06cb      	lsls	r3, r1, #27
    4abe:	d504      	bpl.n	4aca <_svfiprintf_r+0xb2>
    4ac0:	2353      	movs	r3, #83	; 0x53
    4ac2:	ae02      	add	r6, sp, #8
    4ac4:	3020      	adds	r0, #32
    4ac6:	199b      	adds	r3, r3, r6
    4ac8:	7018      	strb	r0, [r3, #0]
    4aca:	070b      	lsls	r3, r1, #28
    4acc:	d504      	bpl.n	4ad8 <_svfiprintf_r+0xc0>
    4ace:	2353      	movs	r3, #83	; 0x53
    4ad0:	202b      	movs	r0, #43	; 0x2b
    4ad2:	ae02      	add	r6, sp, #8
    4ad4:	199b      	adds	r3, r3, r6
    4ad6:	7018      	strb	r0, [r3, #0]
    4ad8:	7823      	ldrb	r3, [r4, #0]
    4ada:	2b2a      	cmp	r3, #42	; 0x2a
    4adc:	d016      	beq.n	4b0c <_svfiprintf_r+0xf4>
    4ade:	2000      	movs	r0, #0
    4ae0:	210a      	movs	r1, #10
    4ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ae4:	7822      	ldrb	r2, [r4, #0]
    4ae6:	3a30      	subs	r2, #48	; 0x30
    4ae8:	2a09      	cmp	r2, #9
    4aea:	d955      	bls.n	4b98 <_svfiprintf_r+0x180>
    4aec:	2800      	cmp	r0, #0
    4aee:	d015      	beq.n	4b1c <_svfiprintf_r+0x104>
    4af0:	9309      	str	r3, [sp, #36]	; 0x24
    4af2:	e013      	b.n	4b1c <_svfiprintf_r+0x104>
    4af4:	2b25      	cmp	r3, #37	; 0x25
    4af6:	d0b5      	beq.n	4a64 <_svfiprintf_r+0x4c>
    4af8:	3401      	adds	r4, #1
    4afa:	e7b0      	b.n	4a5e <_svfiprintf_r+0x46>
    4afc:	2301      	movs	r3, #1
    4afe:	1b80      	subs	r0, r0, r6
    4b00:	4083      	lsls	r3, r0
    4b02:	6829      	ldr	r1, [r5, #0]
    4b04:	0014      	movs	r4, r2
    4b06:	430b      	orrs	r3, r1
    4b08:	602b      	str	r3, [r5, #0]
    4b0a:	e7cd      	b.n	4aa8 <_svfiprintf_r+0x90>
    4b0c:	9b05      	ldr	r3, [sp, #20]
    4b0e:	1d18      	adds	r0, r3, #4
    4b10:	681b      	ldr	r3, [r3, #0]
    4b12:	9005      	str	r0, [sp, #20]
    4b14:	2b00      	cmp	r3, #0
    4b16:	db39      	blt.n	4b8c <_svfiprintf_r+0x174>
    4b18:	9309      	str	r3, [sp, #36]	; 0x24
    4b1a:	0014      	movs	r4, r2
    4b1c:	7823      	ldrb	r3, [r4, #0]
    4b1e:	2b2e      	cmp	r3, #46	; 0x2e
    4b20:	d10b      	bne.n	4b3a <_svfiprintf_r+0x122>
    4b22:	7863      	ldrb	r3, [r4, #1]
    4b24:	1c62      	adds	r2, r4, #1
    4b26:	2b2a      	cmp	r3, #42	; 0x2a
    4b28:	d13e      	bne.n	4ba8 <_svfiprintf_r+0x190>
    4b2a:	9b05      	ldr	r3, [sp, #20]
    4b2c:	3402      	adds	r4, #2
    4b2e:	1d1a      	adds	r2, r3, #4
    4b30:	681b      	ldr	r3, [r3, #0]
    4b32:	9205      	str	r2, [sp, #20]
    4b34:	2b00      	cmp	r3, #0
    4b36:	db34      	blt.n	4ba2 <_svfiprintf_r+0x18a>
    4b38:	9307      	str	r3, [sp, #28]
    4b3a:	4e35      	ldr	r6, [pc, #212]	; (4c10 <_svfiprintf_r+0x1f8>)
    4b3c:	7821      	ldrb	r1, [r4, #0]
    4b3e:	2203      	movs	r2, #3
    4b40:	0030      	movs	r0, r6
    4b42:	f000 f9f5 	bl	4f30 <memchr>
    4b46:	2800      	cmp	r0, #0
    4b48:	d006      	beq.n	4b58 <_svfiprintf_r+0x140>
    4b4a:	2340      	movs	r3, #64	; 0x40
    4b4c:	1b80      	subs	r0, r0, r6
    4b4e:	4083      	lsls	r3, r0
    4b50:	682a      	ldr	r2, [r5, #0]
    4b52:	3401      	adds	r4, #1
    4b54:	4313      	orrs	r3, r2
    4b56:	602b      	str	r3, [r5, #0]
    4b58:	7821      	ldrb	r1, [r4, #0]
    4b5a:	2206      	movs	r2, #6
    4b5c:	482d      	ldr	r0, [pc, #180]	; (4c14 <_svfiprintf_r+0x1fc>)
    4b5e:	1c66      	adds	r6, r4, #1
    4b60:	7629      	strb	r1, [r5, #24]
    4b62:	f000 f9e5 	bl	4f30 <memchr>
    4b66:	2800      	cmp	r0, #0
    4b68:	d046      	beq.n	4bf8 <_svfiprintf_r+0x1e0>
    4b6a:	4b2b      	ldr	r3, [pc, #172]	; (4c18 <_svfiprintf_r+0x200>)
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d12f      	bne.n	4bd0 <_svfiprintf_r+0x1b8>
    4b70:	6829      	ldr	r1, [r5, #0]
    4b72:	9b05      	ldr	r3, [sp, #20]
    4b74:	2207      	movs	r2, #7
    4b76:	05c9      	lsls	r1, r1, #23
    4b78:	d528      	bpl.n	4bcc <_svfiprintf_r+0x1b4>
    4b7a:	189b      	adds	r3, r3, r2
    4b7c:	4393      	bics	r3, r2
    4b7e:	3308      	adds	r3, #8
    4b80:	9305      	str	r3, [sp, #20]
    4b82:	696b      	ldr	r3, [r5, #20]
    4b84:	9a03      	ldr	r2, [sp, #12]
    4b86:	189b      	adds	r3, r3, r2
    4b88:	616b      	str	r3, [r5, #20]
    4b8a:	e767      	b.n	4a5c <_svfiprintf_r+0x44>
    4b8c:	425b      	negs	r3, r3
    4b8e:	60eb      	str	r3, [r5, #12]
    4b90:	2302      	movs	r3, #2
    4b92:	430b      	orrs	r3, r1
    4b94:	602b      	str	r3, [r5, #0]
    4b96:	e7c0      	b.n	4b1a <_svfiprintf_r+0x102>
    4b98:	434b      	muls	r3, r1
    4b9a:	3401      	adds	r4, #1
    4b9c:	189b      	adds	r3, r3, r2
    4b9e:	2001      	movs	r0, #1
    4ba0:	e7a0      	b.n	4ae4 <_svfiprintf_r+0xcc>
    4ba2:	2301      	movs	r3, #1
    4ba4:	425b      	negs	r3, r3
    4ba6:	e7c7      	b.n	4b38 <_svfiprintf_r+0x120>
    4ba8:	2300      	movs	r3, #0
    4baa:	0014      	movs	r4, r2
    4bac:	200a      	movs	r0, #10
    4bae:	001a      	movs	r2, r3
    4bb0:	606b      	str	r3, [r5, #4]
    4bb2:	7821      	ldrb	r1, [r4, #0]
    4bb4:	3930      	subs	r1, #48	; 0x30
    4bb6:	2909      	cmp	r1, #9
    4bb8:	d903      	bls.n	4bc2 <_svfiprintf_r+0x1aa>
    4bba:	2b00      	cmp	r3, #0
    4bbc:	d0bd      	beq.n	4b3a <_svfiprintf_r+0x122>
    4bbe:	9207      	str	r2, [sp, #28]
    4bc0:	e7bb      	b.n	4b3a <_svfiprintf_r+0x122>
    4bc2:	4342      	muls	r2, r0
    4bc4:	3401      	adds	r4, #1
    4bc6:	1852      	adds	r2, r2, r1
    4bc8:	2301      	movs	r3, #1
    4bca:	e7f2      	b.n	4bb2 <_svfiprintf_r+0x19a>
    4bcc:	3307      	adds	r3, #7
    4bce:	e7d5      	b.n	4b7c <_svfiprintf_r+0x164>
    4bd0:	ab05      	add	r3, sp, #20
    4bd2:	9300      	str	r3, [sp, #0]
    4bd4:	003a      	movs	r2, r7
    4bd6:	4b11      	ldr	r3, [pc, #68]	; (4c1c <_svfiprintf_r+0x204>)
    4bd8:	0029      	movs	r1, r5
    4bda:	9802      	ldr	r0, [sp, #8]
    4bdc:	e000      	b.n	4be0 <_svfiprintf_r+0x1c8>
    4bde:	bf00      	nop
    4be0:	9003      	str	r0, [sp, #12]
    4be2:	9b03      	ldr	r3, [sp, #12]
    4be4:	3301      	adds	r3, #1
    4be6:	d1cc      	bne.n	4b82 <_svfiprintf_r+0x16a>
    4be8:	89bb      	ldrh	r3, [r7, #12]
    4bea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4bec:	065b      	lsls	r3, r3, #25
    4bee:	d400      	bmi.n	4bf2 <_svfiprintf_r+0x1da>
    4bf0:	e729      	b.n	4a46 <_svfiprintf_r+0x2e>
    4bf2:	2001      	movs	r0, #1
    4bf4:	4240      	negs	r0, r0
    4bf6:	e726      	b.n	4a46 <_svfiprintf_r+0x2e>
    4bf8:	ab05      	add	r3, sp, #20
    4bfa:	9300      	str	r3, [sp, #0]
    4bfc:	003a      	movs	r2, r7
    4bfe:	4b07      	ldr	r3, [pc, #28]	; (4c1c <_svfiprintf_r+0x204>)
    4c00:	0029      	movs	r1, r5
    4c02:	9802      	ldr	r0, [sp, #8]
    4c04:	f000 f87a 	bl	4cfc <_printf_i>
    4c08:	e7ea      	b.n	4be0 <_svfiprintf_r+0x1c8>
    4c0a:	46c0      	nop			; (mov r8, r8)
    4c0c:	000054d8 	.word	0x000054d8
    4c10:	000054de 	.word	0x000054de
    4c14:	000054e2 	.word	0x000054e2
    4c18:	00000000 	.word	0x00000000
    4c1c:	00004955 	.word	0x00004955

00004c20 <_printf_common>:
    4c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c22:	0015      	movs	r5, r2
    4c24:	9301      	str	r3, [sp, #4]
    4c26:	688a      	ldr	r2, [r1, #8]
    4c28:	690b      	ldr	r3, [r1, #16]
    4c2a:	9000      	str	r0, [sp, #0]
    4c2c:	000c      	movs	r4, r1
    4c2e:	4293      	cmp	r3, r2
    4c30:	da00      	bge.n	4c34 <_printf_common+0x14>
    4c32:	0013      	movs	r3, r2
    4c34:	0022      	movs	r2, r4
    4c36:	602b      	str	r3, [r5, #0]
    4c38:	3243      	adds	r2, #67	; 0x43
    4c3a:	7812      	ldrb	r2, [r2, #0]
    4c3c:	2a00      	cmp	r2, #0
    4c3e:	d001      	beq.n	4c44 <_printf_common+0x24>
    4c40:	3301      	adds	r3, #1
    4c42:	602b      	str	r3, [r5, #0]
    4c44:	6823      	ldr	r3, [r4, #0]
    4c46:	069b      	lsls	r3, r3, #26
    4c48:	d502      	bpl.n	4c50 <_printf_common+0x30>
    4c4a:	682b      	ldr	r3, [r5, #0]
    4c4c:	3302      	adds	r3, #2
    4c4e:	602b      	str	r3, [r5, #0]
    4c50:	2706      	movs	r7, #6
    4c52:	6823      	ldr	r3, [r4, #0]
    4c54:	401f      	ands	r7, r3
    4c56:	d027      	beq.n	4ca8 <_printf_common+0x88>
    4c58:	0023      	movs	r3, r4
    4c5a:	3343      	adds	r3, #67	; 0x43
    4c5c:	781b      	ldrb	r3, [r3, #0]
    4c5e:	1e5a      	subs	r2, r3, #1
    4c60:	4193      	sbcs	r3, r2
    4c62:	6822      	ldr	r2, [r4, #0]
    4c64:	0692      	lsls	r2, r2, #26
    4c66:	d430      	bmi.n	4cca <_printf_common+0xaa>
    4c68:	0022      	movs	r2, r4
    4c6a:	9901      	ldr	r1, [sp, #4]
    4c6c:	3243      	adds	r2, #67	; 0x43
    4c6e:	9800      	ldr	r0, [sp, #0]
    4c70:	9e08      	ldr	r6, [sp, #32]
    4c72:	47b0      	blx	r6
    4c74:	1c43      	adds	r3, r0, #1
    4c76:	d025      	beq.n	4cc4 <_printf_common+0xa4>
    4c78:	2306      	movs	r3, #6
    4c7a:	6820      	ldr	r0, [r4, #0]
    4c7c:	682a      	ldr	r2, [r5, #0]
    4c7e:	68e1      	ldr	r1, [r4, #12]
    4c80:	4003      	ands	r3, r0
    4c82:	2500      	movs	r5, #0
    4c84:	2b04      	cmp	r3, #4
    4c86:	d103      	bne.n	4c90 <_printf_common+0x70>
    4c88:	1a8d      	subs	r5, r1, r2
    4c8a:	43eb      	mvns	r3, r5
    4c8c:	17db      	asrs	r3, r3, #31
    4c8e:	401d      	ands	r5, r3
    4c90:	68a3      	ldr	r3, [r4, #8]
    4c92:	6922      	ldr	r2, [r4, #16]
    4c94:	4293      	cmp	r3, r2
    4c96:	dd01      	ble.n	4c9c <_printf_common+0x7c>
    4c98:	1a9b      	subs	r3, r3, r2
    4c9a:	18ed      	adds	r5, r5, r3
    4c9c:	2700      	movs	r7, #0
    4c9e:	42bd      	cmp	r5, r7
    4ca0:	d120      	bne.n	4ce4 <_printf_common+0xc4>
    4ca2:	2000      	movs	r0, #0
    4ca4:	e010      	b.n	4cc8 <_printf_common+0xa8>
    4ca6:	3701      	adds	r7, #1
    4ca8:	68e3      	ldr	r3, [r4, #12]
    4caa:	682a      	ldr	r2, [r5, #0]
    4cac:	1a9b      	subs	r3, r3, r2
    4cae:	429f      	cmp	r7, r3
    4cb0:	dad2      	bge.n	4c58 <_printf_common+0x38>
    4cb2:	0022      	movs	r2, r4
    4cb4:	2301      	movs	r3, #1
    4cb6:	3219      	adds	r2, #25
    4cb8:	9901      	ldr	r1, [sp, #4]
    4cba:	9800      	ldr	r0, [sp, #0]
    4cbc:	9e08      	ldr	r6, [sp, #32]
    4cbe:	47b0      	blx	r6
    4cc0:	1c43      	adds	r3, r0, #1
    4cc2:	d1f0      	bne.n	4ca6 <_printf_common+0x86>
    4cc4:	2001      	movs	r0, #1
    4cc6:	4240      	negs	r0, r0
    4cc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4cca:	2030      	movs	r0, #48	; 0x30
    4ccc:	18e1      	adds	r1, r4, r3
    4cce:	3143      	adds	r1, #67	; 0x43
    4cd0:	7008      	strb	r0, [r1, #0]
    4cd2:	0021      	movs	r1, r4
    4cd4:	1c5a      	adds	r2, r3, #1
    4cd6:	3145      	adds	r1, #69	; 0x45
    4cd8:	7809      	ldrb	r1, [r1, #0]
    4cda:	18a2      	adds	r2, r4, r2
    4cdc:	3243      	adds	r2, #67	; 0x43
    4cde:	3302      	adds	r3, #2
    4ce0:	7011      	strb	r1, [r2, #0]
    4ce2:	e7c1      	b.n	4c68 <_printf_common+0x48>
    4ce4:	0022      	movs	r2, r4
    4ce6:	2301      	movs	r3, #1
    4ce8:	321a      	adds	r2, #26
    4cea:	9901      	ldr	r1, [sp, #4]
    4cec:	9800      	ldr	r0, [sp, #0]
    4cee:	9e08      	ldr	r6, [sp, #32]
    4cf0:	47b0      	blx	r6
    4cf2:	1c43      	adds	r3, r0, #1
    4cf4:	d0e6      	beq.n	4cc4 <_printf_common+0xa4>
    4cf6:	3701      	adds	r7, #1
    4cf8:	e7d1      	b.n	4c9e <_printf_common+0x7e>
	...

00004cfc <_printf_i>:
    4cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cfe:	b08b      	sub	sp, #44	; 0x2c
    4d00:	9206      	str	r2, [sp, #24]
    4d02:	000a      	movs	r2, r1
    4d04:	3243      	adds	r2, #67	; 0x43
    4d06:	9307      	str	r3, [sp, #28]
    4d08:	9005      	str	r0, [sp, #20]
    4d0a:	9204      	str	r2, [sp, #16]
    4d0c:	7e0a      	ldrb	r2, [r1, #24]
    4d0e:	000c      	movs	r4, r1
    4d10:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4d12:	2a6e      	cmp	r2, #110	; 0x6e
    4d14:	d100      	bne.n	4d18 <_printf_i+0x1c>
    4d16:	e08f      	b.n	4e38 <_printf_i+0x13c>
    4d18:	d817      	bhi.n	4d4a <_printf_i+0x4e>
    4d1a:	2a63      	cmp	r2, #99	; 0x63
    4d1c:	d02c      	beq.n	4d78 <_printf_i+0x7c>
    4d1e:	d808      	bhi.n	4d32 <_printf_i+0x36>
    4d20:	2a00      	cmp	r2, #0
    4d22:	d100      	bne.n	4d26 <_printf_i+0x2a>
    4d24:	e099      	b.n	4e5a <_printf_i+0x15e>
    4d26:	2a58      	cmp	r2, #88	; 0x58
    4d28:	d054      	beq.n	4dd4 <_printf_i+0xd8>
    4d2a:	0026      	movs	r6, r4
    4d2c:	3642      	adds	r6, #66	; 0x42
    4d2e:	7032      	strb	r2, [r6, #0]
    4d30:	e029      	b.n	4d86 <_printf_i+0x8a>
    4d32:	2a64      	cmp	r2, #100	; 0x64
    4d34:	d001      	beq.n	4d3a <_printf_i+0x3e>
    4d36:	2a69      	cmp	r2, #105	; 0x69
    4d38:	d1f7      	bne.n	4d2a <_printf_i+0x2e>
    4d3a:	6821      	ldr	r1, [r4, #0]
    4d3c:	681a      	ldr	r2, [r3, #0]
    4d3e:	0608      	lsls	r0, r1, #24
    4d40:	d523      	bpl.n	4d8a <_printf_i+0x8e>
    4d42:	1d11      	adds	r1, r2, #4
    4d44:	6019      	str	r1, [r3, #0]
    4d46:	6815      	ldr	r5, [r2, #0]
    4d48:	e025      	b.n	4d96 <_printf_i+0x9a>
    4d4a:	2a73      	cmp	r2, #115	; 0x73
    4d4c:	d100      	bne.n	4d50 <_printf_i+0x54>
    4d4e:	e088      	b.n	4e62 <_printf_i+0x166>
    4d50:	d808      	bhi.n	4d64 <_printf_i+0x68>
    4d52:	2a6f      	cmp	r2, #111	; 0x6f
    4d54:	d029      	beq.n	4daa <_printf_i+0xae>
    4d56:	2a70      	cmp	r2, #112	; 0x70
    4d58:	d1e7      	bne.n	4d2a <_printf_i+0x2e>
    4d5a:	2220      	movs	r2, #32
    4d5c:	6809      	ldr	r1, [r1, #0]
    4d5e:	430a      	orrs	r2, r1
    4d60:	6022      	str	r2, [r4, #0]
    4d62:	e003      	b.n	4d6c <_printf_i+0x70>
    4d64:	2a75      	cmp	r2, #117	; 0x75
    4d66:	d020      	beq.n	4daa <_printf_i+0xae>
    4d68:	2a78      	cmp	r2, #120	; 0x78
    4d6a:	d1de      	bne.n	4d2a <_printf_i+0x2e>
    4d6c:	0022      	movs	r2, r4
    4d6e:	2178      	movs	r1, #120	; 0x78
    4d70:	3245      	adds	r2, #69	; 0x45
    4d72:	7011      	strb	r1, [r2, #0]
    4d74:	4a6c      	ldr	r2, [pc, #432]	; (4f28 <_printf_i+0x22c>)
    4d76:	e030      	b.n	4dda <_printf_i+0xde>
    4d78:	000e      	movs	r6, r1
    4d7a:	681a      	ldr	r2, [r3, #0]
    4d7c:	3642      	adds	r6, #66	; 0x42
    4d7e:	1d11      	adds	r1, r2, #4
    4d80:	6019      	str	r1, [r3, #0]
    4d82:	6813      	ldr	r3, [r2, #0]
    4d84:	7033      	strb	r3, [r6, #0]
    4d86:	2301      	movs	r3, #1
    4d88:	e079      	b.n	4e7e <_printf_i+0x182>
    4d8a:	0649      	lsls	r1, r1, #25
    4d8c:	d5d9      	bpl.n	4d42 <_printf_i+0x46>
    4d8e:	1d11      	adds	r1, r2, #4
    4d90:	6019      	str	r1, [r3, #0]
    4d92:	2300      	movs	r3, #0
    4d94:	5ed5      	ldrsh	r5, [r2, r3]
    4d96:	2d00      	cmp	r5, #0
    4d98:	da03      	bge.n	4da2 <_printf_i+0xa6>
    4d9a:	232d      	movs	r3, #45	; 0x2d
    4d9c:	9a04      	ldr	r2, [sp, #16]
    4d9e:	426d      	negs	r5, r5
    4da0:	7013      	strb	r3, [r2, #0]
    4da2:	4b62      	ldr	r3, [pc, #392]	; (4f2c <_printf_i+0x230>)
    4da4:	270a      	movs	r7, #10
    4da6:	9303      	str	r3, [sp, #12]
    4da8:	e02f      	b.n	4e0a <_printf_i+0x10e>
    4daa:	6820      	ldr	r0, [r4, #0]
    4dac:	6819      	ldr	r1, [r3, #0]
    4dae:	0605      	lsls	r5, r0, #24
    4db0:	d503      	bpl.n	4dba <_printf_i+0xbe>
    4db2:	1d08      	adds	r0, r1, #4
    4db4:	6018      	str	r0, [r3, #0]
    4db6:	680d      	ldr	r5, [r1, #0]
    4db8:	e005      	b.n	4dc6 <_printf_i+0xca>
    4dba:	0640      	lsls	r0, r0, #25
    4dbc:	d5f9      	bpl.n	4db2 <_printf_i+0xb6>
    4dbe:	680d      	ldr	r5, [r1, #0]
    4dc0:	1d08      	adds	r0, r1, #4
    4dc2:	6018      	str	r0, [r3, #0]
    4dc4:	b2ad      	uxth	r5, r5
    4dc6:	4b59      	ldr	r3, [pc, #356]	; (4f2c <_printf_i+0x230>)
    4dc8:	2708      	movs	r7, #8
    4dca:	9303      	str	r3, [sp, #12]
    4dcc:	2a6f      	cmp	r2, #111	; 0x6f
    4dce:	d018      	beq.n	4e02 <_printf_i+0x106>
    4dd0:	270a      	movs	r7, #10
    4dd2:	e016      	b.n	4e02 <_printf_i+0x106>
    4dd4:	3145      	adds	r1, #69	; 0x45
    4dd6:	700a      	strb	r2, [r1, #0]
    4dd8:	4a54      	ldr	r2, [pc, #336]	; (4f2c <_printf_i+0x230>)
    4dda:	9203      	str	r2, [sp, #12]
    4ddc:	681a      	ldr	r2, [r3, #0]
    4dde:	6821      	ldr	r1, [r4, #0]
    4de0:	1d10      	adds	r0, r2, #4
    4de2:	6018      	str	r0, [r3, #0]
    4de4:	6815      	ldr	r5, [r2, #0]
    4de6:	0608      	lsls	r0, r1, #24
    4de8:	d522      	bpl.n	4e30 <_printf_i+0x134>
    4dea:	07cb      	lsls	r3, r1, #31
    4dec:	d502      	bpl.n	4df4 <_printf_i+0xf8>
    4dee:	2320      	movs	r3, #32
    4df0:	4319      	orrs	r1, r3
    4df2:	6021      	str	r1, [r4, #0]
    4df4:	2710      	movs	r7, #16
    4df6:	2d00      	cmp	r5, #0
    4df8:	d103      	bne.n	4e02 <_printf_i+0x106>
    4dfa:	2320      	movs	r3, #32
    4dfc:	6822      	ldr	r2, [r4, #0]
    4dfe:	439a      	bics	r2, r3
    4e00:	6022      	str	r2, [r4, #0]
    4e02:	0023      	movs	r3, r4
    4e04:	2200      	movs	r2, #0
    4e06:	3343      	adds	r3, #67	; 0x43
    4e08:	701a      	strb	r2, [r3, #0]
    4e0a:	6863      	ldr	r3, [r4, #4]
    4e0c:	60a3      	str	r3, [r4, #8]
    4e0e:	2b00      	cmp	r3, #0
    4e10:	db5c      	blt.n	4ecc <_printf_i+0x1d0>
    4e12:	2204      	movs	r2, #4
    4e14:	6821      	ldr	r1, [r4, #0]
    4e16:	4391      	bics	r1, r2
    4e18:	6021      	str	r1, [r4, #0]
    4e1a:	2d00      	cmp	r5, #0
    4e1c:	d158      	bne.n	4ed0 <_printf_i+0x1d4>
    4e1e:	9e04      	ldr	r6, [sp, #16]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d064      	beq.n	4eee <_printf_i+0x1f2>
    4e24:	0026      	movs	r6, r4
    4e26:	9b03      	ldr	r3, [sp, #12]
    4e28:	3642      	adds	r6, #66	; 0x42
    4e2a:	781b      	ldrb	r3, [r3, #0]
    4e2c:	7033      	strb	r3, [r6, #0]
    4e2e:	e05e      	b.n	4eee <_printf_i+0x1f2>
    4e30:	0648      	lsls	r0, r1, #25
    4e32:	d5da      	bpl.n	4dea <_printf_i+0xee>
    4e34:	b2ad      	uxth	r5, r5
    4e36:	e7d8      	b.n	4dea <_printf_i+0xee>
    4e38:	6809      	ldr	r1, [r1, #0]
    4e3a:	681a      	ldr	r2, [r3, #0]
    4e3c:	0608      	lsls	r0, r1, #24
    4e3e:	d505      	bpl.n	4e4c <_printf_i+0x150>
    4e40:	1d11      	adds	r1, r2, #4
    4e42:	6019      	str	r1, [r3, #0]
    4e44:	6813      	ldr	r3, [r2, #0]
    4e46:	6962      	ldr	r2, [r4, #20]
    4e48:	601a      	str	r2, [r3, #0]
    4e4a:	e006      	b.n	4e5a <_printf_i+0x15e>
    4e4c:	0649      	lsls	r1, r1, #25
    4e4e:	d5f7      	bpl.n	4e40 <_printf_i+0x144>
    4e50:	1d11      	adds	r1, r2, #4
    4e52:	6019      	str	r1, [r3, #0]
    4e54:	6813      	ldr	r3, [r2, #0]
    4e56:	8aa2      	ldrh	r2, [r4, #20]
    4e58:	801a      	strh	r2, [r3, #0]
    4e5a:	2300      	movs	r3, #0
    4e5c:	9e04      	ldr	r6, [sp, #16]
    4e5e:	6123      	str	r3, [r4, #16]
    4e60:	e054      	b.n	4f0c <_printf_i+0x210>
    4e62:	681a      	ldr	r2, [r3, #0]
    4e64:	1d11      	adds	r1, r2, #4
    4e66:	6019      	str	r1, [r3, #0]
    4e68:	6816      	ldr	r6, [r2, #0]
    4e6a:	2100      	movs	r1, #0
    4e6c:	6862      	ldr	r2, [r4, #4]
    4e6e:	0030      	movs	r0, r6
    4e70:	f000 f85e 	bl	4f30 <memchr>
    4e74:	2800      	cmp	r0, #0
    4e76:	d001      	beq.n	4e7c <_printf_i+0x180>
    4e78:	1b80      	subs	r0, r0, r6
    4e7a:	6060      	str	r0, [r4, #4]
    4e7c:	6863      	ldr	r3, [r4, #4]
    4e7e:	6123      	str	r3, [r4, #16]
    4e80:	2300      	movs	r3, #0
    4e82:	9a04      	ldr	r2, [sp, #16]
    4e84:	7013      	strb	r3, [r2, #0]
    4e86:	e041      	b.n	4f0c <_printf_i+0x210>
    4e88:	6923      	ldr	r3, [r4, #16]
    4e8a:	0032      	movs	r2, r6
    4e8c:	9906      	ldr	r1, [sp, #24]
    4e8e:	9805      	ldr	r0, [sp, #20]
    4e90:	9d07      	ldr	r5, [sp, #28]
    4e92:	47a8      	blx	r5
    4e94:	1c43      	adds	r3, r0, #1
    4e96:	d043      	beq.n	4f20 <_printf_i+0x224>
    4e98:	6823      	ldr	r3, [r4, #0]
    4e9a:	2500      	movs	r5, #0
    4e9c:	079b      	lsls	r3, r3, #30
    4e9e:	d40f      	bmi.n	4ec0 <_printf_i+0x1c4>
    4ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ea2:	68e0      	ldr	r0, [r4, #12]
    4ea4:	4298      	cmp	r0, r3
    4ea6:	da3d      	bge.n	4f24 <_printf_i+0x228>
    4ea8:	0018      	movs	r0, r3
    4eaa:	e03b      	b.n	4f24 <_printf_i+0x228>
    4eac:	0022      	movs	r2, r4
    4eae:	2301      	movs	r3, #1
    4eb0:	3219      	adds	r2, #25
    4eb2:	9906      	ldr	r1, [sp, #24]
    4eb4:	9805      	ldr	r0, [sp, #20]
    4eb6:	9e07      	ldr	r6, [sp, #28]
    4eb8:	47b0      	blx	r6
    4eba:	1c43      	adds	r3, r0, #1
    4ebc:	d030      	beq.n	4f20 <_printf_i+0x224>
    4ebe:	3501      	adds	r5, #1
    4ec0:	68e3      	ldr	r3, [r4, #12]
    4ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4ec4:	1a9b      	subs	r3, r3, r2
    4ec6:	429d      	cmp	r5, r3
    4ec8:	dbf0      	blt.n	4eac <_printf_i+0x1b0>
    4eca:	e7e9      	b.n	4ea0 <_printf_i+0x1a4>
    4ecc:	2d00      	cmp	r5, #0
    4ece:	d0a9      	beq.n	4e24 <_printf_i+0x128>
    4ed0:	9e04      	ldr	r6, [sp, #16]
    4ed2:	0028      	movs	r0, r5
    4ed4:	0039      	movs	r1, r7
    4ed6:	f7ff fbcd 	bl	4674 <__aeabi_uidivmod>
    4eda:	9b03      	ldr	r3, [sp, #12]
    4edc:	3e01      	subs	r6, #1
    4ede:	5c5b      	ldrb	r3, [r3, r1]
    4ee0:	0028      	movs	r0, r5
    4ee2:	7033      	strb	r3, [r6, #0]
    4ee4:	0039      	movs	r1, r7
    4ee6:	f7ff fb3f 	bl	4568 <__udivsi3>
    4eea:	1e05      	subs	r5, r0, #0
    4eec:	d1f1      	bne.n	4ed2 <_printf_i+0x1d6>
    4eee:	2f08      	cmp	r7, #8
    4ef0:	d109      	bne.n	4f06 <_printf_i+0x20a>
    4ef2:	6823      	ldr	r3, [r4, #0]
    4ef4:	07db      	lsls	r3, r3, #31
    4ef6:	d506      	bpl.n	4f06 <_printf_i+0x20a>
    4ef8:	6863      	ldr	r3, [r4, #4]
    4efa:	6922      	ldr	r2, [r4, #16]
    4efc:	4293      	cmp	r3, r2
    4efe:	dc02      	bgt.n	4f06 <_printf_i+0x20a>
    4f00:	2330      	movs	r3, #48	; 0x30
    4f02:	3e01      	subs	r6, #1
    4f04:	7033      	strb	r3, [r6, #0]
    4f06:	9b04      	ldr	r3, [sp, #16]
    4f08:	1b9b      	subs	r3, r3, r6
    4f0a:	6123      	str	r3, [r4, #16]
    4f0c:	9b07      	ldr	r3, [sp, #28]
    4f0e:	aa09      	add	r2, sp, #36	; 0x24
    4f10:	9300      	str	r3, [sp, #0]
    4f12:	0021      	movs	r1, r4
    4f14:	9b06      	ldr	r3, [sp, #24]
    4f16:	9805      	ldr	r0, [sp, #20]
    4f18:	f7ff fe82 	bl	4c20 <_printf_common>
    4f1c:	1c43      	adds	r3, r0, #1
    4f1e:	d1b3      	bne.n	4e88 <_printf_i+0x18c>
    4f20:	2001      	movs	r0, #1
    4f22:	4240      	negs	r0, r0
    4f24:	b00b      	add	sp, #44	; 0x2c
    4f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f28:	000054fa 	.word	0x000054fa
    4f2c:	000054e9 	.word	0x000054e9

00004f30 <memchr>:
    4f30:	b2c9      	uxtb	r1, r1
    4f32:	1882      	adds	r2, r0, r2
    4f34:	4290      	cmp	r0, r2
    4f36:	d101      	bne.n	4f3c <memchr+0xc>
    4f38:	2000      	movs	r0, #0
    4f3a:	4770      	bx	lr
    4f3c:	7803      	ldrb	r3, [r0, #0]
    4f3e:	428b      	cmp	r3, r1
    4f40:	d0fb      	beq.n	4f3a <memchr+0xa>
    4f42:	3001      	adds	r0, #1
    4f44:	e7f6      	b.n	4f34 <memchr+0x4>

00004f46 <memmove>:
    4f46:	b510      	push	{r4, lr}
    4f48:	4288      	cmp	r0, r1
    4f4a:	d902      	bls.n	4f52 <memmove+0xc>
    4f4c:	188b      	adds	r3, r1, r2
    4f4e:	4298      	cmp	r0, r3
    4f50:	d308      	bcc.n	4f64 <memmove+0x1e>
    4f52:	2300      	movs	r3, #0
    4f54:	429a      	cmp	r2, r3
    4f56:	d007      	beq.n	4f68 <memmove+0x22>
    4f58:	5ccc      	ldrb	r4, [r1, r3]
    4f5a:	54c4      	strb	r4, [r0, r3]
    4f5c:	3301      	adds	r3, #1
    4f5e:	e7f9      	b.n	4f54 <memmove+0xe>
    4f60:	5c8b      	ldrb	r3, [r1, r2]
    4f62:	5483      	strb	r3, [r0, r2]
    4f64:	3a01      	subs	r2, #1
    4f66:	d2fb      	bcs.n	4f60 <memmove+0x1a>
    4f68:	bd10      	pop	{r4, pc}

00004f6a <_realloc_r>:
    4f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f6c:	0007      	movs	r7, r0
    4f6e:	000d      	movs	r5, r1
    4f70:	0016      	movs	r6, r2
    4f72:	2900      	cmp	r1, #0
    4f74:	d105      	bne.n	4f82 <_realloc_r+0x18>
    4f76:	0011      	movs	r1, r2
    4f78:	f7ff fc2c 	bl	47d4 <_malloc_r>
    4f7c:	0004      	movs	r4, r0
    4f7e:	0020      	movs	r0, r4
    4f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f82:	2a00      	cmp	r2, #0
    4f84:	d103      	bne.n	4f8e <_realloc_r+0x24>
    4f86:	f7ff fbdb 	bl	4740 <_free_r>
    4f8a:	0034      	movs	r4, r6
    4f8c:	e7f7      	b.n	4f7e <_realloc_r+0x14>
    4f8e:	f000 f812 	bl	4fb6 <_malloc_usable_size_r>
    4f92:	002c      	movs	r4, r5
    4f94:	4286      	cmp	r6, r0
    4f96:	d9f2      	bls.n	4f7e <_realloc_r+0x14>
    4f98:	0031      	movs	r1, r6
    4f9a:	0038      	movs	r0, r7
    4f9c:	f7ff fc1a 	bl	47d4 <_malloc_r>
    4fa0:	1e04      	subs	r4, r0, #0
    4fa2:	d0ec      	beq.n	4f7e <_realloc_r+0x14>
    4fa4:	0029      	movs	r1, r5
    4fa6:	0032      	movs	r2, r6
    4fa8:	f7ff fbb8 	bl	471c <memcpy>
    4fac:	0029      	movs	r1, r5
    4fae:	0038      	movs	r0, r7
    4fb0:	f7ff fbc6 	bl	4740 <_free_r>
    4fb4:	e7e3      	b.n	4f7e <_realloc_r+0x14>

00004fb6 <_malloc_usable_size_r>:
    4fb6:	1f0b      	subs	r3, r1, #4
    4fb8:	681b      	ldr	r3, [r3, #0]
    4fba:	1f18      	subs	r0, r3, #4
    4fbc:	2b00      	cmp	r3, #0
    4fbe:	da01      	bge.n	4fc4 <_malloc_usable_size_r+0xe>
    4fc0:	580b      	ldr	r3, [r1, r0]
    4fc2:	18c0      	adds	r0, r0, r3
    4fc4:	4770      	bx	lr
    4fc6:	0000      	movs	r0, r0
    4fc8:	4a325b1b 	.word	0x4a325b1b
    4fcc:	3b305b1b 	.word	0x3b305b1b
    4fd0:	00004830 	.word	0x00004830
    4fd4:	75626544 	.word	0x75626544
    4fd8:	61542067 	.word	0x61542067
    4fdc:	00006b73 	.word	0x00006b73
    4fe0:	30335b1b 	.word	0x30335b1b
    4fe4:	3330313b 	.word	0x3330313b
    4fe8:	6265446d 	.word	0x6265446d
    4fec:	203a6775 	.word	0x203a6775
    4ff0:	345b1b20 	.word	0x345b1b20
    4ff4:	37333b30 	.word	0x37333b30
    4ff8:	0000206d 	.word	0x0000206d
    4ffc:	30335b1b 	.word	0x30335b1b
    5000:	3130313b 	.word	0x3130313b
    5004:	7272456d 	.word	0x7272456d
    5008:	203a726f 	.word	0x203a726f
    500c:	345b1b20 	.word	0x345b1b20
    5010:	37333b30 	.word	0x37333b30
    5014:	0000206d 	.word	0x0000206d
    5018:	30335b1b 	.word	0x30335b1b
    501c:	3230313b 	.word	0x3230313b
    5020:	666e496d 	.word	0x666e496d
    5024:	20203a6f 	.word	0x20203a6f
    5028:	345b1b20 	.word	0x345b1b20
    502c:	37333b30 	.word	0x37333b30
    5030:	0000206d 	.word	0x0000206d
    5034:	30335b1b 	.word	0x30335b1b
    5038:	3530313b 	.word	0x3530313b
    503c:	7261576d 	.word	0x7261576d
    5040:	676e756e 	.word	0x676e756e
    5044:	345b1b3a 	.word	0x345b1b3a
    5048:	37333b30 	.word	0x37333b30
    504c:	0000206d 	.word	0x0000206d
    5050:	0000116a 	.word	0x0000116a
    5054:	00001172 	.word	0x00001172
    5058:	0000118e 	.word	0x0000118e
    505c:	00001184 	.word	0x00001184
    5060:	00001198 	.word	0x00001198
    5064:	000011a2 	.word	0x000011a2
    5068:	000011ac 	.word	0x000011ac
    506c:	000011c4 	.word	0x000011c4
    5070:	000011de 	.word	0x000011de
    5074:	000011fc 	.word	0x000011fc
    5078:	00001204 	.word	0x00001204
    507c:	0000120e 	.word	0x0000120e
    5080:	00001166 	.word	0x00001166
    5084:	00001218 	.word	0x00001218
    5088:	00001220 	.word	0x00001220
    508c:	00001230 	.word	0x00001230
    5090:	00000800 	.word	0x00000800
    5094:	02020202 	.word	0x02020202
    5098:	02020202 	.word	0x02020202
    509c:	02020202 	.word	0x02020202
    50a0:	02020202 	.word	0x02020202
    50a4:	30783557 	.word	0x30783557
    50a8:	6e692030 	.word	0x6e692030
    50ac:	61697469 	.word	0x61697469
    50b0:	657a696c 	.word	0x657a696c
    50b4:	61662064 	.word	0x61662064
    50b8:	0d2e6c69 	.word	0x0d2e6c69
    50bc:	0000000a 	.word	0x0000000a
    50c0:	30783557 	.word	0x30783557
    50c4:	6e692030 	.word	0x6e692030
    50c8:	72726574 	.word	0x72726574
    50cc:	0d747075 	.word	0x0d747075
    50d0:	0000000a 	.word	0x0000000a
    50d4:	6e6b6e55 	.word	0x6e6b6e55
    50d8:	206e776f 	.word	0x206e776f
    50dc:	20594850 	.word	0x20594850
    50e0:	6b6e696c 	.word	0x6b6e696c
    50e4:	61747320 	.word	0x61747320
    50e8:	2e737574 	.word	0x2e737574
    50ec:	00000a0d 	.word	0x00000a0d
    50f0:	30353557 	.word	0x30353557
    50f4:	6e692030 	.word	0x6e692030
    50f8:	61697469 	.word	0x61697469
    50fc:	6973696c 	.word	0x6973696c
    5100:	00747265 	.word	0x00747265
    5104:	5074754f 	.word	0x5074754f
    5108:	6e537475 	.word	0x6e537475
    510c:	2052535f 	.word	0x2052535f
    5110:	6425203a 	.word	0x6425203a
    5114:	0000000a 	.word	0x0000000a
    5118:	50545448 	.word	0x50545448
    511c:	71655220 	.word	0x71655220
    5120:	74736575 	.word	0x74736575
    5124:	63657220 	.word	0x63657220
    5128:	65766965 	.word	0x65766965
    512c:	0d203a64 	.word	0x0d203a64
    5130:	0d73250a 	.word	0x0d73250a
    5134:	0000000a 	.word	0x0000000a
    5138:	20495053 	.word	0x20495053
    513c:	74696e49 	.word	0x74696e49
    5140:	65746169 	.word	0x65746169
    5144:	00000064 	.word	0x00000064
    5148:	4f44213c 	.word	0x4f44213c
    514c:	50595443 	.word	0x50595443
    5150:	74682045 	.word	0x74682045
    5154:	093e6c6d 	.word	0x093e6c6d
    5158:	74683c09 	.word	0x74683c09
    515c:	093e6c6d 	.word	0x093e6c6d
    5160:	6f623c09 	.word	0x6f623c09
    5164:	093e7964 	.word	0x093e7964
    5168:	31683c09 	.word	0x31683c09
    516c:	6968543e 	.word	0x6968543e
    5170:	73692073 	.word	0x73692073
    5174:	61656820 	.word	0x61656820
    5178:	676e6964 	.word	0x676e6964
    517c:	2f3c3120 	.word	0x2f3c3120
    5180:	093e3168 	.word	0x093e3168
    5184:	32683c09 	.word	0x32683c09
    5188:	6968543e 	.word	0x6968543e
    518c:	73692073 	.word	0x73692073
    5190:	61656820 	.word	0x61656820
    5194:	676e6964 	.word	0x676e6964
    5198:	2f3c3220 	.word	0x2f3c3220
    519c:	093e3268 	.word	0x093e3268
    51a0:	33683c09 	.word	0x33683c09
    51a4:	6968543e 	.word	0x6968543e
    51a8:	73692073 	.word	0x73692073
    51ac:	61656820 	.word	0x61656820
    51b0:	676e6964 	.word	0x676e6964
    51b4:	2f3c3320 	.word	0x2f3c3320
    51b8:	093e3368 	.word	0x093e3368
    51bc:	34683c09 	.word	0x34683c09
    51c0:	6968543e 	.word	0x6968543e
    51c4:	73692073 	.word	0x73692073
    51c8:	61656820 	.word	0x61656820
    51cc:	676e6964 	.word	0x676e6964
    51d0:	2f3c3420 	.word	0x2f3c3420
    51d4:	093e3468 	.word	0x093e3468
    51d8:	35683c09 	.word	0x35683c09
    51dc:	6968543e 	.word	0x6968543e
    51e0:	73692073 	.word	0x73692073
    51e4:	61656820 	.word	0x61656820
    51e8:	676e6964 	.word	0x676e6964
    51ec:	2f3c3520 	.word	0x2f3c3520
    51f0:	093e3568 	.word	0x093e3568
    51f4:	36683c09 	.word	0x36683c09
    51f8:	6968543e 	.word	0x6968543e
    51fc:	73692073 	.word	0x73692073
    5200:	61656820 	.word	0x61656820
    5204:	676e6964 	.word	0x676e6964
    5208:	2f3c3620 	.word	0x2f3c3620
    520c:	093e3668 	.word	0x093e3668
    5210:	622f3c09 	.word	0x622f3c09
    5214:	3e79646f 	.word	0x3e79646f
    5218:	2f3c0909 	.word	0x2f3c0909
    521c:	6c6d7468 	.word	0x6c6d7468
    5220:	0000003e 	.word	0x0000003e
    5224:	00000062 	.word	0x00000062
    5228:	00000063 	.word	0x00000063
    522c:	2043414d 	.word	0x2043414d
    5230:	72646441 	.word	0x72646441
    5234:	20737365 	.word	0x20737365
    5238:	3025203a 	.word	0x3025203a
    523c:	253a7832 	.word	0x253a7832
    5240:	3a783230 	.word	0x3a783230
    5244:	78323025 	.word	0x78323025
    5248:	3230253a 	.word	0x3230253a
    524c:	30253a78 	.word	0x30253a78
    5250:	253a7832 	.word	0x253a7832
    5254:	0a783230 	.word	0x0a783230
    5258:	0000000d 	.word	0x0000000d
    525c:	20205049 	.word	0x20205049
    5260:	72646441 	.word	0x72646441
    5264:	20737365 	.word	0x20737365
    5268:	6425203a 	.word	0x6425203a
    526c:	2e64252e 	.word	0x2e64252e
    5270:	252e6425 	.word	0x252e6425
    5274:	000d0a64 	.word	0x000d0a64
    5278:	6e627553 	.word	0x6e627553
    527c:	4d207465 	.word	0x4d207465
    5280:	206b7361 	.word	0x206b7361
    5284:	6425203a 	.word	0x6425203a
    5288:	2e64252e 	.word	0x2e64252e
    528c:	252e6425 	.word	0x252e6425
    5290:	000d0a64 	.word	0x000d0a64
    5294:	65746147 	.word	0x65746147
    5298:	20796177 	.word	0x20796177
    529c:	20202020 	.word	0x20202020
    52a0:	6425203a 	.word	0x6425203a
    52a4:	2e64252e 	.word	0x2e64252e
    52a8:	252e6425 	.word	0x252e6425
    52ac:	000d0a64 	.word	0x000d0a64
    52b0:	20534e44 	.word	0x20534e44
    52b4:	76726553 	.word	0x76726553
    52b8:	20207265 	.word	0x20207265
    52bc:	6425203a 	.word	0x6425203a
    52c0:	2e64252e 	.word	0x2e64252e
    52c4:	252e6425 	.word	0x252e6425
    52c8:	000d0a64 	.word	0x000d0a64
    52cc:	50545448 	.word	0x50545448
    52d0:	312e312f 	.word	0x312e312f
    52d4:	30303220 	.word	0x30303220
    52d8:	0d4b4f20 	.word	0x0d4b4f20
    52dc:	0000000a 	.word	0x0000000a
    52e0:	746e6f43 	.word	0x746e6f43
    52e4:	2d746e65 	.word	0x2d746e65
    52e8:	65707954 	.word	0x65707954
    52ec:	6574203a 	.word	0x6574203a
    52f0:	682f7478 	.word	0x682f7478
    52f4:	0d6c6d74 	.word	0x0d6c6d74
    52f8:	0000000a 	.word	0x0000000a
    52fc:	6e6e6f43 	.word	0x6e6e6f43
    5300:	69746365 	.word	0x69746365
    5304:	203a6e6f 	.word	0x203a6e6f
    5308:	736f6c63 	.word	0x736f6c63
    530c:	000a0d65 	.word	0x000a0d65
    5310:	6f437325 	.word	0x6f437325
    5314:	6e65746e 	.word	0x6e65746e
    5318:	654c2d74 	.word	0x654c2d74
    531c:	6874676e 	.word	0x6874676e
    5320:	6425203a 	.word	0x6425203a
    5324:	00000000 	.word	0x00000000
    5328:	0a0d0a0d 	.word	0x0a0d0a0d
    532c:	00000000 	.word	0x00000000
    5330:	00007325 	.word	0x00007325
    5334:	444d4153 	.word	0x444d4153
    5338:	50203132 	.word	0x50203132
    533c:	656a6f72 	.word	0x656a6f72
    5340:	6d20746b 	.word	0x6d20746b
    5344:	57207469 	.word	0x57207469
    5348:	30303535 	.word	0x30303535
    534c:	746e4920 	.word	0x746e4920
    5350:	61726765 	.word	0x61726765
    5354:	6e6f6974 	.word	0x6e6f6974
    5358:	00000000 	.word	0x00000000
    535c:	6f666e49 	.word	0x6f666e49
    5360:	69654220 	.word	0x69654220
    5364:	65697073 	.word	0x65697073
    5368:	0000006c 	.word	0x0000006c
    536c:	75626544 	.word	0x75626544
    5370:	65422067 	.word	0x65422067
    5374:	69707369 	.word	0x69707369
    5378:	00006c65 	.word	0x00006c65
    537c:	6e726157 	.word	0x6e726157
    5380:	20676e75 	.word	0x20676e75
    5384:	73696542 	.word	0x73696542
    5388:	6c656970 	.word	0x6c656970
    538c:	00000000 	.word	0x00000000
    5390:	6f727245 	.word	0x6f727245
    5394:	65422072 	.word	0x65422072
    5398:	69707369 	.word	0x69707369
    539c:	00006c65 	.word	0x00006c65
    53a0:	68636f4e 	.word	0x68636f4e
    53a4:	6e696520 	.word	0x6e696520
    53a8:	61615020 	.word	0x61615020
    53ac:	79422072 	.word	0x79422072
    53b0:	20736574 	.word	0x20736574
    53b4:	20736c61 	.word	0x20736c61
    53b8:	74736554 	.word	0x74736554
    53bc:	73756120 	.word	0x73756120
    53c0:	65626167 	.word	0x65626167
    53c4:	206d6920 	.word	0x206d6920
    53c8:	54524155 	.word	0x54524155
    53cc:	00000000 	.word	0x00000000
    53d0:	6e69616d 	.word	0x6e69616d
    53d4:	74736554 	.word	0x74736554
    53d8:	7361745f 	.word	0x7361745f
    53dc:	0000006b 	.word	0x0000006b
    53e0:	42000800 	.word	0x42000800
    53e4:	42000c00 	.word	0x42000c00
    53e8:	42001000 	.word	0x42001000
    53ec:	42001400 	.word	0x42001400
    53f0:	42001800 	.word	0x42001800
    53f4:	42001c00 	.word	0x42001c00
    53f8:	000028e2 	.word	0x000028e2
    53fc:	000028de 	.word	0x000028de
    5400:	000028de 	.word	0x000028de
    5404:	00002944 	.word	0x00002944
    5408:	00002944 	.word	0x00002944
    540c:	000028f6 	.word	0x000028f6
    5410:	000028e8 	.word	0x000028e8
    5414:	000028fc 	.word	0x000028fc
    5418:	00002932 	.word	0x00002932
    541c:	000029cc 	.word	0x000029cc
    5420:	000029ac 	.word	0x000029ac
    5424:	000029ac 	.word	0x000029ac
    5428:	00002a38 	.word	0x00002a38
    542c:	000029be 	.word	0x000029be
    5430:	000029da 	.word	0x000029da
    5434:	000029b0 	.word	0x000029b0
    5438:	000029e8 	.word	0x000029e8
    543c:	00002a28 	.word	0x00002a28
    5440:	454c4449 	.word	0x454c4449
    5444:	00000000 	.word	0x00000000
    5448:	000044a8 	.word	0x000044a8
    544c:	000044a8 	.word	0x000044a8
    5450:	000044a8 	.word	0x000044a8
    5454:	00004420 	.word	0x00004420
    5458:	000044ea 	.word	0x000044ea
    545c:	00004504 	.word	0x00004504
    5460:	000044a8 	.word	0x000044a8
    5464:	000044a8 	.word	0x000044a8
    5468:	00004420 	.word	0x00004420
    546c:	000044ea 	.word	0x000044ea
    5470:	20726d54 	.word	0x20726d54
    5474:	00637653 	.word	0x00637653

00005478 <__sf_fake_stderr>:
	...

00005498 <__sf_fake_stdin>:
	...

000054b8 <__sf_fake_stdout>:
	...
    54d8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    54e8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    54f8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    5508:	00006665                                ef..

0000550c <_init>:
    550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    550e:	46c0      	nop			; (mov r8, r8)
    5510:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5512:	bc08      	pop	{r3}
    5514:	469e      	mov	lr, r3
    5516:	4770      	bx	lr

00005518 <__init_array_start>:
    5518:	000000dd 	.word	0x000000dd

0000551c <_fini>:
    551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    551e:	46c0      	nop			; (mov r8, r8)
    5520:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5522:	bc08      	pop	{r3}
    5524:	469e      	mov	lr, r3
    5526:	4770      	bx	lr

00005528 <__fini_array_start>:
    5528:	000000b5 	.word	0x000000b5
